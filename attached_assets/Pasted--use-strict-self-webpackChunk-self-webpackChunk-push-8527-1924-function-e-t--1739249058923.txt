"use strict";
(self.webpackChunk = self.webpackChunk || []).push([[8527], {
    1924: function(e, t, s) {
        s.r(t);
        s.d(t, {
            default: function() {
                return b
            }
        });
        var i = s(1)
          , n = s(11)
          , o = s.n(n)
          , d = s(341)
          , r = s(969)
          , l = s(812)
          , a = s(819)
          , u = s(820)
          , c = s(866)
          , p = s(580)
          , h = s(528)
          , g = s(1281)
          , m = s(693)
          , f = s(8);
        class b extends i.Component {
            renderLanguageSelect() {
                const {masterLanguage: e, onMasterLanguageChange: t} = this.props;
                return (0,
                f.jsx)(g.default, {
                    defaultValue: e,
                    onChange: t
                })
            }
            render() {
                const {i18nKey: e, onChangeMasterLanguageCancel: t, onMasterLanguageChangeConfirm: s} = this.props;
                return (0,
                f.jsxs)(r.default, {
                    children: [(0,
                    f.jsxs)(a.default, {
                        children: [(0,
                        f.jsx)(l.default, {
                            onClick: t
                        }), (0,
                        f.jsx)(m.default, {
                            children: (0,
                            f.jsx)(d.default, {
                                message: e("masterLanguageModal.header")
                            })
                        })]
                    }), (0,
                    f.jsxs)(u.default, {
                        children: [(0,
                        f.jsx)(d.default, {
                            message: e("masterLanguageModal.body")
                        }), (0,
                        f.jsxs)("div", {
                            className: "p-top-2",
                            children: [(0,
                            f.jsx)(p.default, {
                                children: (0,
                                f.jsx)(d.default, {
                                    message: e("masterLanguageModal.select.label")
                                })
                            }), this.renderLanguageSelect()]
                        })]
                    }), (0,
                    f.jsx)(c.default, {
                        children: (0,
                        f.jsx)(h.default, {
                            use: "primary",
                            onClick: s,
                            children: (0,
                            f.jsx)(d.default, {
                                message: e("masterLanguageModal.confirmButton")
                            })
                        })
                    })]
                })
            }
        }
        b.propTypes = {
            i18nKey: o().func.isRequired,
            masterLanguage: o().string,
            onChangeMasterLanguageCancel: o().func.isRequired,
            onMasterLanguageChange: o().func.isRequired,
            onMasterLanguageChangeConfirm: o().func.isRequired
        }
    },
    1925: function(e, t, s) {
        s.r(t);
        s.d(t, {
            default: function() {
                return b
            }
        });
        var i = s(1)
          , n = s(11)
          , o = s.n(n)
          , d = s(341)
          , r = s(344)
          , l = s(528)
          , a = s(969)
          , u = s(812)
          , c = s(820)
          , p = s(866)
          , h = s(848)
          , g = s(693)
          , m = s(819)
          , f = s(8);
        class b extends i.Component {
            render() {
                const {i18nKey: e, languageToDelete: t, onDeleteLanguage: s, onDeleteLanguageCancel: i, disabled: n} = this.props;
                return (0,
                f.jsxs)(a.default, {
                    use: "danger",
                    children: [(0,
                    f.jsxs)(m.default, {
                        children: [(0,
                        f.jsx)(u.default, {
                            onClick: i
                        }), (0,
                        f.jsx)(g.default, {
                            children: (0,
                            f.jsx)(r.default, {
                                message: e("deleteLanguageModal.header"),
                                options: {
                                    language: (0,
                                    f.jsx)(d.default, {
                                        message: (0,
                                        h.languageI18nKey)(t)
                                    })
                                }
                            })
                        })]
                    }), (0,
                    f.jsx)(c.default, {
                        children: (0,
                        f.jsx)("span", {
                            children: (0,
                            f.jsx)(d.default, {
                                message: e("deleteLanguageModal.body")
                            })
                        })
                    }), (0,
                    f.jsxs)(p.default, {
                        children: [(0,
                        f.jsx)(l.default, {
                            use: "danger",
                            onClick: s,
                            disabled: n,
                            children: (0,
                            f.jsx)(d.default, {
                                message: e("deleteLanguageModal.buttons.delete")
                            })
                        }), (0,
                        f.jsx)(l.default, {
                            use: "tertiary-light",
                            onClick: i,
                            disabled: n,
                            children: (0,
                            f.jsx)(d.default, {
                                message: e("deleteLanguageModal.buttons.cancel")
                            })
                        })]
                    })]
                })
            }
        }
        b.propTypes = {
            languageToDelete: o().string,
            i18nKey: o().func.isRequired,
            onDeleteLanguage: o().func.isRequired,
            onDeleteLanguageCancel: o().func.isRequired,
            disabled: o().bool
        }
    },
    1922: function(e, t, s) {
        s.d(t, {
            default: function() {
                return Np
            }
        });
        var i = s(1)
          , n = s(1426)
          , o = s.n(n)
          , d = s(94)
          , r = s(64)
          , l = s(11)
          , a = s.n(l)
          , u = s(1923)
          , c = s(108)
          , p = s(341)
          , h = s(133)
          , g = s(690)
          , m = s(600)
          , f = s(613)
          , b = s(1919)
          , C = s(1906)
          , E = s(1905)
          , O = s(286)
          , y = s(697)
          , T = s(126)
          , x = s(521)
          , j = s(117)
          , I = s(784)
          , R = s(122)
          , S = s(338)
          , F = s(118)
          , L = s(688)
          , v = s(689)
          , W = s(479)
          , A = s(447)
          , D = s(1240)
          , P = s(440)
          , N = s(443)
          , _ = s(517)
          , q = s(93)
          , U = s(344)
          , k = s(791)
          , G = s(528)
          , M = s(347)
          , B = s(586)
          , w = s(278)
          , H = s(302)
          , V = s(252)
          , $ = s(112)
          , Y = s(287)
          , z = s(1917)
          , K = s(1249)
          , J = s(1248)
          , X = s(1246)
          , Z = s(1247)
          , Q = s(407)
          , ee = s(468)
          , te = s(253)
          , se = s(1619)
          , ie = s(805)
          , ne = s(8);
        const oe = (0,
        ie.default)(( () => Promise.all([s.e(7626), s.e(2038)]).then(s.bind(s, 2051))))
          , de = (0,
        ie.default)(( () => Promise.all([s.e(7626), s.e(2038)]).then(s.bind(s, 2052))));
        function re(e) {
            class t extends i.Component {
                constructor(e) {
                    super(e);
                    this.handleUpgradeModalOpen = (e, t=!1) => {
                        this.props.getSessionStorageItem(e) && !t || this.setState({
                            isUpgradeModalOpen: !0
                        })
                    }
                    ;
                    this.handleUpgradeModalClose = () => {
                        this.props.setSessionStorageItem(this.props.customWidgetId, !0);
                        this.setState({
                            isUpgradeModalOpen: !1
                        })
                    }
                    ;
                    this.handleUpgradeModalCallback = e => {
                        this.handleUpgradeModalClose();
                        if (e) {
                            this.upgradeData = e;
                            this.isUpgrading = !0;
                            this.props.upgradeCustomWidget(this.props.customWidgetId, e)
                        }
                    }
                    ;
                    this.handleForceUpgradeModalOpen = () => {
                        this.setState({
                            isForceUpgradeModalOpen: !0
                        })
                    }
                    ;
                    this.handleForceUpgradeModalClose = () => {
                        this.setState({
                            isForceUpgradeModalOpen: !1
                        })
                    }
                    ;
                    this.handleForceUpgradeModalCallback = e => {
                        this.handleForceUpgradeModalClose();
                        e && this.props.forceUpgradeCustomWidget(this.props.customWidgetId, this.upgradeData || {})
                    }
                    ;
                    this.state = {
                        isUpgradeModalOpen: !1,
                        isForceUpgradeModalOpen: !1
                    }
                }
                componentDidUpdate() {
                    const {upgradeError: e} = this.props;
                    if (this.isUpgrading && e && (0,
                    te.isBadRequestError)(e)) {
                        this.isUpgrading = !1;
                        this.handleForceUpgradeModalOpen()
                    }
                }
                renderUpgradeModal() {
                    return this.state.isUpgradeModalOpen ? (0,
                    ne.jsx)(de, {
                        contentTypes: this.props.contentTypes,
                        hostTemplateTypes: this.props.hostTemplateTypes,
                        customWidgetId: this.props.customWidgetId,
                        customWidgetName: this.props.customWidgetName,
                        callback: this.handleUpgradeModalCallback,
                        dependentsByCategory: this.props.dependentsByCategory,
                        dependentsCount: this.props.dependentsCount
                    }) : null
                }
                renderForceUpgradeModal() {
                    return this.state.isForceUpgradeModalOpen ? (0,
                    ne.jsx)(oe, {
                        customWidgetId: this.props.customWidgetId,
                        callback: this.handleForceUpgradeModalCallback,
                        upgradeError: this.props.upgradeError
                    }) : null
                }
                render() {
                    return (0,
                    ne.jsx)(e, Object.assign({}, this.props, {
                        onUpgradeClick: (...e) => this.handleUpgradeModalOpen(this.props.customWidgetId, !0, ...e),
                        UpgradeModal: this.renderUpgradeModal(),
                        ForceUpgradeModal: this.renderForceUpgradeModal()
                    }))
                }
            }
            t.propTypes = {
                customWidgetId: u.default.customWidgetId.isRequired,
                customWidgetName: a().string.isRequired,
                upgradeError: a().object,
                upgradeCustomWidget: a().func.isRequired,
                forceUpgradeCustomWidget: a().func.isRequired,
                dependentsByCategory: y.dependentsByCategory.isRequired,
                contentTypes: a().array.isRequired,
                hostTemplateTypes: a().array.isRequired,
                dependentsCount: a().number,
                setSessionStorageItem: a().func.isRequired,
                getSessionStorageItem: a().func.isRequired
            };
            function s() {
                const e = P.makeGetRequestStatus()
                  , t = P.makeGetCustomWidgetBuffer()
                  , s = ee.makeGetParentConnectionsByCategory()
                  , i = ee.makeGetParentConnectionsCount();
                return (n, o) => {
                    const {upgradeError: d} = e(n, o)
                      , {name: r="", hostTemplateTypes: l=[], contentTypes: a=[]} = t(n, o) || {};
                    return {
                        hostTemplateTypes: l,
                        contentTypes: a,
                        customWidgetName: r,
                        upgradeError: d,
                        dependentsCount: i(n, {
                            assetId: o.customWidgetId
                        }),
                        dependentsByCategory: s(n, {
                            assetId: o.customWidgetId
                        })
                    }
                }
            }
            const n = {
                upgradeCustomWidget: W.upgrade,
                forceUpgradeCustomWidget: W.forceUpgrade
            };
            return (0,
            q.compose)((0,
            d.connect)(s, n), (0,
            se.default)((0,
            Q.default)(re)))(t)
        }
        var le = s(1918);
        const ae = e => `DesignEditorsUI.customWidgetEditor.codePanesAlert.${e}`;
        function ue() {
            const e = P.makeGetCustomWidgetBuffer()
              , t = P.makeGetUpgradeNotPublished()
              , s = P.makeGetIsEmailType()
              , i = P.makeGetIsReadOnly();
            return (n, o) => {
                const {name: d="", default: r, moduleId: l, containsOverridableHublTags: a=!1, folderId: u} = e(n, o) || {}
                  , c = H.getCustomWidgetsByType(n)
                  , p = w.hasEmailAccess(n)
                  , h = !(s(n, o) && !p)
                  , g = c.blog_content && c.blog_content.moduleId
                  , m = (0,
                Y.getIsInLockedFolderFactory)(n)
                  , f = (0,
                H.makeGetCustomWidgetParentThemeFolderId)();
                return {
                    customWidgetName: d,
                    isUpgradeable: P.getisUpgradeable(n, o),
                    isDefault: r,
                    isBlogContent: l === g,
                    hasAccess: h,
                    containsOverridableHublTags: a,
                    upgradeNotPublished: t(n, o),
                    isReadOnly: i(n, o),
                    userHasReadAccessOnly: (0,
                    w.getUserHasReadAccessOnly)(n),
                    isLocked: m(u),
                    customWidgetParentThemeFolderId: f(n, o)
                }
            }
        }
        class ce extends i.PureComponent {
            renderUpgradeAlert() {
                const e = (0,
                ne.jsx)(p.default, {
                    message: ae("titleText.v1Editable")
                })
                  , t = (0,
                ne.jsx)(M.default, {
                    target: "_blank",
                    href: "http://designers.hubspot.com/docs/modules/reference",
                    children: (0,
                    ne.jsx)(p.default, {
                        message: ae("moduleDocumentationLink")
                    })
                })
                  , s = (0,
                ne.jsx)(G.default, {
                    onClick: this.props.onUpgradeClick,
                    size: "extra-small",
                    use: "tertiary",
                    children: (0,
                    ne.jsx)(p.default, {
                        message: ae("upgradeButtonText")
                    })
                });
                return (0,
                ne.jsx)(z.default, {
                    children: (0,
                    ne.jsx)(k.default, {
                        titleText: e,
                        type: "info",
                        children: (0,
                        ne.jsxs)(B.default, {
                            align: "center",
                            itemRight: s,
                            children: [(0,
                            ne.jsx)(U.default, {
                                message: ae("message.v1Editable"),
                                options: {
                                    moduleDocumentationLink: t
                                }
                            }), this.props.UpgradeModal, this.props.ForceUpgradeModal]
                        })
                    })
                })
            }
            renderUpgradeNotPublishedAlert() {
                const e = (0,
                ne.jsx)(p.default, {
                    message: ae("titleText.upgradeNotPublished")
                });
                return (0,
                ne.jsx)(z.default, {
                    children: (0,
                    ne.jsx)(k.default, {
                        titleText: e,
                        type: "info",
                        children: (0,
                        ne.jsx)(p.default, {
                            message: ae("message.upgradeNotPublished")
                        })
                    })
                })
            }
            renderLockedAlert() {
                return (0,
                ne.jsx)(z.default, {
                    children: (0,
                    ne.jsx)(K.default, {
                        assetType: $.CUSTOM_WIDGET
                    })
                })
            }
            renderReadOnlyAlert() {
                let e = (0,
                ne.jsx)(U.default, {
                    message: ae("message.marketplace"),
                    options: {
                        learnMoreLink: (0,
                        ne.jsx)(M.default, {
                            target: "_blank",
                            href: "https://knowledge.hubspot.com/resources/marketplace-customers-frequently-asked-questions",
                            children: (0,
                            ne.jsx)(p.default, {
                                message: ae("learnMoreLink")
                            })
                        })
                    }
                })
                  , t = !1
                  , s = {};
                if (this.props.isDefault) {
                    e = (0,
                    ne.jsx)(p.default, {
                        message: ae("message.default")
                    });
                    t = !0
                }
                this.props.isBlogContent && (e = (0,
                ne.jsx)(p.default, {
                    message: ae("message.blogContent")
                }));
                if (this.props.containsOverridableHublTags && !this.props.isDefault) {
                    t = !0;
                    const i = (0,
                    ne.jsx)(M.default, {
                        target: "_blank",
                        href: "https://knowledge.hubspot.com/articles/kcs_article/cos-general/how-to-identify-and-upgrade-nested-modules-from-v1-to-v2-in-the-new-design-manager",
                        children: (0,
                        ne.jsx)(p.default, {
                            message: ae("nestedModulesLink")
                        })
                    });
                    e = (0,
                    ne.jsx)(U.default, {
                        message: ae("message.containsOverridableHublTags"),
                        options: {
                            nestedModulesLink: i
                        }
                    });
                    s = {
                        type: "warning"
                    }
                }
                const i = (0,
                ne.jsx)(p.default, {
                    message: ae("titleText.readOnly")
                })
                  , n = (0,
                ne.jsx)(p.default, {
                    message: ae("buttonText")
                })
                  , o = (0,
                ne.jsx)(p.default, {
                    message: ae("cloneModal.header")
                })
                  , d = (0,
                ne.jsx)(p.default, {
                    message: ae("cloneModal.message")
                });
                return (0,
                ne.jsx)(z.default, {
                    children: (0,
                    ne.jsx)(X.default, Object.assign({
                        titleText: i,
                        message: e,
                        buttonText: n,
                        showCloneButton: !this.props.isBlogContent && t,
                        modalHeader: o,
                        modalMessage: d,
                        fileId: this.props.customWidgetId,
                        fileName: this.props.customWidgetName,
                        fileType: V.CUSTOM_WIDGET
                    }, s))
                })
            }
            renderReadOnlyThemeAlert() {
                return (0,
                ne.jsx)(z.default, {
                    children: (0,
                    ne.jsx)(le.default, {
                        assetId: this.props.customWidgetId
                    })
                })
            }
            render() {
                const {revisionId: e, upgradeNotPublished: t, userHasReadAccessOnly: s, isUpgradeable: i, isReadOnly: n, isLocked: o, customWidgetParentThemeFolderId: d, hasAccess: r} = this.props;
                return e ? null : s ? (0,
                ne.jsx)(z.default, {
                    children: (0,
                    ne.jsx)(Z.default, {
                        isReadOnly: n
                    })
                }) : o ? this.renderLockedAlert() : t ? this.renderUpgradeNotPublishedAlert() : r ? i ? this.renderUpgradeAlert() : n && d && !o ? this.renderReadOnlyThemeAlert() : n ? this.renderReadOnlyAlert() : null : (0,
                ne.jsx)(z.default, {
                    children: (0,
                    ne.jsx)(J.default, {
                        isModule: !0
                    })
                })
            }
        }
        ce.propTypes = {
            customWidgetId: u.default.customWidgetId.isRequired,
            revisionId: a().number,
            customWidgetName: a().string.isRequired,
            isUpgradeable: a().bool.isRequired,
            isDefault: a().bool.isRequired,
            isBlogContent: a().bool,
            hasAccess: a().bool,
            containsOverridableHublTags: a().bool.isRequired,
            upgradeNotPublished: a().bool.isRequired,
            isReadOnly: a().bool.isRequired,
            userHasReadAccessOnly: a().bool.isRequired,
            isLocked: a().bool.isRequired,
            customWidgetParentThemeFolderId: a().number,
            onUpgradeClick: a().func.isRequired,
            UpgradeModal: a().node,
            ForceUpgradeModal: a().node
        };
        var pe = (0,
        q.compose)((0,
        d.connect)(ue, {}), re)(ce)
          , he = s(132)
          , ge = s(76)
          , me = s(26)
          , fe = s(10)
          , be = s.n(fe)
          , Ce = s(257)
          , Ee = s(557)
          , Oe = s(511)
          , ye = s(614)
          , Te = s(506)
          , xe = s(509)
          , je = s(627)
          , Ie = s(1916)
          , Re = s(441)
          , Se = s(1914)
          , Fe = s(258)
          , Le = s(435);
        const ve = {
            "Cmd-Y": ge.default,
            "Cmd-S": ge.default,
            "Ctrl-Y": ge.default,
            "Ctrl-S": ge.default
        }
          , We = (e, t) => {
            const s = (0,
            Re.getHighlightedLinesFromLocation)(t.location)
              , {theme: i} = (0,
            Oe.getCodemirrorOptions)(e);
            return {
                highlightedLines: s,
                codemirrorTheme: i
            }
        }
          , Ae = {
            pushRoute: Le.push
        };
        class De extends i.PureComponent {
            constructor(...e) {
                super(...e);
                this.refCodemirror = e => {
                    this.codemirror = e && e.codemirror
                }
                ;
                this.onOpenChange = e => {
                    this.props.onOpenChange(e.target.value)
                }
                ;
                this.onCodeChange = ({value: e}) => {
                    this.props.onCodeChange(e)
                }
                ;
                this.handleGutterClick = ({lineNumber: e, gutterId: t, event: s}) => {
                    const i = this.getPaneId();
                    if ("CodeMirror-linenumbers" !== t)
                        return;
                    const {location: n, highlightedLines: o, pushRoute: d} = this.props;
                    let r = (0,
                    Ie.getUpdatedHash)(e, o, s);
                    "" !== r && i && (r = `${r}-${i}`);
                    d(Object.assign({}, n, {
                        hash: r
                    }))
                }
            }
            componentDidUpdate(e) {
                this.props.refresh && !e.refresh && this.props.open && this.codemirror.refresh()
            }
            get codemirrorThemeClassName() {
                const {codemirrorTheme: e} = this.props;
                return (0,
                je.getThemeClassFromThemeName)(e)
            }
            getAnnotations() {
                const {errors: e} = this.props;
                return e.map(( ({line: e, message: t, type: s, evidence: i}) => new xe.default({
                    message: t,
                    lineNumber: e ? e - 1 : 0,
                    type: s === Ce.WARNING ? Te.default.WARNING : Te.default.ERROR,
                    evidence: i
                })))
            }
            getPaneId() {
                const {paneProps: e} = this.props;
                if (e)
                    return e.paneId
            }
            get range() {
                const {editorSide: e, to: t, from: s, paneId: i} = this.props.highlightedLines
                  , n = this.getPaneId();
                return "L" !== e || i && n !== i ? [] : (0,
                Ie.getUpdatedRange)(this.__range, {
                    from: s,
                    to: t
                })
            }
            render() {
                const {open: e, mode: t, isReadOnly: s, asAccordion: i, value: n, sessionId: o, autofocus: d, customWidgetContext: r} = this.props
                  , l = "code-pane-editor m-all-0 p-all-0"
                  , a = (0,
                ne.jsx)(ye.default, {
                    annotations: this.getAnnotations(),
                    className: "code-pane-editor",
                    sessionId: o,
                    readOnly: s,
                    mode: t,
                    onChange: this.onCodeChange,
                    value: n,
                    enableHublValidation: this.props.enableHublValidation,
                    onHublValidation: this.props.onHublValidation,
                    onHublValidationFail: this.props.onHublValidationFail,
                    onGutterClick: this.handleGutterClick,
                    highlightLines: this.range,
                    extraKeys: ve,
                    height: "100%",
                    width: "100%",
                    autofocus: d,
                    refCodemirror: this.refCodemirror,
                    codemirrorType: t,
                    hublValidationOptions: r
                });
                if (i) {
                    const s = be()("code-pane-accordion", this.codemirrorThemeClassName)
                      , i = (0,
                    ne.jsx)("span", {
                        className: "code-pane-accordion-title",
                        children: this.props.label
                    });
                    return (0,
                    ne.jsx)(Ee.default, {
                        animate: !1,
                        className: s,
                        contentClassName: l,
                        onOpenChange: this.onOpenChange,
                        open: e,
                        title: i,
                        "data-test-id": `code-pane-${t}`,
                        children: a
                    })
                }
                return a
            }
        }
        De.propTypes = {
            asAccordion: a().bool,
            isReadOnly: a().bool.isRequired,
            mode: a().string.isRequired,
            onCodeChange: a().func.isRequired,
            onOpenChange: a().func.isRequired,
            open: a().bool,
            errors: a().arrayOf(a().instanceOf(Fe.default)),
            value: a().string,
            enableHublValidation: a().bool,
            onHublValidation: a().func,
            onHublValidationFail: a().func,
            sessionId: a().oneOfType([a().string, a().number]),
            label: a().string,
            autofocus: a().bool,
            refresh: a().bool,
            codemirrorTheme: a().string.isRequired,
            customWidgetContext: a().object,
            paneProps: a().object,
            location: a().object.isRequired,
            highlightedLines: a().object.isRequired,
            pushRoute: a().func.isRequired
        };
        De.defaultProps = {
            asAccordion: !0,
            errors: [],
            open: !0,
            label: "",
            autofocus: !1,
            enableHublValidation: !1,
            onHublValidation: ge.default,
            onHublValidationFail: ge.default
        };
        var Pe = (0,
        q.compose)((0,
        Se.default)(!0), (0,
        d.connect)(We, Ae))(De)
          , Ne = s(687)
          , _e = s(119)
          , qe = s(508);
        const Ue = _e.EMPTY_OBJECT
          , ke = () => {
            const e = qe.makeGetSourceErrors()
              , t = P.makeGetFieldsContext()
              , s = P.makeGetIsReadOnly();
            return (i, n) => ({
                source: P.getCustomWidgetBufferSource(i, n),
                isReadOnly: (0,
                w.getUserHasReadAccessOnly)(i) || s(i, n),
                sourceErrors: e(i, n),
                customWidgetContext: n.enableHublValidation ? t(i, n) : Ue,
                paneDirection: n.direction,
                paneSize: n.size,
                paneKey: n.key
            })
        }
        ;
        class Ge extends i.Component {
            componentDidMount() {
                this.props.onCodePanesRender()
            }
            componentDidUpdate(e) {
                this.props.customWidgetId !== e.customWidgetId && this.props.onCodePanesRender()
            }
            get labels() {
                this.__labels || (this.__labels = {
                    [S.HTML]: `module.html (${me.default.text("DesignEditorsUI.codeFileTypes.hubl-html")})`,
                    [S.CSS]: "module.css",
                    [S.JS]: "module.js"
                });
                return this.__labels
            }
            render() {
                const {paneOptions: e, paneId: t, customWidgetId: s, revisionId: i, sessionId: n, mode: o, source: d, enableHublValidation: r, autofocus: l, refresh: a, customWidgetContext: u, isReadOnly: c, onCodeChange: p, onOpenChange: h, sourceErrors: g, onHublValidation: m, onHublValidationFail: f, paneDirection: b, paneSize: C, paneKey: E, innerRef: O} = this.props
                  , {size: y, open: T} = e[t] || {}
                  , x = !1 === T ? new j.default({
                    value: R.MIN_PANE_SIZE,
                    units: F.PIXELS
                }) : y;
                return (0,
                ne.jsx)(v.default, {
                    className: "code-pane",
                    defaultSize: x,
                    forceChildRerender: !0,
                    paneId: t,
                    direction: b,
                    size: C,
                    innerRef: O,
                    children: (0,
                    ne.jsx)(Pe, {
                        sessionId: n,
                        label: this.labels[t],
                        isReadOnly: c,
                        mode: o,
                        onCodeChange: p,
                        onOpenChange: h,
                        open: T,
                        errors: g,
                        value: d,
                        enableHublValidation: r,
                        onHublValidation: m,
                        onHublValidationFail: f,
                        autofocus: l,
                        refresh: a,
                        customWidgetContext: u
                    }, `${s}:${i}:${t}`)
                }, E)
            }
        }
        Ge.propTypes = {
            paneId: a().oneOf([S.HTML, S.CSS, S.JS]).isRequired,
            mode: a().string.isRequired,
            enableHublValidation: a().bool.isRequired,
            autofocus: a().bool.isRequired,
            sessionId: a().string.isRequired,
            paneOptions: a().object.isRequired,
            refresh: a().bool.isRequired,
            onCodeChange: a().func.isRequired,
            onOpenChange: a().func.isRequired,
            onHublValidation: a().func.isRequired,
            onHublValidationFail: a().func.isRequired,
            customWidgetId: u.default.customWidgetId.isRequired,
            revisionId: a().number,
            onCodePanesRender: a().func.isRequired,
            isReadOnly: a().bool.isRequired,
            sourceErrors: a().arrayOf(a().instanceOf(Fe.default)).isRequired,
            source: a().string.isRequired,
            customWidgetContext: a().object.isRequired,
            paneDirection: a().oneOf([Ne.HORIZONTAL, Ne.VERTICAL]),
            paneSize: a().instanceOf(j.default),
            paneKey: a().string,
            innerRef: a().any
        };
        Ge.defaultProps = {
            enableHublValidation: !1,
            autofocus: !1,
            paneOptions: {},
            onCodeChange: ge.default
        };
        var Me = (0,
        d.connect)(ke, null, null, {
            forwardRef: !0
        })(Ge);
        const Be = () => {
            const e = qe.makeGetSourceErrors()
              , t = P.makeGetFieldsContext()
              , s = P.makeGetIsReadOnly();
            return (i, n) => ({
                source: P.getCustomWidgetBufferSource(i, n),
                isReadOnly: (0,
                w.getUserHasReadAccessOnly)(i) || s(i, n),
                sourceErrors: e(i, n),
                customWidgetContext: t(i, n)
            })
        }
        ;
        class we extends i.Component {
            componentDidMount() {
                this.props.onCodePanesRender()
            }
            render() {
                const {sessionId: e, customWidgetId: t, revisionId: s, isReadOnly: i, sourceErrors: n, customWidgetContext: o, onCodeChange: d, onHublValidation: r, onHublValidationFail: l, source: a} = this.props;
                return (0,
                ne.jsx)(Pe, {
                    sessionId: e,
                    asAccordion: !1,
                    isReadOnly: i,
                    mode: "hubl-html",
                    onCodeChange: d,
                    onOpenChange: ge.default,
                    open: !0,
                    errors: n,
                    enableHublValidation: !0,
                    onHublValidation: r,
                    onHublValidationFail: l,
                    customWidgetContext: o,
                    value: a
                }, `${t}:${s}`)
            }
        }
        we.propTypes = {
            sessionId: a().string.isRequired,
            onCodeChange: a().func.isRequired,
            onHublValidation: a().func.isRequired,
            onHublValidationFail: a().func.isRequired,
            customWidgetId: u.default.customWidgetId.isRequired,
            revisionId: a().number,
            onCodePanesRender: a().func.isRequired,
            isReadOnly: a().bool.isRequired,
            sourceErrors: a().arrayOf(a().instanceOf(Fe.default)).isRequired,
            source: a().string.isRequired,
            customWidgetContext: a().object.isRequired
        };
        var He = (0,
        d.connect)(Be)(we);
        class Ve extends i.PureComponent {
            constructor(...e) {
                super(...e);
                this.state = {
                    refresh: !1
                };
                this.triggerRefresh = () => {
                    this.setState({
                        refresh: !0
                    });
                    setTimeout(( () => {
                        this.setState({
                            refresh: !1
                        })
                    }
                    ), 0)
                }
                ;
                this.onCodePaneResize = e => {
                    const {customWidgetId: t, updatePaneOptions: s, paneOptions: i} = this.props
                      , n = {};
                    Object.keys(e).forEach((t => {
                        const {open: s, size: o} = i[t] || {}
                          , d = e[t]
                          , r = {
                            size: d
                        };
                        !1 !== s || o === d || d.isMinSize ? s && d.isMinSize && (r.open = !1) : r.open = !0;
                        n[t] = r
                    }
                    ));
                    s(t, n);
                    this.triggerRefresh()
                }
                ;
                this.getOnCodePaneOpenChange = e => {
                    this.__onCodePaneOpenChange = this.__onCodePaneOpenChange || {};
                    this.__onCodePaneOpenChange[e] || (this.__onCodePaneOpenChange[e] = t => {
                        const {customWidgetId: s, updatePaneOptions: i} = this.props;
                        i(s, {
                            [e]: {
                                open: t
                            }
                        });
                        this.triggerRefresh()
                    }
                    );
                    return this.__onCodePaneOpenChange[e]
                }
                ;
                this.getOnCodeChange = e => {
                    this.__onCodeChange = this.__onCodeChange || {};
                    this.__onCodeChange[e] || (this.__onCodeChange[e] = t => {
                        this.props.updateSource({
                            [e]: t
                        })
                    }
                    );
                    return this.__onCodeChange[e]
                }
                ;
                this.getOnHublValidationForSessionId = e => {
                    this.__onHublValidation = this.__onHublValidation || {};
                    this.__onHublValidation[e] || (this.__onHublValidation[e] = this.props.onHublValidation.bind(null, e));
                    return this.__onHublValidation[e]
                }
                ;
                this.getOnHublValidationFailForSessionId = e => {
                    this.__onHublValidationFail = this.__onHublValidationFail || {};
                    this.__onHublValidationFail[e] || (this.__onHublValidationFail[e] = this.props.onHublValidationFail.bind(null, e));
                    return this.__onHublValidationFail[e]
                }
            }
            renderCodePane({paneId: e, mode: t, sourceKey: s, enableHublValidation: i=!1, autofocus: n=!1, sessionId: o}) {
                const {customWidgetId: d, revisionId: r, paneOptions: l, onCodePanesRender: a} = this.props
                  , {refresh: u} = this.state;
                return (0,
                ne.jsx)(Me, {
                    paneId: e,
                    mode: t,
                    sourceKey: s,
                    enableHublValidation: i,
                    autofocus: n,
                    sessionId: o,
                    paneOptions: l,
                    revisionId: r,
                    customWidgetId: d,
                    refresh: u,
                    onCodeChange: this.getOnCodeChange(s),
                    onOpenChange: this.getOnCodePaneOpenChange(e),
                    onCodePanesRender: a,
                    onHublValidation: this.getOnHublValidationForSessionId(o),
                    onHublValidationFail: this.getOnHublValidationFailForSessionId(o)
                })
            }
            renderHtmlEditor() {
                const {customWidgetId: e, revisionId: t, onCodePanesRender: s} = this.props
                  , i = (0,
                he.createCodePaneSessionId)(e, S.HTML);
                return (0,
                ne.jsx)(He, {
                    sourceKey: "source",
                    customWidgetId: e,
                    revisionId: t,
                    sessionId: i,
                    onCodeChange: this.getOnCodeChange("source"),
                    onCodePanesRender: s,
                    onHublValidation: this.getOnHublValidationForSessionId(i),
                    onHublValidationFail: this.getOnHublValidationFailForSessionId(i)
                })
            }
            render() {
                const {customWidgetId: e, revisionId: t, isEmailOrAnyType: s} = this.props
                  , i = s ? (0,
                ne.jsx)("div", {
                    className: "code-panes-accordion-items",
                    children: this.renderHtmlEditor()
                }) : (0,
                ne.jsxs)(L.default, {
                    className: "code-panes-accordion-items",
                    onPaneResize: this.onCodePaneResize,
                    paneMinSize: R.MIN_PANE_SIZE,
                    children: [this.renderCodePane({
                        paneId: S.HTML,
                        mode: "hubl-html",
                        sourceKey: "source",
                        enableHublValidation: !0,
                        autofocus: !0,
                        sessionId: (0,
                        he.createCodePaneSessionId)(e, S.HTML)
                    }), this.renderCodePane({
                        paneId: S.CSS,
                        mode: "hubl-css",
                        sourceKey: "css",
                        sessionId: (0,
                        he.createCodePaneSessionId)(e, S.CSS)
                    }), this.renderCodePane({
                        paneId: S.JS,
                        mode: "hubl-javascript",
                        sourceKey: "js",
                        sessionId: (0,
                        he.createCodePaneSessionId)(e, S.JS)
                    })]
                });
                return (0,
                ne.jsxs)(_.default, {
                    className: "code-panes",
                    direction: "column",
                    children: [(0,
                    ne.jsx)(pe, {
                        customWidgetId: e,
                        revisionId: t
                    }), (0,
                    ne.jsx)(f.default, {
                        className: "code-panes-container",
                        grow: 1,
                        children: i
                    })]
                })
            }
        }
        Ve.propTypes = {
            customWidgetId: u.default.customWidgetId.isRequired,
            revisionId: a().number,
            paneOptions: a().object,
            updatePaneOptions: a().func.isRequired,
            updateSource: a().func.isRequired,
            onHublValidation: a().func.isRequired,
            onHublValidationFail: a().func.isRequired,
            isEmailOrAnyType: a().bool.isRequired,
            onCodePanesRender: a().func.isRequired
        };
        Ve.defaultProps = {
            paneOptions: {}
        };
        function $e() {
            const e = P.makeGetIsEmailOrAnyType()
              , t = P.makeGetUpgradeNotPublished();
            return (s, i) => {
                const n = Object.assign({}, i, {
                    assetId: i.customWidgetId
                });
                return {
                    customWidgetId: n.customWidgetId,
                    paneOptions: N.getPaneOptions(s, n),
                    upgradeNotPublished: t(s, n),
                    isEmailOrAnyType: e(s, n)
                }
            }
        }
        const Ye = {
            updatePaneOptions: A.updatePaneOptions,
            updateCustomWidget: W.update,
            validateTemplate: D.validateTemplate
        };
        class ze extends i.PureComponent {
            constructor(...e) {
                super(...e);
                this.updateSource = e => {
                    const {updateCustomWidget: t, customWidgetId: s} = this.props;
                    t(s, e)
                }
                ;
                this.onHublValidation = (e, t, s) => {
                    this.props.validateTemplate(this.props.customWidgetId, e, s, null)
                }
                ;
                this.onHublValidationFail = (e, t) => {
                    this.props.validateTemplate(this.props.customWidgetId, e, null, t)
                }
            }
            render() {
                const {customWidgetId: e, revisionId: t, paneOptions: s, updatePaneOptions: i, isEmailOrAnyType: n, onCodePanesRender: o} = this.props;
                return (0,
                ne.jsx)(Ve, {
                    customWidgetId: e,
                    revisionId: t,
                    paneOptions: s,
                    updateSource: this.updateSource,
                    updatePaneOptions: i,
                    onHublValidation: this.onHublValidation,
                    onHublValidationFail: this.onHublValidationFail,
                    isEmailOrAnyType: n,
                    onCodePanesRender: o
                })
            }
        }
        ze.propTypes = {
            customWidgetId: u.default.customWidgetId.isRequired,
            revisionId: a().number,
            paneOptions: a().object.isRequired,
            updateCustomWidget: a().func.isRequired,
            updatePaneOptions: a().func.isRequired,
            validateTemplate: a().func.isRequired,
            isEmailOrAnyType: a().bool.isRequired,
            onCodePanesRender: a().func.isRequired
        };
        var Ke = (0,
        d.connect)($e, Ye)(ze)
          , Je = s(1250)
          , Xe = s(343)
          , Ze = s(524)
          , Qe = s(1252)
          , et = s(1251)
          , tt = s(1253);
        const st = {
            savePreviewerWindow: s(1255).savePreviewerWindow
        };
        class it extends i.PureComponent {
            constructor(...e) {
                super(...e);
                this.openPreviewer = () => {
                    const {url: e, savePreviewerWindow: t} = this.props;
                    t(window.open(e))
                }
            }
            render() {
                return (0,
                ne.jsx)(G.default, {
                    onClick: this.openPreviewer,
                    rel: "noopener noreferrer",
                    use: "secondary",
                    size: "extra-small",
                    children: (0,
                    ne.jsx)(p.default, {
                        message: "DesignEditorsUI.previews.livePreviewLink.label"
                    })
                })
            }
        }
        it.propTypes = {
            url: a().string.isRequired,
            savePreviewerWindow: a().func
        };
        var nt = (0,
        d.connect)(null, st)(it)
          , ot = s(1256)
          , dt = s(256);
        const rt = e => `DesignEditorsUI.shared.toolbars.${e}`
          , lt = e => `DesignEditorsUI.customWidgetEditor.toolbar.${e}`
          , at = e => `DesignEditorsUI.customWidgetEditor.errors.savedWithErrors.${e}`;
        class ut extends i.PureComponent {
            constructor(...e) {
                super(...e);
                this.onIsAvailableForNewContentToggleChange = e => {
                    const {checked: t} = e.target;
                    this.props.onUpdateCustomWidget({
                        isAvailableForNewContent: t
                    })
                }
                ;
                this.onIsEnabledForEmailV3RenderingToggleChange = e => {
                    this.props.onUpdateCustomWidget({
                        isEnabledForEmailV3Rendering: e
                    })
                }
                ;
                this.isPublishDisabled = () => {
                    const {isReadOnly: e, requestStatus: t, editorErrors: s, hasBufferedChanges: i, isBufferLoaded: n} = this.props;
                    return !(!(!n || e || t.isPublishing || t.isSaving || t.isValidating || t.saveError || s && s.length) && i)
                }
                ;
                this.renderDisabledPublishTooltip = (e, t) => {
                    const {requestStatus: s, openDrawer: i, editorErrors: n, hasBufferedChanges: o} = this.props;
                    return (0,
                    ne.jsx)(tt.default, {
                        placement: t,
                        requestStatus: s,
                        openDrawer: i,
                        errors: n,
                        hasBufferedChanges: o,
                        children: e
                    })
                }
                ;
                this.renderLeftContent = () => {
                    const {requestStatus: e, onRedoCustomWidgetEdit: t, onUndoCustomWidgetEdit: s, futureEditHistoryCount: i, pastEditHistoryCount: n, editorErrors: o, openDrawer: d} = this.props
                      , r = (0,
                    ne.jsx)(G.default, {
                        onClick: d,
                        use: "link",
                        children: (0,
                        ne.jsx)(p.default, {
                            message: at("errorsLinkLabel"),
                            options: {
                                count: o.length
                            }
                        })
                    })
                      , l = (0,
                    ne.jsx)(U.default, {
                        message: at("message"),
                        options: {
                            errorsLink: r
                        }
                    });
                    return (0,
                    ne.jsxs)(_.default, {
                        align: "center",
                        children: [(0,
                        ne.jsx)("div", {
                            className: "m-right-2",
                            children: (0,
                            ne.jsx)(et.default, {
                                futureEditCount: i,
                                pastEditCount: n,
                                redo: t,
                                undo: s
                            })
                        }), (0,
                        ne.jsx)(Qe.default, {
                            requestStatus: e,
                            successWithErrorsMessage: l
                        })]
                    })
                }
                ;
                this.renderIsAvailableForNewContentToggle = () => 1 === this.props.schemaVersion ? null : (0,
                ne.jsx)(ot.default, {
                    disabled: !this.props.isBufferLoaded || this.props.isReadOnly,
                    checked: !!this.props.isAvailableForNewContent,
                    onChange: this.onIsAvailableForNewContentToggleChange,
                    toggleLabel: (0,
                    ne.jsx)(p.default, {
                        message: lt("isAvailableForNewContentToggle.label")
                    }),
                    tooltipTitle: (0,
                    ne.jsx)(p.default, {
                        message: lt("isAvailableForNewContentToggle.tooltipTitle")
                    })
                });
                this.renderPublishButton = () => {
                    const {onPublish: e, isReadOnly: t} = this.props
                      , s = this.isPublishDisabled()
                      , i = (0,
                    ne.jsx)(G.default, {
                        disabled: s,
                        onClick: e,
                        size: "extra-small",
                        use: "primary",
                        "data-test-id": "publish-changes-button",
                        children: (0,
                        ne.jsx)(p.default, {
                            message: rt("buttons.publish")
                        })
                    });
                    return !s || t ? i : this.renderDisabledPublishTooltip(i)
                }
                ;
                this.renderStageChangesButton = () => {
                    const e = this.isPublishDisabled();
                    return (0,
                    ne.jsx)(G.default, {
                        "data-test-id": "stage-changes-button",
                        disabled: e,
                        onClick: this.props.onStageChanges,
                        size: "extra-small",
                        use: "primary",
                        children: (0,
                        ne.jsx)(Xe.default, {
                            message: rt("buttons.stageChanges")
                        })
                    })
                }
                ;
                this.renderRightContent = () => {
                    const {previewUrl: e} = this.props;
                    return (0,
                    ne.jsxs)(_.default, {
                        align: "center",
                        justify: "end",
                        children: [(0,
                        ne.jsx)("div", {
                            className: "m-right-3",
                            children: this.renderIsAvailableForNewContentToggle()
                        }), (0,
                        ne.jsx)(nt, {
                            url: e
                        }), this.renderPublishButton()]
                    })
                }
            }
            render() {
                return (0,
                ne.jsx)(Ze.default, {
                    disabled: !this.props.isBufferLoaded,
                    leftContent: this.renderLeftContent(),
                    rightContent: this.renderRightContent(),
                    previewUrl: this.props.previewUrl
                })
            }
        }
        ut.propTypes = {
            isBufferLoaded: a().bool.isRequired,
            isAvailableForNewContent: a().bool.isRequired,
            schemaVersion: a().number,
            futureEditHistoryCount: a().number.isRequired,
            isReadOnly: a().bool.isRequired,
            onPublish: a().func.isRequired,
            onStageChanges: a().func.isRequired,
            onRedoCustomWidgetEdit: a().func.isRequired,
            onUndoCustomWidgetEdit: a().func.isRequired,
            pastEditHistoryCount: a().number.isRequired,
            previewUrl: a().string,
            requestStatus: a().object.isRequired,
            openDrawer: a().func.isRequired,
            editorErrors: a().arrayOf(a().instanceOf(dt.default)),
            hasBufferedChanges: a().bool,
            onUpdateCustomWidget: a().func.isRequired
        };
        var ct = ut
          , pt = s(432);
        function ht() {
            const e = P.makeGetPastEditHistoryCount()
              , t = P.makeGetFutureEditHistoryCount()
              , s = P.makeGetRequestStatus()
              , i = P.makeGetCustomWidgetBuffer()
              , n = qe.makeGetCombinedErrorsById()
              , o = P.makeGetIsReadOnly();
            return (d, r) => {
                const {portal_id: l} = d.auth.portal
                  , {customWidgetId: a, revisionId: u} = r
                  , c = i(d, r);
                return {
                    customWidgetId: a,
                    previewUrl: c ? (0,
                    Je.createDesignPreviewerUrl)(c, l, u) : "",
                    hasBufferedChanges: c && c.isBuffered,
                    isBufferLoaded: !!c,
                    schemaVersion: c && c.schemaVersion,
                    isAvailableForNewContent: !(!c || !c.isAvailableForNewContent),
                    isEnabledForEmailV3Rendering: !(!c || !c.isEnabledForEmailV3Rendering),
                    futureEditHistoryCount: t(d, r),
                    isReadOnly: (0,
                    w.getUserHasReadAccessOnly)(d) || o(d, r),
                    pastEditHistoryCount: e(d, r),
                    requestStatus: s(d, r),
                    editorErrors: n(d, {
                        assetId: r.customWidgetId
                    })
                }
            }
        }
        const gt = {
            publishCustomWidget: W.publish,
            redoCustomWidgetEdit: W.redoEdit,
            undoCustomWidgetEdit: W.undoEdit,
            updateCustomWidget: W.update,
            openDrawer: pt.openDrawer
        };
        class mt extends i.Component {
            constructor(e) {
                super(e);
                this.onPublish = this.onPublish.bind(this);
                this.onRedoCustomWidgetEdit = this.onRedoCustomWidgetEdit.bind(this);
                this.onUndoCustomWidgetEdit = this.onUndoCustomWidgetEdit.bind(this);
                this.onUpdateCustomWidget = this.onUpdateCustomWidget.bind(this)
            }
            onPublish() {
                const {customWidgetId: e, publishCustomWidget: t} = this.props;
                t(e)
            }
            onRedoCustomWidgetEdit() {
                const {customWidgetId: e, redoCustomWidgetEdit: t} = this.props;
                t(e)
            }
            onUndoCustomWidgetEdit() {
                const {customWidgetId: e, undoCustomWidgetEdit: t} = this.props;
                t(e)
            }
            onUpdateCustomWidget(e) {
                this.props.updateCustomWidget(this.props.customWidgetId, e)
            }
            render() {
                const {customWidgetId: e, isReadOnly: t, previewUrl: s, requestStatus: i, futureEditHistoryCount: n, pastEditHistoryCount: o, openDrawer: d, editorErrors: r, hasBufferedChanges: l} = this.props;
                return (0,
                ne.jsx)(ct, {
                    isBufferLoaded: this.props.isBufferLoaded,
                    isAvailableForNewContent: this.props.isAvailableForNewContent,
                    isEnabledForEmailV3Rendering: this.props.isEnabledForEmailV3Rendering,
                    schemaVersion: this.props.schemaVersion,
                    customWidgetId: e,
                    futureEditHistoryCount: n,
                    isReadOnly: t,
                    onPublish: this.onPublish,
                    onRedoCustomWidgetEdit: this.onRedoCustomWidgetEdit,
                    onUndoCustomWidgetEdit: this.onUndoCustomWidgetEdit,
                    pastEditHistoryCount: o,
                    previewUrl: s,
                    requestStatus: i,
                    openDrawer: d,
                    editorErrors: r,
                    hasBufferedChanges: l,
                    onUpdateCustomWidget: this.onUpdateCustomWidget
                })
            }
        }
        mt.propTypes = {
            isBufferLoaded: a().bool.isRequired,
            isAvailableForNewContent: a().bool.isRequired,
            isEnabledForEmailV3Rendering: a().bool.isRequired,
            schemaVersion: a().number,
            customWidgetId: u.default.customWidgetId.isRequired,
            futureEditHistoryCount: a().number.isRequired,
            isReadOnly: a().bool.isRequired,
            pastEditHistoryCount: a().number.isRequired,
            previewUrl: a().string,
            publishCustomWidget: a().func.isRequired,
            redoCustomWidgetEdit: a().func.isRequired,
            requestStatus: a().object.isRequired,
            undoCustomWidgetEdit: a().func.isRequired,
            openDrawer: a().func.isRequired,
            editorErrors: a().arrayOf(a().instanceOf(dt.default)),
            hasBufferedChanges: a().bool,
            updateCustomWidget: a().func.isRequired
        };
        var ft = (0,
        d.connect)(ht, gt)(mt)
          , bt = s(211)
          , Ct = s(98)
          , Et = s(55)
          , Ot = s.n(Et);
        function yt() {
            return Ot().get("sfdc/v1/connection-status")
        }
        var Tt = s(444);
        function xt() {
            const {request: e, receive: t, error: s} = xt;
            return (i, n) => {
                if (null === (0,
                Tt.getSalesforceIntegrationStatus)(n())) {
                    i(e());
                    yt().then((e => {
                        i(t(e))
                    }
                    )).catch((e => {
                        i(s(e))
                    }
                    ))
                }
            }
        }
        xt.request = () => ({
            type: Ct.SFDC_GET_INTEGRATION_STATUS
        });
        xt.receive = e => ({
            type: Ct.SFDC_GET_INTEGRATION_STATUS,
            status: e
        });
        xt.error = e => ({
            type: Ct.SFDC_GET_INTEGRATION_STATUS,
            error: e
        });
        var jt = s(345)
          , It = s(9)
          , Rt = s(417)
          , St = s(359)
          , Ft = s(363);
        const Lt = ["children", "className", "disabled", "href", "onClick", "open"];
        class vt extends i.Component {
            constructor(...e) {
                super(...e);
                this.handleLinkClick = e => {
                    const {disabled: t, onClick: s, onOpenChange: i, open: n} = this.props;
                    if (!t) {
                        s && s(e);
                        !e.defaultPrevented && i && i((0,
                        St.default)(!n))
                    }
                }
            }
            render() {
                const e = this.props
                  , {children: t, className: s, disabled: i, href: n, open: o} = e
                  , d = (0,
                It.default)(e, Lt);
                return (0,
                ne.jsx)(Ft.default, Object.assign({}, d, {
                    open: !i && o,
                    use: "longform",
                    children: (0,
                    ne.jsx)(M.default, {
                        className: s,
                        href: n,
                        onClick: this.handleLinkClick,
                        disabled: i,
                        children: t
                    })
                }))
            }
        }
        vt.defaultProps = {
            disabled: !1,
            open: !1,
            placement: "top",
            showCloseButton: !1
        };
        vt.displayName = "UIHelpLink";
        vt.propTypes = {
            children: M.default.propTypes.children,
            content: Ft.default.propTypes.content,
            disabled: a().bool,
            href: M.default.propTypes.href,
            onOpenChange: Ft.default.propTypes.onOpenChange,
            open: Ft.default.propTypes.open,
            placement: Ft.default.propTypes.placement,
            showCloseButton: Ft.default.propTypes.showCloseButton
        };
        var Wt = (0,
        Rt.default)(vt, ["open"])
          , At = s(421)
          , Dt = s(531)
          , Pt = s(542)
          , Nt = s(574)
          , _t = s(1258)
          , qt = s(1264)
          , Ut = s(1259)
          , kt = s(1266)
          , Gt = s(1263)
          , Mt = s(604)
          , Bt = s(563)
          , wt = s(215);
        const Ht = ["className", "inputComponent", "wrap"];
        class Vt extends i.Component {
            render() {
                const e = this.props
                  , {className: t, inputComponent: s, wrap: i} = e
                  , n = (0,
                It.default)(e, Ht)
                  , o = be()("sidebar-input", t);
                return i ? (0,
                ne.jsx)("span", {
                    className: o,
                    children: (0,
                    ne.jsx)(s, Object.assign({}, n))
                }) : (0,
                ne.jsx)(s, Object.assign({}, n, {
                    className: o
                }))
            }
        }
        Vt.propTypes = {
            className: a().string,
            inputComponent: a().elementType,
            wrap: a().bool
        };
        Vt.defaultProps = {
            className: null,
            inputComponent: Mt.default,
            wrap: !1
        };
        var $t = s(1353)
          , Yt = s(1354)
          , zt = s(113)
          , Kt = s(1280);
        const Jt = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.${e}`;
        function Xt(e, t) {
            const {isNew: s} = (0,
            N.getSelectedField)(e, t);
            return {
                isNew: s
            }
        }
        class Zt extends i.Component {
            constructor(e) {
                super(e);
                this.onLabelChange = this.onLabelChange.bind(this)
            }
            onLabelChange(e) {
                const {isNew: t, editField: s} = this.props
                  , i = {
                    label: e
                };
                t && e && (i.name = (0,
                zt.toSnakeCase)(e));
                s(i)
            }
            renderTypeLabel() {
                return (0,
                ne.jsx)(Nt.default, {
                    use: "help",
                    children: this.props.field.getDefaultLabel()
                })
            }
            render() {
                const {field: e, isNew: t, isReadOnly: s} = this.props;
                return (0,
                ne.jsx)(Kt.default, {
                    allowBlank: !1,
                    focus: t,
                    onChange: this.onLabelChange,
                    placeholder: me.default.text(Jt("labelPlaceholder")),
                    readOnly: s,
                    typeLabel: this.renderTypeLabel(),
                    value: e.label
                })
            }
        }
        Zt.defaultProps = {
            isNew: !1,
            isReadOnly: !1
        };
        Zt.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            isReadOnly: a().bool,
            isNew: a().bool
        };
        var Qt = (0,
        d.connect)(Xt, {})(Zt)
          , es = s(570)
          , ts = s(1267);
        const ss = ["children", "className", "errors", "warnings"];
        class is extends i.Component {
            render() {
                const e = this.props
                  , {children: t, className: s, errors: i, warnings: n} = e
                  , o = (0,
                It.default)(e, ss)
                  , d = i.length ? (0,
                ne.jsx)(Pt.default, {
                    children: i
                }) : null
                  , r = n.length ? (0,
                ne.jsx)(Pt.default, {
                    children: n
                }) : null
                  , l = be()("sidebar-form-control", s);
                return (0,
                ne.jsx)(ts.default, Object.assign({
                    className: l,
                    error: !!d || !!r,
                    validationMessage: d || r
                }, o, {
                    children: t
                }))
            }
        }
        is.propTypes = {
            children: a().node,
            className: a().string,
            errors: a().arrayOf(a().node),
            warnings: a().arrayOf(a().node)
        };
        is.defaultProps = {
            className: null,
            errors: [],
            warnings: []
        };
        const ns = ["errors", "warnings", "isModuleError"]
          , os = e => `DesignEditorsUI.customWidgetEditor.errors.field.${e}`
          , ds = e => `DesignEditorsUI.customWidgetEditor.errors.module.${e}`;
        class rs extends i.Component {
            render() {
                const e = this.props
                  , {errors: t, warnings: s, isModuleError: i} = e
                  , n = (0,
                It.default)(e, ns)
                  , o = (0,
                c.uniq)(t, ( ({type: e}) => e)).map(( ({type: e, data: t}) => (0,
                ne.jsx)(Xe.default, {
                    message: i ? ds(e) : os(e),
                    options: t
                }, e)))
                  , d = (0,
                c.uniq)(s, ( ({type: e}) => e)).map(( ({type: e, data: t}) => (0,
                ne.jsx)(Xe.default, {
                    message: os(e),
                    options: t
                }, e)));
                return (0,
                ne.jsx)(is, Object.assign({
                    errors: o,
                    warnings: d
                }, n))
            }
        }
        rs.propTypes = {
            characterCount: es.default.propTypes.characterCount,
            children: a().node,
            className: a().string,
            errors: a().arrayOf(a().object),
            warnings: a().arrayOf(a().object),
            isModuleError: a().bool
        };
        rs.defaultProps = {
            className: null,
            errors: [],
            warnings: [],
            isModuleError: !1
        };
        const ls = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.${e}`;
        class as extends i.PureComponent {
            constructor(e) {
                super(e);
                this.editField = e => {
                    const {customWidgetId: t} = this.props
                      , {field: s} = this.state
                      , i = s.merge(e);
                    this.setState({
                        field: i
                    });
                    this.debouncedEditField(t, i)
                }
                ;
                this.debouncedEditField = (0,
                c.debounce)((function(e, t) {
                    this.props.editField(e, t)
                }
                ), 1e3);
                this.onDeleteClick = () => {
                    this.props.deleteField(this.props.customWidgetId, this.props.field.id)
                }
                ;
                this.onNameChange = e => {
                    const t = e.target.value;
                    this.editField({
                        name: t
                    })
                }
                ;
                this.state = {
                    field: e.field
                }
            }
            componentDidUpdate(e) {
                const {field: t} = this.props;
                (0,
                c.isEqual)(e.field, t) || this.setState({
                    field: t
                })
            }
            get contentOptionsErrors() {
                const {fieldErrors: e} = this.props;
                return (0,
                c.pick)(e, [wt.MIN, wt.CHOICES, wt.DEFAULT, wt.VALIDATION_REGEX, wt.OBJECT_TYPE, wt.SUPPORTED_SOURCE_TYPES, wt.TABLE_NAME_OR_ID])
            }
            get fieldName() {
                return this.props.fieldBreadcrumbs.map((e => e.name)).join(".") || this.state.field.name
            }
            renderNameInput() {
                const {fieldErrors: e, readOnly: t} = this.props
                  , {field: s} = this.state;
                return (0,
                ne.jsx)(Bt.default, {
                    children: (0,
                    ne.jsx)(rs, {
                        className: "field-name-input m-y-4",
                        errors: e.name,
                        label: (0,
                        h.default)(ls("nameLabel")),
                        children: (0,
                        ne.jsx)(Vt, {
                            className: "is--code",
                            inputComponent: Mt.default,
                            onChange: this.onNameChange,
                            value: s.name,
                            disabled: t
                        })
                    })
                })
            }
            render() {
                const {customWidgetId: e, readOnly: t} = this.props
                  , {field: s} = this.state;
                return s ? (0,
                ne.jsxs)(ne.Fragment, {
                    children: [(0,
                    ne.jsxs)(_.default, {
                        align: "start",
                        justify: "between",
                        direction: "row",
                        wrap: "nowrap",
                        "data-test-id": "style-tab-controls",
                        children: [(0,
                        ne.jsx)(Qt, {
                            customWidgetId: e,
                            editField: this.editField,
                            field: s,
                            isReadOnly: t
                        }), (0,
                        ne.jsx)($t.default, {
                            children: (0,
                            ne.jsx)(Yt.default, {
                                title: (0,
                                h.default)(ls("deleteGroup")),
                                iconName: "delete",
                                onClick: this.onDeleteClick,
                                isReadOnly: t
                            })
                        })]
                    }), this.renderNameInput()]
                }) : null
            }
        }
        as.propTypes = {
            customWidgetId: u.default.customWidgetId.isRequired,
            deleteField: a().func.isRequired,
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default),
            fieldBreadcrumbs: a().array,
            fieldErrors: a().object,
            readOnly: a().bool
        };
        as.defaultProps = {
            customWidgetIcon: null,
            field: null,
            fieldErrors: {},
            fieldBreadcrumbs: []
        };
        var us = as
          , cs = s(194);
        function ps() {
            const e = P.makeGetCustomWidgetBuffer()
              , t = P.makeGetCustomWidgetBufferFields()
              , s = P.makeGetIsEmailOrAnyType()
              , i = P.makeGetIsReadOnly();
            return (n, o) => {
                const d = e(n, o)
                  , {isActive: r} = N.getFieldGrouping(n, o)
                  , l = N.getSelectedField(n, o)
                  , a = N.getIsEditingGlobalContent(n, o);
                return Object.assign({
                    customWidgetId: o.customWidgetId,
                    isReadOnly: (0,
                    w.getUserHasReadAccessOnly)(n) || i(n, o) || a,
                    fieldErrors: N.getFieldErrors(n, o),
                    fieldBreadcrumbs: N.getSelectedFieldBreadcrumbs(n, o),
                    fields: t(n, o),
                    isFieldGroupingActive: !!r,
                    isFullScreenEditorOpen: N.getIsFullScreenEditorOpen(n, o),
                    customWidgetIcon: d ? d.icon : null,
                    isGlobal: !!d && d.global,
                    isV1: !!d && 1 === d.schemaVersion,
                    isStyleTab: l.field && l.field.tab === cs.STYLE,
                    accordionStates: N.getAccordionStates(n, o),
                    isEmailOrAnyType: s(n, o),
                    customWidgetPath: d ? d.path : "",
                    hasGlobalContentEditorAccess: (0,
                    w.getHasGlobalContentEditorAccess)(n, o)
                }, l)
            }
        }
        const hs = {
            cloneField: W.cloneField,
            deleteField: W.deleteField,
            editField: W.editField,
            setSelectedField: A.setSelectedField,
            saveAccordionState: A.saveAccordionState,
            fetchSfdcIntegrationStatus: xt,
            setFullScreenEditorOpen: A.setFullScreenEditorOpen
        };
        class gs extends i.Component {
            constructor(...e) {
                super(...e);
                this.saveAccordionState = (e, t=!1) => {
                    this.props.saveAccordionState(this.props.customWidgetId, e, t, this.props.field.id)
                }
            }
            componentDidMount() {
                this.props.fetchSfdcIntegrationStatus()
            }
            render() {
                const {customWidgetIcon: e, customWidgetId: t, customWidgetPath: s, editField: i, field: n, fieldErrors: o, deleteField: d, isStyleTab: r, isReadOnly: l} = this.props;
                return (0,
                ne.jsx)(us, {
                    customWidgetIcon: e,
                    customWidgetId: t,
                    customWidgetPath: s,
                    deleteField: d,
                    editField: i,
                    field: n,
                    isStyleTab: r,
                    fieldErrors: o,
                    readOnly: l
                })
            }
        }
        gs.propTypes = {
            customWidgetIcon: a().string,
            customWidgetId: u.default.customWidgetId.isRequired,
            customWidgetPath: a().string.isRequired,
            deleteField: a().func.isRequired,
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default),
            fieldErrors: a().object.isRequired,
            isStyleTab: a().bool,
            isReadOnly: a().bool.isRequired,
            saveAccordionState: a().func.isRequired,
            fetchSfdcIntegrationStatus: a().func.isRequired
        };
        gs.defaultProps = {
            customWidgetIcon: null,
            field: null,
            accordionStates: {}
        };
        var ms = (0,
        d.connect)(ps, hs)(gs)
          , fs = s(1351)
          , bs = s(480)
          , Cs = s(1242)
          , Es = s(591);
        function Os() {
            return Ot().get("content/categories/v1/categories/meta")
        }
        class ys extends i.Component {
            constructor(...e) {
                super(...e);
                this.onChange = e => {
                    this.props.onChange(e.target.value)
                }
            }
            loadOptions(e, t) {
                Os().then((e => {
                    const {results: s} = e;
                    t(null, {
                        options: s.map((e => ({
                            text: e.displayName,
                            value: e.name
                        })))
                    })
                }
                )).catch((e => {
                    console.error(e)
                }
                ))
            }
            render() {
                const {isReadOnly: e, selectedCategories: t} = this.props;
                return (0,
                ne.jsx)(Es.default, {
                    anchorType: "button",
                    disabled: e,
                    loadOptions: this.loadOptions,
                    multi: !0,
                    onChange: this.onChange,
                    value: t
                })
            }
        }
        ys.propTypes = {
            isReadOnly: a().bool,
            onChange: a().func.isRequired,
            selectedCategories: a().arrayOf(a().string)
        };
        ys.defaultProps = {
            selectedCategories: []
        };
        const Ts = e => `DesignEditorsUI.customWidgetEditor.sidebar.main.filterTags.${e}`;
        class xs extends i.Component {
            constructor(...e) {
                super(...e);
                this.handleCustomTagsChange = e => {
                    const t = e.map((e => ({
                        name: e,
                        source: "USER"
                    })));
                    this.props.onTagsChange([...this.nonCustomTags, ...t], e.map((e => bs.default[e])))
                }
            }
            get nonCustomTags() {
                const {customWidgetTags: e} = this.props;
                return e.filter(( ({source: e}) => "USER" !== e))
            }
            get customTags() {
                const {customWidgetTags: e} = this.props;
                return e.filter(( ({source: e}) => "USER" === e))
            }
            render() {
                return (0,
                ne.jsxs)(i.Fragment, {
                    children: [this.props.isModuleCategoriesUngated && (0,
                    ne.jsx)(ts.default, {
                        label: (0,
                        ne.jsx)(p.default, {
                            message: Ts("categories.label")
                        }),
                        tooltip: (0,
                        ne.jsx)(p.default, {
                            message: Ts("categories.tooltip")
                        }),
                        children: (0,
                        ne.jsx)(ys, {
                            isReadOnly: this.props.isReadOnly,
                            selectedCategories: this.props.customWidgetCategories,
                            onChange: this.props.onCategoriesChange
                        })
                    }), (0,
                    ne.jsx)(ts.default, {
                        label: (0,
                        ne.jsx)(p.default, {
                            message: Ts("tags.label")
                        }),
                        tooltip: (0,
                        ne.jsx)(p.default, {
                            message: Ts("tags.tooltip")
                        }),
                        children: (0,
                        ne.jsx)(Cs.default, {
                            isReadOnly: this.props.isReadOnly,
                            selectedTags: this.customTags.map(( ({name: e}) => e)),
                            onChange: this.handleCustomTagsChange,
                            showCategories: !1
                        })
                    })]
                })
            }
        }
        var js = xs
          , Is = s(276)
          , Rs = s(284)
          , Ss = s(285);
        const Fs = e => e.graphqlFiles.byPath
          , Ls = e => Object.values(e.graphqlFiles.byId).map((e => ({
            text: e.label,
            value: e.path,
            help: e.description
        })));
        var vs = s(1274)
          , Ws = s(24)
          , As = s.n(Ws);
        const Ds = "collector/v3/data-query/definitions";
        function Ps() {
            return Ot().get(`${Ds}/`, {
                query: {
                    portalId: As().get()
                }
            })
        }
        function Ns() {
            const {request: e, receive: t, error: s} = Ns;
            return i => {
                i(e());
                return Ps().then((e => {
                    i(t(e))
                }
                )).catch((e => {
                    i(s(e))
                }
                ))
            }
        }
        Ns.request = function() {
            return {
                type: Ct.GRAPHQL_FILES_FETCH
            }
        }
        ;
        Ns.receive = function(e) {
            return {
                type: Ct.GRAPHQL_FILES_FETCH,
                payload: e
            }
        }
        ;
        Ns.error = function(e) {
            return {
                type: Ct.GRAPHQL_FILES_FETCH,
                error: e
            }
        }
        ;
        var _s = s(1275)
          , qs = s(454)
          , Us = s(434)
          , ks = s(972)
          , Gs = s(293)
          , Ms = Object.freeze({
            JS_ASSETS: "jsAssets",
            CSS_ASSETS: "cssAssets",
            GRAPHQL_ASSETS: "graphqlAssets",
            OTHER_ASSETS: "otherAssets"
        })
          , Bs = s(430)
          , ws = s(346)
          , Hs = s(354)
          , Vs = s(831)
          , $s = s(1268)
          , Ys = s(1273)
          , zs = s(1272);
        const Ks = e => `DesignEditorsUI.customWidgetEditor.sidebar.main.linkedFiles.otherAssets.${e}`;
        class Js extends i.Component {
            render() {
                return (0,
                ne.jsxs)("div", {
                    children: [(0,
                    ne.jsx)(G.default, {
                        "data-selenium": "add-asset-link",
                        onClick: this.props.onFileManagerOpen,
                        use: "link",
                        children: (0,
                        ne.jsx)(Nt.default, {
                            children: (0,
                            ne.jsx)(p.default, {
                                message: Ks("addFile")
                            })
                        })
                    }), this.props.FileManager]
                })
            }
        }
        Js.propTypes = {
            onFileManagerOpen: a().func.isRequired,
            FileManager: a().node
        };
        var Xs = (0,
        zs.default)(Js)
          , Zs = s(1269)
          , Qs = s(412);
        function ei() {
            const e = P.makeGetAssets()
              , t = P.makeGetModulePath()
              , s = P.makeGetAvailableStylesheets()
              , i = P.makeGetAvailableJavascripts()
              , n = P.makeGetIsEmailOrAnyType()
              , o = P.makeGetAbsoluteDataQueryPath();
            return function(d, r) {
                return {
                    assets: e(d, r),
                    availableJavascripts: i(d, r),
                    availableStylesheets: s(d, r),
                    availableGraphqlFiles: Ls(d, r),
                    absoluteDataQueryPath: o(d, r),
                    graphqlFilesByPath: Fs(d),
                    hasDataCollectorAccess: (0,
                    w.getHasDataCollectorQueryAccess)(d, r),
                    modulePath: t(d, r),
                    isEmailOrAnyType: n(d, r),
                    javascripts: (0,
                    Ss.getJavascripts)(d, r),
                    stylesheets: (0,
                    Rs.getStylesheets)(d, r)
                }
            }
        }
        const ti = {
            fetchStylesheets: vs.fetch,
            fetchJavascripts: _s.fetch,
            fetchGraphqlFiles: Ns,
            addAsset: W.addAsset,
            showAppNotification: Us.showAppNotification,
            openFinderRecentlyDeleted: ks.openRecentlyDeleted
        }
          , si = e => `DesignEditorsUI.customWidgetEditor.sidebar.main.linkedFiles.${e}`
          , ii = e => (0,
        Us.i18nKey)(`linkedFiles.danger.${e}`);
        function ni({url: e}) {
            const t = e.split("/");
            return {
                name: t[t.length - 1],
                url: e
            }
        }
        function oi({extension: e=""}) {
            return e.toLowerCase()
        }
        class di extends i.Component {
            constructor(...e) {
                super(...e);
                this.onAssetsChange = (e, t) => {
                    t = t.map((e => (0,
                    c.omit)(e, ["id", "label", "tooltip"])));
                    this.props.updateCustomWidget({
                        [e]: t
                    })
                }
                ;
                this.onUpdateLinkedDataQuery = ({target: {value: e}}) => {
                    const {modulePath: t} = this.props;
                    if (e) {
                        const s = (0,
                        qs.relative)(t, e);
                        this.props.updateCustomWidget({
                            dataQueryAbsolutePath: e,
                            dataQueryPath: s
                        })
                    } else
                        this.props.updateCustomWidget({
                            dataQueryAbsolutePath: null,
                            dataQueryPath: null
                        })
                }
                ;
                this.onAddAsset = (e, t) => {
                    const {assets: s, customWidgetId: i, addAsset: n} = this.props;
                    Object.keys(s).some((e => !!s[e].find((e => e.name === t.name)))) ? this.showErrorNotification("conflict", {
                        fileName: t.name
                    }) : n(i, e, t)
                }
                ;
                this.onOtherFileSelect = e => {
                    const t = ni(e)
                      , s = oi(e);
                    "css" === s || "js" === s ? this.showErrorNotification("cssJsInOtherAssets") : this.onAddAsset("otherAssets", t)
                }
                ;
                this.onCssSelect = e => {
                    const t = {
                        name: this.props.stylesheets.byId[e].label,
                        resource_id: e,
                        autoload: !0
                    };
                    this.onAddAsset("cssAssets", t)
                }
                ;
                this.onCssFileSelect = e => {
                    const t = Object.assign({}, ni(e), {
                        autoload: !0
                    });
                    "css" !== oi(e) ? this.showErrorNotification("notCssInCssAssets") : this.onAddAsset("cssAssets", t)
                }
                ;
                this.onJsSelect = e => {
                    const t = {
                        name: this.props.javascripts.byId[e].label,
                        resource_id: e,
                        autoload: !0
                    };
                    this.onAddAsset("jsAssets", t)
                }
                ;
                this.onJsFileSelect = e => {
                    const t = Object.assign({}, ni(e), {
                        autoload: !0
                    });
                    "js" !== oi(e) ? this.showErrorNotification("notJsInJsAssets") : this.onAddAsset("jsAssets", t)
                }
                ;
                this.showErrorNotification = (e, t={}) => {
                    this.props.showAppNotification({
                        notificationKey: "linkedFiles",
                        type: "danger",
                        titleText: (0,
                        ne.jsx)(p.default, {
                            message: ii(`${e}.titleText`)
                        }),
                        message: (0,
                        ne.jsx)(p.default, {
                            message: ii(`${e}.message`),
                            options: t
                        })
                    })
                }
                ;
                this.renderItemCopyAction = ({item: e}) => {
                    const t = `{{ module_asset_url("${e.name}") }}`;
                    return (0,
                    ne.jsx)(Vs.default, {
                        className: "asset-item-action",
                        hint: (0,
                        h.default)(si("otherAssets.copyFileLinkHint")),
                        use: "link",
                        value: t,
                        children: (0,
                        ne.jsx)(Nt.default, {
                            children: (0,
                            ne.jsx)(p.default, {
                                message: si("otherAssets.copyFileLink")
                            })
                        })
                    })
                }
                ;
                this.renderItemEditAction = ({item: e}) => {
                    const t = this.getAssetPath(e)
                      , s = (0,
                    ne.jsx)(ws.default, {
                        className: "asset-item-action",
                        disabled: !t,
                        to: t,
                        children: (0,
                        ne.jsx)(Nt.default, {
                            children: (0,
                            ne.jsx)(p.default, {
                                message: si("editAssetLink.label")
                            })
                        })
                    });
                    return t ? s : (0,
                    ne.jsx)(Hs.default, {
                        placement: "top left",
                        title: (0,
                        ne.jsx)(Xe.default, {
                            message: si("editAssetLink.disabledTooltip")
                        }),
                        children: s
                    })
                }
                ;
                this.renderItemRestoreAction = () => (0,
                ne.jsx)(Hs.default, {
                    placement: "top left",
                    title: (0,
                    ne.jsx)(jt.default, {
                        message: si("restoreAssetLink.tooltip_jsx"),
                        options: {
                            onClick: this.props.openFinderRecentlyDeleted
                        },
                        elements: {
                            Link: M.default
                        }
                    }),
                    children: (0,
                    ne.jsx)(Nt.default, {
                        children: (0,
                        ne.jsx)(Qs.default, {
                            name: "warning",
                            size: 18
                        })
                    })
                });
                this.renderItemAction = ({item: e}) => {
                    const {deleted: t} = e;
                    return t ? this.renderItemRestoreAction({
                        item: e
                    }) : this.renderItemEditAction({
                        item: e
                    })
                }
                ;
                this.renderAssetsTypeLabel = (e, t) => (0,
                ne.jsxs)(_.default, {
                    align: "baseline",
                    justify: "between",
                    children: [(0,
                    ne.jsx)($s.default, {
                        children: (0,
                        ne.jsx)(p.default, {
                            message: si(`${e}.label`)
                        })
                    }), t]
                })
            }
            componentDidMount() {
                const {hasDataCollectorAccess: e} = this.props;
                this.props.fetchStylesheets();
                this.props.fetchJavascripts();
                e && this.props.fetchGraphqlFiles()
            }
            getSortableListItemsForAssets(e, t) {
                return e.map((e => {
                    const {name: s, url: i, resource_id: n, path: o} = e
                      , d = n && Object.keys(t.byId).length && !t.byId[n];
                    return Object.assign({
                        id: i || n || o,
                        deleted: d,
                        label: s,
                        tooltip: s,
                        itemClassName: d ? "danger" : ""
                    }, e)
                }
                ))
            }
            getAssetPath(e) {
                const {resource_id: t, path: s} = e;
                if (t)
                    return (0,
                    Bs.createPath)($.TEMPLATE, t);
                if (s) {
                    const {modulePath: e} = this.props;
                    return (0,
                    Bs.createPath)($.TEMPLATE, (0,
                    qs.getAbsolutePath)(s, e), {
                        assetSource: Gs.HOLLOW
                    })
                }
                return ""
            }
            renderAddAssetLink() {
                return this.props.isReadOnly ? null : (0,
                ne.jsx)(Xs, {
                    onFileSelect: this.onOtherFileSelect
                })
            }
            renderAddStylesheetDropdown() {
                return this.props.isReadOnly ? null : (0,
                ne.jsx)(Zs.default, {
                    templates: this.props.availableStylesheets,
                    onTemplateSelect: this.onCssSelect,
                    onFileSelect: this.onCssFileSelect,
                    templateType: Is.byName.css,
                    enableFileManager: !0
                })
            }
            renderAddJavascriptDropdown() {
                return this.props.isReadOnly ? null : (0,
                ne.jsx)(Zs.default, {
                    templates: this.props.availableJavascripts,
                    onTemplateSelect: this.onJsSelect,
                    onFileSelect: this.onJsFileSelect,
                    templateType: Is.byName.js,
                    enableFileManager: !0
                })
            }
            renderLinkedStylesheets() {
                const {isEmailOrAnyType: e, isReadOnly: t} = this.props;
                return e ? null : (0,
                ne.jsxs)("div", {
                    className: "m-bottom-4",
                    children: [this.renderAssetsTypeLabel(Ms.CSS_ASSETS, this.renderAddStylesheetDropdown()), (0,
                    ne.jsx)(Ys.default, {
                        actionsComponent: this.renderItemAction,
                        emptyText: (0,
                        ne.jsx)(p.default, {
                            message: si("cssAssets.emptyText")
                        }),
                        isReadOnly: t,
                        itemClassName: "asset-item",
                        items: this.getSortableListItemsForAssets(this.props.assets.cssAssets, this.props.stylesheets),
                        onChange: (...e) => this.onAssetsChange(Ms.CSS_ASSETS, ...e)
                    })]
                })
            }
            renderLinkedJavascripts() {
                const {isEmailOrAnyType: e, isReadOnly: t} = this.props;
                return e ? null : (0,
                ne.jsxs)("div", {
                    className: "m-bottom-4",
                    children: [this.renderAssetsTypeLabel(Ms.JS_ASSETS, this.renderAddJavascriptDropdown()), (0,
                    ne.jsx)(Ys.default, {
                        actionsComponent: this.renderItemAction,
                        emptyText: (0,
                        ne.jsx)(p.default, {
                            message: si("jsAssets.emptyText")
                        }),
                        isReadOnly: t,
                        itemClassName: "asset-item",
                        items: this.getSortableListItemsForAssets(this.props.assets.jsAssets, this.props.javascripts),
                        onChange: (...e) => this.onAssetsChange(Ms.JS_ASSETS, ...e)
                    })]
                })
            }
            renderGraphQlClear() {
                return (0,
                ne.jsx)(G.default, {
                    onClick: () => this.onUpdateLinkedDataQuery({
                        target: {
                            value: null
                        }
                    }),
                    use: "link-danger",
                    children: (0,
                    ne.jsx)(Nt.default, {
                        children: (0,
                        ne.jsx)(p.default, {
                            message: si("graphqlAssets.remove")
                        })
                    })
                })
            }
            renderLinkedGraphql() {
                const {absoluteDataQueryPath: e, isReadOnly: t, hasDataCollectorAccess: s} = this.props
                  , i = !s && e && this.renderGraphQlClear();
                return (0,
                ne.jsxs)("div", {
                    children: [this.renderAssetsTypeLabel("graphqlAssets", i && this.renderGraphQlClear()), (0,
                    ne.jsx)(Hs.default, {
                        placement: "top",
                        title: (0,
                        h.default)(si("graphqlAssets.disabled")),
                        disabled: s,
                        children: (0,
                        ne.jsx)(Es.default, {
                            placeholder: (0,
                            h.default)(si("graphqlAssets.emptyText")),
                            value: e,
                            clearable: !0,
                            disabled: t || !s,
                            onChange: this.onUpdateLinkedDataQuery,
                            options: this.props.availableGraphqlFiles
                        })
                    })]
                })
            }
            renderOtherAssets() {
                const {isEmailOrAnyType: e, isReadOnly: t} = this.props;
                return (0,
                ne.jsxs)("div", {
                    className: "m-bottom-4",
                    children: [this.renderAssetsTypeLabel(e ? "assets" : Ms.OTHER_ASSETS, this.renderAddAssetLink()), (0,
                    ne.jsx)(Ys.default, {
                        actionsComponent: this.renderItemCopyAction,
                        emptyText: (0,
                        ne.jsx)(p.default, {
                            message: si("otherAssets.emptyText")
                        }),
                        isReadOnly: t,
                        itemClassName: "asset-item",
                        items: this.getSortableListItemsForAssets(this.props.assets.otherAssets),
                        onChange: (...e) => this.onAssetsChange(Ms.OTHER_ASSETS, ...e)
                    })]
                })
            }
            render() {
                return (0,
                ne.jsxs)("div", {
                    className: "custom-widget-linked-files",
                    children: [this.renderLinkedStylesheets(), this.renderLinkedJavascripts(), this.renderOtherAssets(), this.renderLinkedGraphql()]
                })
            }
        }
        di.propTypes = {
            customWidgetId: u.default.customWidgetId.isRequired,
            absoluteDataQueryPath: a().string,
            assets: a().shape({
                otherAssets: a().arrayOf(a().object).isRequired,
                cssAssets: a().arrayOf(a().object).isRequired,
                jsAssets: a().arrayOf(a().object).isRequired
            }).isRequired,
            availableGraphqlFiles: a().arrayOf(a().object),
            hasDataCollectorAccess: a().bool.isRequired,
            isEmailOrAnyType: a().bool.isRequired,
            isReadOnly: a().bool.isRequired,
            modulePath: a().string.isRequired,
            updateCustomWidget: a().func.isRequired,
            addAsset: a().func.isRequired,
            showAppNotification: a().func.isRequired,
            openFinderRecentlyDeleted: a().func.isRequired,
            fetchGraphqlFiles: a().func.isRequired,
            graphqlFiles: a().shape({
                byId: a().object.isRequired
            }),
            availableStylesheets: a().array.isRequired,
            stylesheets: a().shape({
                byId: a().object.isRequired
            }).isRequired,
            fetchStylesheets: a().func.isRequired,
            availableJavascripts: a().array.isRequired,
            javascripts: a().shape({
                byId: a().object.isRequired
            }).isRequired,
            fetchJavascripts: a().func.isRequired
        };
        var ri = (0,
        d.connect)(ei, ti)(di)
          , li = s(1276);
        s(20);
        const ai = {
            max: 250
        }
          , ui = ({count: e}) => e
          , ci = {
            down: (e, t, {max: s, maxLength: i}) => {
                const n = "number" == typeof i ? Math.min(s, i) : s;
                return t ? n - t.length : n
            }
            ,
            up: (e, t) => t ? t.length : 0
        };
        var pi = s(1277);
        const hi = {
            text: e => (0,
            ne.jsx)(Mt.default, Object.assign({}, e)),
            textarea: e => (0,
            ne.jsx)(pi.default, Object.assign({}, e))
        }
          , gi = ["className", "counter", "errorCondition", "labelClassName", "max", "renderInput", "value"]
          , mi = e => !!(0,
        i.isValidElement)(e) && (!!e.type.propTypes && !!e.type.propTypes.characterCount)
          , fi = e => "string" == typeof e ? ci[e] : e;
        class bi extends i.PureComponent {
            constructor(e) {
                super(e);
                this.state = {
                    count: null,
                    label: null,
                    prevValue: void 0
                };
                const {counter: t, label: s} = this.props;
                0
            }
            static getDerivedStateFromProps(e, t) {
                const {counter: s, label: i, max: n, maxLength: o, value: d} = e
                  , r = fi(s)(t.prevVal, d, {
                    max: n,
                    maxLength: o
                });
                return {
                    count: r,
                    label: "function" == typeof i ? i({
                        count: r
                    }, s) : i,
                    prevValue: e.value
                }
            }
            render() {
                const e = this.props
                  , {className: t, errorCondition: s, labelClassName: i, renderInput: n, value: o} = e
                  , d = (0,
                It.default)(e, gi)
                  , {count: r, label: l} = this.state
                  , a = "string" == typeof n ? hi[n](Object.assign({}, d, {
                    error: s(r, o),
                    label: l,
                    value: o
                })) : n(Object.assign({}, d, {
                    count: r,
                    label: l,
                    value: o
                }))
                  , u = mi(a) ? null : (0,
                ne.jsx)("label", {
                    className: be()("private-char-count__label", i),
                    "aria-live": "polite",
                    children: l
                });
                return (0,
                ne.jsxs)("div", {
                    className: be()("private-char-count", t, r < 0 && "private-char-count--negative"),
                    children: [a, u]
                })
            }
        }
        bi.displayName = "UICharacterCounter";
        bi.defaultProps = Object.assign({}, ai, {
            counter: "up",
            errorCondition: e => e < 0,
            label: ui,
            renderInput: "textarea",
            value: ""
        });
        bi.propTypes = {
            counter: a().oneOfType([a().oneOf(Object.keys(ci)), a().func]).isRequired,
            defaultValue: a().string,
            errorCondition: a().func,
            label: a().oneOfType([a().node, a().func]).isRequired,
            labelClassName: a().string,
            max: a().number,
            maxLength: a().number,
            onBlur: a().func,
            onChange: a().func,
            renderInput: a().oneOfType([a().oneOf(Object.keys(hi)), a().func]).isRequired,
            value: a().string
        };
        var Ci = (0,
        Rt.default)(bi)
          , Ei = s(683);
        const Oi = (0,
        Ei.default)(Ci)
          , yi = e => `DesignEditorsUI.customWidgetEditor.sidebar.main.editorOptions.${e}`;
        class Ti extends i.Component {
            constructor(...e) {
                super(...e);
                this.onInlineHelpTextChange = e => {
                    this.props.updateCustomWidget({
                        inlineHelpText: e.target.value
                    })
                }
                ;
                this.renderInlineHelpText = () => {
                    const {inlineHelpText: e, isReadOnly: t, moduleErrors: s} = this.props;
                    return (0,
                    ne.jsx)(Oi, {
                        counter: "down",
                        max: 400,
                        onChange: this.onInlineHelpTextChange,
                        value: e,
                        renderInput: ({count: e, onChange: i, value: n}) => (0,
                        ne.jsx)(rs, {
                            characterCount: e,
                            errors: s.inline_help_text,
                            isModuleError: !0,
                            label: (0,
                            ne.jsx)(p.default, {
                                message: yi("inlineHelpTextLabel")
                            }),
                            tooltip: (0,
                            ne.jsx)(p.default, {
                                message: yi("inlineHelpTextTooltip")
                            }),
                            children: (0,
                            ne.jsx)(Vt, {
                                disabled: t,
                                inputComponent: li.default,
                                minHeight: 70,
                                onChange: i,
                                value: n
                            })
                        })
                    })
                }
            }
            render() {
                return (0,
                ne.jsx)("div", {
                    className: "custom-widget-editor-options",
                    children: this.renderInlineHelpText()
                })
            }
        }
        Ti.propTypes = {
            inlineHelpText: a().string,
            isReadOnly: a().bool.isRequired,
            moduleErrors: a().object.isRequired,
            updateCustomWidget: a().func.isRequired
        };
        var xi = s(580)
          , ji = s(1281)
          , Ii = s(1924)
          , Ri = s(1282)
          , Si = s(1925)
          , Fi = s(1283);
        const Li = e => `DesignEditorsUI.customWidgetEditor.sidebar.main.translations.${e}`;
        function vi() {
            const e = P.makeGetMessages()
              , t = P.makeGetMasterLanguage();
            return (s, i) => {
                const n = e(s, i);
                return {
                    messages: n,
                    selectedLanguageEditor: N.getSelectedLanguageEditor(s, i),
                    masterLanguage: t(s, i),
                    languages: Object.keys(n),
                    portalLanguage: (0,
                    Fi.getPortalLanguage)(s)
                }
            }
        }
        const Wi = {
            setLanguageEditor: A.setLanguageEditor,
            addLanguage: W.addLanguage,
            deleteLanguage: W.deleteLanguage,
            changeMasterLanguage: W.changeMasterLanguage,
            optInTranslations: W.optInTranslations,
            regenerateTranslations: W.regenerateTranslations
        };
        class Ai extends i.Component {
            constructor(...e) {
                super(...e);
                this.state = {
                    selectedMasterLanguage: null,
                    languageToDelete: null
                };
                this.validateSourceTranslations = () => {
                    const {customWidgetId: e, customWidgetLabel: t, masterLanguage: s, messages: i, regenerateTranslations: n} = this.props;
                    s && !i[s] && n(e, t, s)
                }
                ;
                this.onDeleteLanguageClick = e => {
                    this.setState({
                        languageToDelete: e
                    })
                }
                ;
                this.onChangeMasterLanguageClick = () => {
                    this.setState({
                        selectedMasterLanguage: this.props.masterLanguage
                    })
                }
                ;
                this.onChangeMasterLanguageCancel = () => {
                    this.setState({
                        selectedMasterLanguage: null
                    })
                }
                ;
                this.onMasterLanguageChange = ({target: {value: e}}) => {
                    this.setState({
                        selectedMasterLanguage: e
                    })
                }
                ;
                this.onMasterLanguageChangeConfirm = () => {
                    const {changeMasterLanguage: e, customWidgetId: t, customWidgetLabel: s} = this.props
                      , {selectedMasterLanguage: i} = this.state;
                    e(t, s, i);
                    this.onChangeMasterLanguageCancel()
                }
                ;
                this.setOpenEditor = e => {
                    this.props.setLanguageEditor(this.props.customWidgetId, e)
                }
                ;
                this.enableTranslations = () => {
                    const {customWidgetId: e, customWidgetLabel: t, optInTranslations: s, portalLanguage: i} = this.props;
                    s(e, t, i)
                }
                ;
                this.onAddLanguage = e => {
                    const {addLanguage: t, customWidgetId: s, customWidgetLabel: i} = this.props;
                    t(s, i, e.target.value)
                }
                ;
                this.onDeleteLanguageCancel = () => {
                    this.setState({
                        languageToDelete: null
                    })
                }
                ;
                this.onDeleteLanguage = () => {
                    this.props.deleteLanguage(this.props.customWidgetId, this.state.languageToDelete);
                    this.onDeleteLanguageCancel()
                }
            }
            componentDidMount() {
                this.validateSourceTranslations()
            }
            get disabled() {
                return this.props.isReadOnly || !!this.props.revisionId
            }
            renderDeleteModal() {
                const {languageToDelete: e} = this.state;
                return e ? (0,
                ne.jsx)(Si.default, {
                    languageToDelete: e,
                    i18nKey: Li,
                    onDeleteLanguage: this.onDeleteLanguage,
                    onDeleteLanguageCancel: this.onDeleteLanguageCancel,
                    disabled: this.disabled
                }) : null
            }
            renderChangeMasterLanguageModal() {
                return this.state.selectedMasterLanguage ? (0,
                ne.jsx)(Ii.default, {
                    i18nKey: Li,
                    masterLanguage: this.props.masterLanguage,
                    onChangeMasterLanguageCancel: this.onChangeMasterLanguageCancel,
                    onMasterLanguageChange: this.onMasterLanguageChange,
                    onMasterLanguageChangeConfirm: this.onMasterLanguageChangeConfirm
                }) : null
            }
            renderLanguages() {
                const {masterLanguage: e, languages: t, selectedLanguageEditor: s} = this.props;
                return t.map((t => (0,
                ne.jsx)(Ri.default, {
                    language: t,
                    selectedLanguage: s,
                    onClick: this.setOpenEditor,
                    masterLanguage: e,
                    onChangeMasterLanguageClick: this.onChangeMasterLanguageClick,
                    onDeleteLanguageClick: this.onDeleteLanguageClick,
                    disableActionButtons: this.disabled
                }, t)))
            }
            renderOptIn() {
                return (0,
                ne.jsxs)("div", {
                    className: "opt-in",
                    children: [(0,
                    ne.jsx)("div", {
                        children: (0,
                        ne.jsx)(p.default, {
                            message: Li("optIn.label")
                        })
                    }), (0,
                    ne.jsx)("div", {
                        children: (0,
                        ne.jsx)(p.default, {
                            message: Li("optIn.help")
                        })
                    }), (0,
                    ne.jsx)(G.default, {
                        className: "p-top-3",
                        use: "primary",
                        onClick: this.enableTranslations,
                        disabled: this.disabled,
                        children: (0,
                        ne.jsx)(p.default, {
                            message: Li("optIn.button")
                        })
                    })]
                })
            }
            renderLabel() {
                const e = [this.props.masterLanguage, ...this.props.languages];
                return (0,
                ne.jsx)(xi.default, {
                    className: "translations-label",
                    children: (0,
                    ne.jsxs)(_.default, {
                        justify: "between",
                        children: [(0,
                        ne.jsx)(f.default, {
                            children: (0,
                            ne.jsx)(p.default, {
                                message: Li("header.label"),
                                options: {
                                    count: this.props.languages.length
                                }
                            })
                        }), (0,
                        ne.jsx)(f.default, {
                            children: (0,
                            ne.jsx)(ji.default, {
                                anchorType: "button",
                                buttonUse: "link",
                                closeOnTargetLeave: !0,
                                disabled: this.disabled,
                                value: me.default.text(Li("header.select")),
                                omittedLanguages: e,
                                onChange: this.onAddLanguage,
                                placement: "bottom left"
                            })
                        })]
                    })
                })
            }
            render() {
                return this.props.portalLanguage ? this.props.masterLanguage ? (0,
                ne.jsxs)("div", {
                    children: [this.renderLabel(), this.renderLanguages(), this.renderChangeMasterLanguageModal(), this.renderDeleteModal()]
                }) : this.renderOptIn() : null
            }
        }
        Ai.propTypes = {
            customWidgetId: u.default.customWidgetId.isRequired,
            customWidgetLabel: a().string.isRequired,
            messages: a().object.isRequired,
            masterLanguage: a().string,
            languages: a().arrayOf(a().string),
            setLanguageEditor: a().func.isRequired,
            selectedLanguageEditor: a().string,
            portalLanguage: a().string,
            addLanguage: a().func.isRequired,
            deleteLanguage: a().func.isRequired,
            changeMasterLanguage: a().func.isRequired,
            optInTranslations: a().func.isRequired,
            regenerateTranslations: a().func.isRequired,
            revisionId: a().number,
            isReadOnly: a().bool
        };
        Ai.defaultProps = {
            languages: []
        };
        var Di = (0,
        d.connect)(vi, Wi)(Ai)
          , Pi = s(386)
          , Ni = s(821)
          , _i = s(566)
          , qi = s(602)
          , Ui = s(445)
          , ki = s(552)
          , Gi = s(193);
        const Mi = Object.freeze([Gi.GRADIENT, Gi.SPACING, Gi.BACKGROUND_IMAGE, Gi.BORDER, Gi.ALIGNMENT, Gi.TEXT_ALIGNMENT])
          , Bi = Object.freeze([Gi.BOOLEAN, Gi.CHOICE, Gi.NUMBER, Gi.COLOR, Gi.ICON, Gi.IMAGE, Gi.FONT])
          , wi = Object.freeze([...Mi, ...Bi, Gi.GROUP])
          , Hi = Object.freeze([...Mi, ...Bi]);
        var Vi = s(96)
          , $i = Object.freeze((0,
        Vi.default)({
            CONTENT: null,
            LOGIC: null,
            SELECTORS: null
        }))
          , Yi = s(1270);
        const zi = e => `DesignEditorsUI.customWidgetEditor.sidebar.main.fields.fieldsDropdown.${e}`
          , Ki = {
            [$i.CONTENT]: [Gi.DATE, Gi.DATE_TIME, Gi.EMBED, Gi.LINK, Gi.NUMBER, Gi.RICH_TEXT, Gi.TEXT, Gi.HTML, Gi.HUBL, Gi.SIMPLE_MENU, Gi.URL],
            [$i.LOGIC]: [Gi.BOOLEAN, Gi.CHOICE],
            [$i.SELECTORS]: [Gi.AUDIO, Gi.BLOG, Gi.COLOR, Gi.CRM_OBJECT, Gi.CRM_OBJECT_PROPERTY, Gi.CTA, Gi.EMAIL, Gi.FILE, Gi.FOLLOW_UP_EMAIL, Gi.FONT, Gi.FORM, Gi.HUBDB_ROW, Gi.HUBDB_TABLE, Gi.ICON, Gi.IMAGE, Gi.LOGO, Gi.MEETING, Gi.MENU, Gi.PAGE, Gi.PAYMENT, Gi.PODCAST, Gi.PRODUCT, Gi.SFDC_CAMPAIGN, Gi.SURVEY, Gi.TAG, Gi.VIDEO, Gi.WORKFLOW]
        }
          , Ji = [Gi.TEXT, Gi.RICH_TEXT, Gi.IMAGE, Gi.CHOICE, Gi.BOOLEAN];
        function Xi() {
            const e = (0,
            N.makeGetFieldTypePermissions)()
              , t = (0,
            P.makeGetCustomWidgetBuffer)();
            return function(s, i) {
                const {schemaVersion: n} = t(s, i) || {};
                return {
                    isV1: 1 === n,
                    fieldTypePermissions: e(s, i)
                }
            }
        }
        class Zi extends i.Component {
            constructor(...e) {
                super(...e);
                this.onFieldCreate = e => {
                    this.props.onFieldCreate(e.target.value)
                }
            }
            getFieldTypeOptions(e) {
                const t = Ki[e].reduce(( (e, t) => {
                    if (this.props.fieldTypePermissions[t][Ui.CREATE]) {
                        const s = bt.default.getFieldTypeLabel(t);
                        e.push({
                            text: s,
                            value: t
                        })
                    }
                    return e
                }
                ), []);
                t.sort(( (e, t) => e.text.localeCompare(t.text)));
                return t
            }
            render() {
                if (this.props.isV1) {
                    const e = Ji.map((e => ({
                        text: bt.default.getFieldTypeLabel(e),
                        value: e
                    })));
                    return (0,
                    ne.jsx)(Yi.default, {
                        autoFocus: !0,
                        onChange: this.onFieldCreate,
                        options: e
                    })
                }
                if (this.props.isStyleTab) {
                    const e = Hi.map((e => ({
                        text: bt.default.getFieldTypeLabel(e),
                        value: e
                    })));
                    return (0,
                    ne.jsx)(Yi.default, {
                        autoFocus: !0,
                        onChange: this.onFieldCreate,
                        options: e
                    })
                }
                const e = Object.keys(Ki).map((e => ({
                    text: (0,
                    h.default)(zi(`fieldCategoryLabels.${e}`)),
                    value: e,
                    options: this.getFieldTypeOptions(e)
                })));
                return (0,
                ne.jsx)(Yi.default, {
                    autoFocus: !0,
                    onChange: this.onFieldCreate,
                    options: e
                })
            }
        }
        Zi.propTypes = {
            customWidgetId: u.default.customWidgetId.isRequired,
            onFieldCreate: a().func,
            fieldTypePermissions: a().object.isRequired,
            isV1: a().bool.isRequired,
            isStyleTab: a().bool
        };
        Zi.defaultProps = {
            onFieldCreate: ge.default
        };
        var Qi = (0,
        d.connect)(Xi)(Zi)
          , en = s(244)
          , tn = s(704)
          , sn = s(748)
          , nn = s(243);
        const on = e => {
            let t = [];
            e.children && e.children.forEach((e => {
                t.push(e.type);
                e.children && (t = t.concat(on(e)))
            }
            ));
            return t
        }
          , dn = (e, t) => {
            const s = t.getItem();
            return s.field.type === Gi.GROUP && s.groupFieldChildrenList ? e.isStyleTab ? s.groupFieldChildrenList.every((e => wi.includes(e))) : !s.groupFieldChildrenList.some((e => Mi.includes(e))) : e.isStyleTab ? wi.includes(s.field.type) : !Mi.includes(s.field.type)
        }
          , rn = (0,
        tn.DragSource)(sn.CUSTOM_WIDGET_FIELD_TABLE_ROW, {
            beginDrag(e) {
                const t = (0,
                c.pick)(e, ["field", "moveField", "customWidgetId"]);
                e.field.type === Gi.GROUP && e.field.children && (t.groupFieldChildrenList = on(e.field));
                return t
            },
            isDragging(e, t) {
                const s = t.getItem() ? t.getItem().field : {};
                return e.field.id === s.id
            }
        }, ( (e, t) => ({
            connectDragSource: e.dragSource(),
            connectDragPreview: e.dragPreview(),
            isDragging: t.isDragging()
        })))
          , ln = (0,
        tn.DropTarget)(sn.CUSTOM_WIDGET_FIELD_TABLE_ROW, {
            hover(e, t, s) {
                const i = t.isOver({
                    shallow: !0
                })
                  , n = t.getItem().field.id;
                if (!i || e.field.id === n)
                    return;
                const {isOverBottom: o, isOverTop: d} = s.state
                  , r = s.getDOMNode().getBoundingClientRect()
                  , l = (t.getClientOffset().y - r.top) / r.height
                  , a = l > .5
                  , u = l < .5;
                o === a && d === u || s.setState({
                    isOverBottom: a,
                    isOverTop: u
                })
            },
            canDrop(e, t) {
                return dn(e, t)
            },
            drop(e, t, s) {
                const {isOverBottom: i, isOverTop: n} = s.state
                  , {field: o, moveField: d, customWidgetId: r} = e
                  , l = t.isOver({
                    shallow: !0
                })
                  , a = t.getItem().field.id;
                if (!l || o.id === a)
                    return;
                let u = null;
                i ? u = nn.AFTER : n && (u = nn.BEFORE);
                d(r, a, o.id, u)
            }
        }, ( (e, t) => ({
            connectDropTarget: e.dropTarget(),
            isOver: t.isOver({
                shallow: !0
            }),
            canDrop: t.canDrop()
        })))
          , an = (0,
        tn.DropTarget)(sn.CUSTOM_WIDGET_FIELD_TABLE_ROW, {
            canDrop(e, t) {
                return dn(e, t)
            },
            drop(e, t) {
                const {parentField: s, moveField: i, customWidgetId: n} = e
                  , o = t.isOver({
                    shallow: !0
                })
                  , d = t.getItem().field.id;
                o && i(n, d, s.id, nn.AS_CHILD)
            }
        }, ( (e, t) => ({
            connectDropTarget: e.dropTarget(),
            isOver: t.isOver({
                shallow: !0
            })
        })))
          , un = e => `DesignEditorsUI.customWidgetEditor.sidebar.main.fields.fieldGroupDropZone.${e}`;
        class cn extends i.Component {
            render() {
                const {connectDropTarget: e, isOver: t, canDrop: s} = this.props
                  , i = be()("field-group-drop-zone p-all-4 text-center", t && "is--over" + (s ? "" : " is--cannot-drop"));
                return e((0,
                ne.jsx)("div", {
                    className: i,
                    children: (0,
                    ne.jsx)(Nt.default, {
                        use: "help",
                        children: (0,
                        ne.jsx)(p.default, {
                            message: un("message")
                        })
                    })
                }))
            }
        }
        cn.propTypes = {
            connectDropTarget: a().func.isRequired,
            isOver: a().bool.isRequired,
            canDrop: a().bool.isRequired
        };
        var pn = an(cn)
          , hn = s(801);
        class gn extends i.Component {
            render() {
                const {className: e, fieldErrors: t, i18nKey: s, placement: i} = this.props
                  , n = Object.keys(t).reduce(( (e, s) => t[s].length + e), 0);
                return n ? (0,
                ne.jsx)(Hs.default, {
                    placement: i,
                    title: (0,
                    h.default)(s, {
                        count: n
                    }),
                    children: (0,
                    ne.jsx)(hn.default, {
                        backgroundColor: Pi.CANDY_APPLE,
                        borderWidth: 0,
                        className: e,
                        color: Pi.OLAF,
                        name: "warning",
                        padding: .2,
                        size: 10
                    })
                }) : null
            }
        }
        gn.propTypes = {
            className: a().string,
            fieldErrors: a().object,
            i18nKey: a().string,
            placement: a().string
        };
        gn.defaultProps = {
            className: null,
            fieldErrors: {},
            i18nKey: "DesignEditorsUI.customWidgetEditor.errors.tooltips.fieldError",
            placement: "top"
        };
        class mn extends i.Component {
            render() {
                const {className: e, fieldWarnings: t, i18nKey: s, placement: i} = this.props
                  , n = Object.keys(t).reduce(( (e, s) => t[s].length + e), 0);
                return n ? (0,
                ne.jsx)(Hs.default, {
                    placement: i,
                    title: (0,
                    h.default)(s, {
                        count: n
                    }),
                    children: (0,
                    ne.jsx)(hn.default, {
                        backgroundColor: Pi.MARIGOLD_DARK,
                        borderWidth: 0,
                        className: e,
                        color: Pi.OLAF,
                        name: "warning",
                        padding: .2,
                        size: 10
                    })
                }) : null
            }
        }
        mn.propTypes = {
            className: a().string,
            fieldWarnings: a().object,
            i18nKey: a().string,
            placement: a().string
        };
        mn.defaultProps = {
            className: null,
            fieldWarnings: {},
            i18nKey: "DesignEditorsUI.customWidgetEditor.errors.tooltips.fieldWarning",
            placement: "top"
        };
        var fn = s(1701)
          , bn = s(1702);
        const Cn = e => `DesignEditorsUI.customWidgetEditor.sidebar.copySnippetButton.${e}`;
        function En() {
            const e = (0,
            P.makeGetIsFieldCopyable)();
            return (t, s) => {
                const i = s.field && s.field.id;
                return {
                    isFieldCopyable: e(t, {
                        fieldId: i,
                        customWidgetId: s.customWidgetId
                    }),
                    hasFetchedMediaBridgeProviders: bn.getHasFetchedProviders(t),
                    hasInstalledMediaBridgeProviders: bn.getMediaBridgeProviderOptions(t).length > 0
                }
            }
        }
        const On = {
            fetchMediaBridgeProviders: fn.fetchMediaBridgeProviders
        };
        class yn extends i.Component {
            componentDidMount() {
                this.props.field.type === Gi.EMBED && this.props.useFullSnippet && !this.props.hasFetchedMediaBridgeProviders && this.props.fetchMediaBridgeProviders()
            }
            get copyValue() {
                const {contentTypes: e, fieldName: t, hostTemplateTypes: s, hasInstalledMediaBridgeProviders: i} = this.props;
                return this.props.useFullSnippet ? this.props.field.getModuleSnippet(t, {
                    contentTypes: e,
                    hostTemplateTypes: s,
                    hasInstalledMediaBridgeProviders: i
                }) : `{{ module.${t} }}`
            }
            render() {
                const {useFullSnippet: e, className: t, children: s, use: i, tooltipPlacement: n, disabled: o, isFieldCopyable: d} = this.props;
                let r = e ? (0,
                ne.jsx)(p.default, {
                    message: Cn("label")
                }) : (0,
                ne.jsx)(p.default, {
                    message: Cn("valueLabel")
                });
                s && (r = s);
                return (0,
                ne.jsx)(Vs.default, {
                    className: t,
                    disabled: o || !d,
                    tooltipPlacement: n,
                    use: i,
                    value: this.copyValue,
                    children: r
                })
            }
        }
        yn.propTypes = {
            children: a().node,
            className: a().string,
            contentTypes: a().array,
            field: a().instanceOf(bt.default).isRequired,
            hostTemplateTypes: a().array,
            isFieldCopyable: a().bool.isRequired,
            tooltipPlacement: a().string,
            use: a().string,
            fieldName: a().string.isRequired,
            disabled: a().bool,
            useFullSnippet: a().bool,
            hasFetchedMediaBridgeProviders: a().bool,
            hasInstalledMediaBridgeProviders: a().bool,
            fetchMediaBridgeProviders: a().func.isRequired
        };
        yn.defaultProps = {
            className: null,
            children: null,
            tooltipPlacement: "left",
            use: "link",
            fieldName: "",
            disabled: !1,
            useFullSnippet: !0
        };
        var Tn = (0,
        d.connect)(En, On)(yn);
        const xn = e => `DesignEditorsUI.customWidgetEditor.sidebar.main.fields.fieldRow.${e}`
          , jn = () => {
            const e = P.makeGetCustomWidgetBuffer();
            return (t, s) => {
                const i = e(t, s);
                return {
                    contentTypes: i.contentTypes || [],
                    hostTemplateTypes: i.hostTemplateTypes || [],
                    fieldCreateOptions: (0,
                    N.getFieldCreateOptions)(t, s),
                    fieldErrors: P.getFieldErrors(t, s),
                    fieldWarnings: P.getFieldWarnings(t, s)
                }
            }
        }
          , In = {
            createField: W.createField,
            cloneField: W.cloneField,
            deleteField: W.deleteField,
            moveField: W.moveCustomWidgetField,
            setSelectedField: A.setSelectedField,
            toggleFieldGroupingSelection: A.toggleFieldGroupingSelection
        };
        class Rn extends i.Component {
            constructor(e) {
                super(e);
                this._domNodeRef = (0,
                i.createRef)();
                this.onAddFieldClick = () => {
                    this.setState({
                        openFieldsList: !0
                    })
                }
                ;
                this.onFieldCreate = e => {
                    const {createField: t, customWidgetId: s, field: i, fieldCreateOptions: n} = this.props;
                    t(s, new bt.default({
                        type: e,
                        isNew: !0,
                        fieldCreateOptions: n
                    }), i.id)
                }
                ;
                this.handleClose = () => {
                    this.setState({
                        openActionsDropDown: !1,
                        openFieldsList: !1
                    })
                }
                ;
                this.handleOpenChange = e => {
                    const {value: t} = e.target;
                    t !== this.state.openActionsDropDown && this.setState({
                        openActionsDropDown: t,
                        openFieldsList: !!t && this.state.openFieldsList
                    })
                }
                ;
                this.onPopoverOpen = () => {
                    this.setState({
                        showActionButtons: !0
                    })
                }
                ;
                this.onPopoverClose = () => {
                    this.setState({
                        showActionButtons: !1
                    })
                }
                ;
                this.onCloneClick = this.onCloneClick.bind(this);
                this.onDeleteClick = this.onDeleteClick.bind(this);
                this.onEditClick = this.onEditClick.bind(this);
                this.onRowClick = this.onRowClick.bind(this);
                this.state = {
                    isOverBottom: !1,
                    isOverTop: !1,
                    openActionsDropDown: !1,
                    openFieldsList: !1,
                    showActionButtons: !1
                }
            }
            getDOMNode() {
                return this._domNodeRef.current
            }
            onCloneClick() {
                this.props.cloneField(this.props.customWidgetId, this.props.field.id);
                this.handleClose()
            }
            onDeleteClick() {
                const {customWidgetId: e, deleteField: t, field: s} = this.props;
                t(e, s.id);
                this.handleClose()
            }
            onEditClick() {
                const {customWidgetId: e, setSelectedField: t, field: s} = this.props;
                t(e, {
                    id: s.id
                });
                this.handleClose()
            }
            onRowClick() {
                const {toggleFieldGroupingSelection: e, customWidgetId: t, fieldGrouping: s, field: i} = this.props;
                s.isActive && e(t, i)
            }
            renderDragHandle() {
                const {connectDragSource: e, depth: t, fieldErrors: s, fieldWarnings: i, field: n, fieldGrouping: o, isDraggable: d, isReadOnly: r} = this.props
                  , l = "m-right-2" + (t === en.MAX_NESTING_DEPTH - 1 ? " max-depth-error-icon" : "")
                  , a = (0,
                ne.jsxs)(_.default, {
                    align: "center",
                    className: "p-left-7",
                    children: [(0,
                    ne.jsx)(gn, {
                        className: l,
                        fieldErrors: s
                    }), (0,
                    ne.jsx)(mn, {
                        className: l,
                        fieldWarnings: i
                    }), (0,
                    ne.jsxs)(_.default, {
                        direction: "column",
                        children: [(0,
                        ne.jsx)(Nt.default, {
                            className: "field-label",
                            use: n.label ? null : "help",
                            children: (0,
                            ne.jsxs)(At.default, {
                                children: [n.label || (0,
                                h.default)(xn("missingLabel")), (0,
                                ne.jsxs)("span", {
                                    className: "m-left-1",
                                    children: ["(", n.getFieldTypeLabel(), ")"]
                                })]
                            })
                        }), (0,
                        ne.jsx)(Nt.default, {
                            className: "m-top-1 field-name is--code is--text--help",
                            use: "help",
                            children: (0,
                            ne.jsx)(At.default, {
                                children: n.name
                            })
                        })]
                    })]
                });
                return r || !d || o.isActive ? (0,
                ne.jsx)("div", {
                    className: "p-left-2",
                    children: a
                }) : e((0,
                ne.jsx)("div", {
                    className: "p-left-2",
                    children: (0,
                    ne.jsx)(ki.default, {
                        children: a
                    })
                }))
            }
            renderActionContents() {
                const {field: e, customWidgetId: t, canCreateFieldType: s, canEditFieldType: i, isStyleTab: n} = this.props;
                if (this.state.openFieldsList)
                    return (0,
                    ne.jsx)(Qi, {
                        customWidgetId: t,
                        onFieldCreate: this.onFieldCreate,
                        isStyleTab: n
                    });
                const o = e.type === Gi.GROUP ? "actions.cloneGroup" : "actions.cloneField"
                  , d = e.type === Gi.GROUP ? "actions.deleteGroup" : "actions.deleteField";
                let r = (0,
                ne.jsx)(G.default, {
                    disabled: !s,
                    onClick: this.onCloneClick,
                    use: "link",
                    children: (0,
                    ne.jsx)(p.default, {
                        message: xn(o)
                    })
                });
                if (!s) {
                    const e = i ? "missingCreatePermission" : "missingEditAndCreatePermission";
                    r = (0,
                    ne.jsx)(Hs.default, {
                        title: (0,
                        h.default)(xn(e)),
                        children: r
                    })
                }
                const l = this.props.fieldName || e.name;
                return (0,
                ne.jsxs)(Pt.default, {
                    children: [(0,
                    ne.jsx)(Tn, {
                        customWidgetId: this.props.customWidgetId,
                        hostTemplateTypes: this.props.hostTemplateTypes,
                        contentTypes: this.props.contentTypes,
                        field: e,
                        fieldName: l
                    }), (0,
                    ne.jsx)(Tn, {
                        customWidgetId: this.props.customWidgetId,
                        hostTemplateTypes: this.props.hostTemplateTypes,
                        contentTypes: this.props.contentTypes,
                        field: e,
                        fieldName: l,
                        useFullSnippet: !1
                    }), r, (0,
                    ne.jsx)(G.default, {
                        onClick: this.onDeleteClick,
                        use: "link",
                        children: (0,
                        ne.jsx)(p.default, {
                            message: xn(d)
                        })
                    }), e.type === Gi.GROUP && (0,
                    ne.jsx)(G.default, {
                        onClick: this.onAddFieldClick,
                        use: "link",
                        children: (0,
                        ne.jsx)(p.default, {
                            message: xn("actions.addField")
                        })
                    })]
                })
            }
            renderActionsList() {
                const {isReadOnly: e} = this.props
                  , {openActionsDropDown: t, openFieldsList: s} = this.state
                  , i = (0,
                ne.jsx)(Nt.default, {
                    children: (0,
                    ne.jsx)(p.default, {
                        message: xn("actions.label")
                    })
                });
                return (0,
                ne.jsx)(Dt.default, {
                    buttonSize: "extra-small",
                    buttonText: i,
                    buttonUse: "link",
                    closeOnMenuClick: !1,
                    disabled: e,
                    onOpenChange: this.handleOpenChange,
                    open: t,
                    placement: "bottom left",
                    popoverProps: {
                        onOpenComplete: this.onPopoverOpen,
                        onCloseComplete: this.onPopoverClose
                    },
                    use: s ? "unstyled" : "list",
                    children: this.renderActionContents()
                })
            }
            renderActions() {
                const {canEditFieldType: e, canCreateFieldType: t, isReadOnly: s, fieldGrouping: i} = this.props;
                if (i.isActive)
                    return null;
                const n = s ? (0,
                ne.jsx)(p.default, {
                    message: xn("actions.viewField")
                }) : (0,
                ne.jsx)(p.default, {
                    message: xn("actions.editField")
                });
                let o = (0,
                ne.jsx)(G.default, {
                    disabled: !e,
                    onClick: this.onEditClick,
                    use: "link",
                    children: (0,
                    ne.jsx)(Nt.default, {
                        children: n
                    })
                });
                if (!e) {
                    const e = t ? "missingEditPermission" : "missingEditAndCreatePermission";
                    o = (0,
                    ne.jsx)(Hs.default, {
                        title: (0,
                        h.default)(xn(e)),
                        children: o
                    })
                }
                const d = "field-row-actions-dropdown" + (this.state.showActionButtons ? " actions-dropdown-selected" : "");
                return (0,
                ne.jsxs)("span", {
                    className: d,
                    children: [o, this.renderActionsList()]
                })
            }
            renderChildren() {
                const {customWidgetId: e, field: t, fieldName: s, moveField: n, depth: o, isStyleTab: d} = this.props;
                return t.type !== Gi.GROUP ? null : t.children && t.children.length ? (0,
                ne.jsx)("div", {
                    className: "field-children p-top-0 p-x-4 p-bottom-4",
                    children: t.children.map((e => {
                        const n = `${s || t.name}.${e.name}`;
                        return (0,
                        i.createElement)(Sn, Object.assign({}, this.props, {
                            depth: o + 1,
                            field: e,
                            fieldName: n,
                            isChild: !0,
                            key: `fields-table-row-${e.id}`
                        }))
                    }
                    ))
                }) : o < en.MAX_NESTING_DEPTH - 1 ? (0,
                ne.jsx)("div", {
                    className: "field-children p-top-0 p-x-4 p-bottom-4",
                    children: (0,
                    ne.jsx)(pn, {
                        customWidgetId: e,
                        moveField: n,
                        parentField: t,
                        isStyleTab: d
                    })
                }) : null
            }
            renderRow() {
                return (0,
                ne.jsx)("div", {
                    className: "field-row",
                    onClick: this.onRowClick,
                    children: (0,
                    ne.jsxs)(_.default, {
                        align: "center",
                        className: "p-y-3 p-right-4",
                        justify: "between",
                        children: [this.renderDragHandle(), this.renderActions()]
                    })
                })
            }
            render() {
                const {connectDragPreview: e, connectDropTarget: t, isDragging: s, isChild: i, isOver: n, fieldGrouping: o, field: d, canDrop: r} = this.props
                  , {selectedFields: l={}, isActive: a, fieldsAreNotSiblings: u, isTooDeep: c} = o
                  , p = u || c
                  , h = l[d.id]
                  , g = be()("field-row-and-children-container", n && [this.state.isOverBottom && "is--over-bottom", this.state.isOverTop && "is--over-top", !r && "is--cannot-drop"], h && (p ? "is--invalid-selected" : "is--selected"), i && "is--child-field", s && "is--dragging", a && "is--in-group-mode");
                return t(e((0,
                ne.jsxs)("div", {
                    className: g,
                    ref: e => this._domNodeRef.current = e,
                    children: [this.renderRow(), this.renderChildren()]
                })))
            }
        }
        Rn.defaultProps = {
            canEditFieldType: !0,
            canCreateFieldType: !0,
            depth: 0,
            fieldName: "",
            isChild: !1,
            isDraggable: !0
        };
        Rn.propTypes = {
            canEditFieldType: a().bool,
            canDrop: a().bool,
            canCreateFieldType: a().bool,
            connectDragPreview: a().func.isRequired,
            connectDragSource: a().func.isRequired,
            connectDropTarget: a().func.isRequired,
            contentTypes: a().array,
            customWidgetId: u.default.customWidgetId.isRequired,
            hostTemplateTypes: a().array,
            cloneField: a().func.isRequired,
            deleteField: a().func.isRequired,
            depth: a().number.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            fieldCreateOptions: a().object.isRequired,
            fieldGrouping: a().object.isRequired,
            fieldName: a().string,
            fieldErrors: a().object,
            fieldWarnings: a().object,
            isChild: a().bool,
            isDragging: a().bool.isRequired,
            isOver: a().bool.isRequired,
            isReadOnly: a().bool.isRequired,
            isDraggable: a().bool,
            isStyleTab: a().bool.isRequired,
            moveField: a().func.isRequired,
            setSelectedField: a().func.isRequired,
            toggleFieldGroupingSelection: a().func.isRequired,
            createField: a().func.isRequired
        };
        const Sn = (0,
        q.compose)((0,
        d.connect)(jn, In), rn, ln)(Rn);
        var Fn = Sn;
        const Ln = e => `DesignEditorsUI.customWidgetEditor.sidebar.main.fields.${e}`;
        function vn() {
            const e = N.makeGetFieldTypePermissions();
            return (t, s) => ({
                fieldGrouping: N.getFieldGrouping(t, s),
                fieldTypePermissions: e(t, s)
            })
        }
        const Wn = {};
        class An extends i.PureComponent {
            constructor(e) {
                super(e);
                this.onSearchInputChange = e => {
                    this.setState({
                        searchTerm: e.target.value
                    })
                }
                ;
                this.onSearchInputClear = () => {
                    this.setState({
                        searchTerm: ""
                    })
                }
                ;
                this.renderField = e => {
                    const {customWidgetId: t, fieldGrouping: s, fieldName: n, fieldTypePermissions: o, isReadOnly: d, isStyleTab: r, depth: l} = this.props
                      , a = n ? {
                        fieldName: `${n}.${e.name}`
                    } : {}
                      , u = o[e.type] || {}
                      , c = !!u[Ui.EDIT]
                      , p = !!u[Ui.CREATE];
                    return (0,
                    ne.jsx)("tr", {
                        className: "custom-widget-fields-table-row",
                        children: (0,
                        ne.jsx)("td", {
                            className: "p-all-0",
                            children: (0,
                            i.createElement)(Fn, Object.assign({}, a, {
                                canEditFieldType: c,
                                canCreateFieldType: p,
                                customWidgetId: t,
                                field: e,
                                fieldGrouping: s,
                                isReadOnly: d,
                                isStyleTab: r,
                                isDraggable: !this.state.searchTerm,
                                key: `fields-table-row-${e.id}`,
                                depth: l
                            }))
                        })
                    }, e.id)
                }
                ;
                this.state = {
                    searchTerm: ""
                }
            }
            getMatchingFields() {
                const {searchTerm: e} = this.state
                  , {fields: t, fieldGrouping: {isActive: s}} = this.props;
                return !s && e ? (0,
                he.findMatchingFields)(t, e) : t
            }
            renderFields() {
                return this.getMatchingFields().map(this.renderField)
            }
            renderSearch() {
                const {searchTerm: e} = this.state
                  , {fieldGrouping: {isActive: t}, depth: s} = this.props;
                if (t || s > 0)
                    return null;
                let i = null;
                if (e) {
                    const t = this.getMatchingFields()
                      , s = t.length ? "results" : "noResults";
                    i = (0,
                    ne.jsxs)(_.default, {
                        align: "center",
                        className: "fields-table__search__results",
                        justify: "between",
                        children: [(0,
                        ne.jsx)(Nt.default, {
                            className: "fields-results-text",
                            children: (0,
                            ne.jsx)(p.default, {
                                message: Ln(`search.${s}`),
                                options: {
                                    searchTerm: e,
                                    count: t.length
                                }
                            })
                        }), (0,
                        ne.jsx)(G.default, {
                            onClick: this.onSearchInputClear,
                            use: "unstyled",
                            children: (0,
                            ne.jsx)(Qs.default, {
                                color: Pi.EERIE,
                                name: "remove"
                            })
                        })]
                    })
                }
                return (0,
                ne.jsxs)("div", {
                    className: "fields-table__search",
                    children: [(0,
                    ne.jsx)(qi.default, {
                        onChange: this.onSearchInputChange,
                        placeholder: (0,
                        h.default)(Ln("search.placeholder")),
                        value: e
                    }), i]
                })
            }
            renderStyleTabOptIn() {
                const {createStyleFieldGroup: e, isReadOnly: t} = this.props;
                return (0,
                ne.jsxs)("div", {
                    className: "opt-in",
                    children: [(0,
                    ne.jsx)(_i.default, {
                        title: (0,
                        ne.jsx)(jt.default, {
                            message: Ln("styleTabOptIn.help_jsx"),
                            options: {
                                external: !0,
                                href: "https://developers.hubspot.com/docs/cms/building-blocks/module-theme-fields-overview#style-fields"
                            },
                            elements: {
                                Link: M.default
                            }
                        }),
                        children: (0,
                        ne.jsx)(p.default, {
                            message: Ln("styleTabOptIn.label")
                        })
                    }), (0,
                    ne.jsx)(G.default, {
                        className: "p-top-3",
                        use: "primary",
                        onClick: e,
                        disabled: t,
                        "data-test-id": "style-tab-opt-in",
                        children: (0,
                        ne.jsx)(p.default, {
                            message: Ln("styleTabOptIn.button")
                        })
                    })]
                })
            }
            render() {
                const {isStyleTab: e, styleFields: t} = this.props;
                return e && !t ? (0,
                ne.jsx)("div", {
                    children: this.renderStyleTabOptIn()
                }) : this.props.fields.length ? (0,
                ne.jsxs)("div", {
                    children: [this.renderSearch(), (0,
                    ne.jsx)(Ni.default, {
                        className: "custom-widget-fields-table",
                        flush: !0,
                        hover: !1,
                        children: (0,
                        ne.jsx)("tbody", {
                            children: this.renderFields()
                        })
                    })]
                }) : (0,
                ne.jsx)(Nt.default, {
                    use: "help",
                    children: (0,
                    ne.jsx)(p.default, {
                        message: Ln("noFields")
                    })
                })
            }
        }
        An.propTypes = {
            customWidgetId: u.default.customWidgetId.isRequired,
            fields: a().arrayOf(a().instanceOf(bt.default)).isRequired,
            styleFields: a().instanceOf(bt.default),
            isStyleTab: a().bool,
            styleTab: a().instanceOf(bt.default),
            fieldName: a().string,
            depth: a().number,
            isReadOnly: a().bool,
            createStyleFieldGroup: a().func,
            fieldGrouping: a().object.isRequired,
            fieldTypePermissions: a().object.isRequired
        };
        An.defaultProps = {
            depth: 0,
            isReadOnly: !1,
            isStyleTab: !1
        };
        var Dn = (0,
        q.compose)((0,
        d.connect)(vn, Wn))(An);
        const Pn = e => `DesignEditorsUI.customWidgetEditor.sidebar.main.fields.fieldsDropdown.${e}`;
        class Nn extends i.Component {
            constructor(...e) {
                super(...e);
                this.onFieldCreate = e => {
                    this.props.onFieldCreate(e)
                }
            }
            render() {
                const e = this.props.buttonText || (0,
                ne.jsx)(p.default, {
                    message: Pn("addField")
                });
                return (0,
                ne.jsx)(Dt.default, {
                    buttonClassName: this.props.isStyleTab ? "add-style-field-dropdown" : "add-field-dropdown",
                    buttonSize: "extra-small",
                    buttonText: (0,
                    ne.jsx)(Nt.default, {
                        children: e
                    }),
                    buttonUse: "link",
                    className: "fields-dropdown",
                    closeOnTargetLeave: !0,
                    menuWidth: 315,
                    disabled: this.props.disabled,
                    placement: "bottom left",
                    children: (0,
                    ne.jsx)(Qi, {
                        customWidgetId: this.props.customWidgetId,
                        onFieldCreate: this.onFieldCreate,
                        isStyleTab: this.props.isStyleTab
                    })
                })
            }
        }
        Nn.propTypes = {
            customWidgetId: u.default.customWidgetId.isRequired,
            buttonText: a().string,
            onFieldCreate: a().func,
            disabled: a().bool,
            isStyleTab: a().bool
        };
        Nn.defaultProps = {
            buttonText: null,
            onFieldCreate: ge.default
        };
        const _n = e => `DesignEditorsUI.customWidgetEditor.sidebar.main.fieldGrouping.${e}`;
        function qn() {
            return (e, t) => ({
                fieldGrouping: (0,
                N.getFieldGrouping)(e, t)
            })
        }
        const Un = {
            createFieldGroup: W.createFieldGroup,
            toggleFieldGrouping: A.toggleFieldGrouping
        };
        class kn extends i.PureComponent {
            constructor(...e) {
                super(...e);
                this.onCancelClick = () => {
                    const {customWidgetId: e, toggleFieldGrouping: t} = this.props;
                    t(e)
                }
                ;
                this.onCreateGroupClick = () => {
                    const {createFieldGroup: e, customWidgetId: t, fieldGrouping: s} = this.props
                      , {selectedFields: i} = s;
                    if (!Object.keys(i).length)
                        return;
                    e(t, new bt.default({
                        type: Gi.GROUP,
                        isNew: !0
                    }), i)
                }
            }
            render() {
                const {selectedFields: e, fieldsAreNotSiblings: t, isTooDeep: s} = this.props.fieldGrouping
                  , i = !Object.keys(e).length || t || s
                  , n = t && (0,
                ne.jsx)("div", {
                    children: (0,
                    ne.jsx)(Nt.default, {
                        use: "error",
                        children: (0,
                        ne.jsx)(p.default, {
                            message: _n("fieldsAreNotSiblingsMessage")
                        })
                    })
                })
                  , o = s && (0,
                ne.jsx)("div", {
                    children: (0,
                    ne.jsx)(Nt.default, {
                        use: "error",
                        children: (0,
                        ne.jsx)(p.default, {
                            message: _n("isTooDeepMessage"),
                            options: {
                                maxNestingDepth: en.MAX_NESTING_DEPTH
                            }
                        })
                    })
                });
                return (0,
                ne.jsxs)("div", {
                    className: "sidebar-group-controls",
                    children: [(0,
                    ne.jsx)(Nt.default, {
                        children: (0,
                        ne.jsx)(p.default, {
                            message: _n("message")
                        })
                    }), n, o, (0,
                    ne.jsxs)("div", {
                        className: "p-top-2",
                        children: [(0,
                        ne.jsx)(G.default, {
                            disabled: i,
                            onClick: this.onCreateGroupClick,
                            size: "small",
                            use: "primary",
                            children: (0,
                            ne.jsx)(p.default, {
                                message: _n("buttons.createGroup")
                            })
                        }), (0,
                        ne.jsx)(G.default, {
                            onClick: this.onCancelClick,
                            size: "small",
                            use: "secondary",
                            children: (0,
                            ne.jsx)(p.default, {
                                message: _n("buttons.cancel")
                            })
                        })]
                    })]
                })
            }
        }
        kn.propTypes = {
            createFieldGroup: a().func.isRequired,
            customWidgetId: u.default.customWidgetId.isRequired,
            toggleFieldGrouping: a().func.isRequired,
            fieldGrouping: a().object.isRequired
        };
        var Gn = (0,
        d.connect)(qn, Un)(kn)
          , Mn = s(515);
        function Bn(e, t={}) {
            return Object.assign({
                action: e
            }, t)
        }
        const {track: wn} = Mn.usageTrackerActions
          , Hn = e => `DesignEditorsUI.customWidgetEditor.sidebar.copyFieldsJsonButton.${e}`
          , Vn = ({fields: e=[]}) => {
            const t = (0,
            d.useDispatch)()
              , s = JSON.stringify(e, null, " ")
              , i = () => {
                t(wn("customWidgetInteraction", Bn("field-json-copied")))
            }
            ;
            return (0,
            ne.jsx)(Vs.default, {
                disabled: 0 === e.length,
                use: "link",
                value: s,
                onClick: i,
                children: (0,
                ne.jsx)(Nt.default, {
                    children: (0,
                    ne.jsx)(p.default, {
                        message: Hn("label")
                    })
                })
            })
        }
        ;
        Vn.propTypes = {
            fields: a().oneOfType([a().instanceOf(bt.default), a().arrayOf(a().instanceOf(bt.default))])
        };
        var $n = Vn
          , Yn = s(465)
          , zn = s(603)
          , Kn = s(375)
          , Jn = s(351);
        const Xn = ["autoSelect", "buttonUse", "buttonRowRenderer", "inputRef", "onChange", "onCopy", "textAreaProps", "tooltipPlacement", "use", "value"]
          , Zn = ({className: e, onClick: t, tooltipPlacement: s, use: i, value: n}) => (0,
        ne.jsx)("div", {
            className: e,
            children: (0,
            ne.jsx)(Vs.default, {
                onClick: t,
                tooltipPlacement: s,
                use: i,
                value: n
            })
        })
          , Qn = e => {
            const t = e.target.getBoundingClientRect();
            return {
                bottom: t.bottom - e.clientY,
                right: t.right - e.clientX
            }
        }
        ;
        class eo extends i.PureComponent {
            constructor(e) {
                super(e);
                this.handleCopyClick = e => {
                    const {inputRef: t, onCopy: s} = this.props;
                    t.current && t.current.select();
                    s && s(e)
                }
                ;
                this.handleTextAreaMouseMove = e => {
                    const t = 18
                      , {bottom: s, right: i} = Qn(e)
                      , n = s < t && i < t;
                    this.setState({
                        isResizing: n
                    })
                }
                ;
                this.handleTextAreaMouseDown = e => {
                    const {autoSelect: t, inputRef: s} = this.props;
                    if (t && !this.state.isResizing) {
                        e.preventDefault();
                        s.current && s.current.select()
                    }
                }
                ;
                this.state = {
                    isResizing: !1
                }
            }
            render() {
                const e = this.props
                  , {autoSelect: t, buttonUse: s, buttonRowRenderer: i, inputRef: n, onChange: o, textAreaProps: d, tooltipPlacement: r, use: l, value: a} = e
                  , u = (0,
                It.default)(e, Xn)
                  , c = "code" === l
                  , p = c ? pi.default : li.default;
                "code" === l && d.maxHeight && delete d.maxHeight;
                return (0,
                ne.jsxs)("div", Object.assign({}, u, {
                    children: [(0,
                    ne.jsx)(p, Object.assign({}, d, {
                        className: "private-text-area--copyable" + (c ? " private-text-area--code is--code" : ""),
                        inputRef: n,
                        onChange: o,
                        onMouseMove: !c && t && !1 !== d.resize ? this.handleTextAreaMouseMove : null,
                        onMouseDown: this.handleTextAreaMouseDown,
                        readOnly: !!c || d.readOnly,
                        resize: !c && d.resize,
                        value: a,
                        $isCode: c
                    })), (0,
                    ne.jsx)(i, {
                        className: "m-y-3",
                        onClick: this.handleCopyClick,
                        tooltipPlacement: r,
                        use: s,
                        value: a
                    })]
                }))
            }
        }
        eo.displayName = "UICopyTextArea";
        eo.defaultProps = {
            autoSelect: !0,
            buttonRowRenderer: Zn,
            buttonUse: "tertiary",
            textAreaProps: {},
            tooltipPlacement: "right",
            use: "default"
        };
        eo.propTypes = {
            autoSelect: a().bool.isRequired,
            buttonRowRenderer: a().oneOfType([a().func, a().node]),
            buttonUse: Vs.default.propTypes.use,
            inputRef: Kn.default,
            onChange: a().func,
            onCopy: a().func,
            textAreaProps: (0,
            Jn.default)(( (e, t, s) => {
                if ("object" != typeof e[t])
                    return new Error(`${s}\`: \`${t}\` must be an object.`);
                const {textAreaProps: i, use: n} = e;
                0;
                return null
            }
            ), "object"),
            tooltipPlacement: Vs.default.propTypes.tooltipPlacement,
            use: a().oneOf(["default", "code"]),
            value: a().string
        };
        var to = (0,
        zn.default)((0,
        Rt.default)(eo));
        const so = e => `DesignEditorsUI.customWidgetEditor.sidebar.main.moduleSnippet.${e}`;
        class io extends i.Component {
            constructor(e) {
                super(e);
                this.getSnippet = () => {
                    const {snippet: e} = this.state;
                    this.setState({
                        snippet: this.createSnippet(this.props)
                    });
                    return e
                }
                ;
                this.renderButton = () => (0,
                ne.jsx)(Vs.default, {
                    className: "m-top-2",
                    size: "extra-small",
                    use: "tertiary-light",
                    valueWhenCopied: this.getSnippet,
                    children: (0,
                    ne.jsx)(p.default, {
                        message: so("snippetInput.buttonText")
                    })
                });
                this.state = {
                    snippet: this.createSnippet(e)
                }
            }
            shouldComponentUpdate(e, t) {
                return this.props.customWidgetId !== e.customWidgetId || this.props.customWidgetLabel !== e.customWidgetLabel || this.state.snippet !== t.snippet
            }
            componentDidUpdate(e) {
                this.props.customWidgetId === e.customWidgetId && this.props.customWidgetLabel === e.customWidgetLabel || this.setState({
                    snippet: this.createSnippet(this.props)
                })
            }
            createSnippet(e) {
                return (0,
                Yn.getModuleSnippet)({
                    moduleId: e.moduleId,
                    name: e.customWidgetLabel,
                    path: e.customWidgetPath
                })
            }
            render() {
                const e = (0,
                ne.jsx)(p.default, {
                    message: so("snippetInput.label")
                });
                return (0,
                ne.jsxs)("div", {
                    children: [(0,
                    ne.jsx)(p.default, {
                        message: so("helpText")
                    }), (0,
                    ne.jsx)(Bt.default, {
                        children: (0,
                        ne.jsx)(es.default, {
                            className: "m-top-3",
                            label: e,
                            children: (0,
                            ne.jsx)(Vt, {
                                inputComponent: to,
                                use: "code",
                                buttonRowRenderer: this.renderButton,
                                value: this.state.snippet
                            })
                        })
                    })]
                })
            }
        }
        io.propTypes = {
            customWidgetId: u.default.customWidgetId.isRequired,
            moduleId: a().number,
            customWidgetLabel: a().string.isRequired,
            customWidgetPath: a().string.isRequired
        };
        var no = s(470)
          , oo = s(237);
        function ro() {
            const e = ee.makeGetParentConnectionsByCategory()
              , t = P.makeGetCustomWidgetBuffer();
            return function(s, i) {
                const n = N.getIsEditingGlobalContent(s, i)
                  , o = e(s, {
                    assetId: i.customWidgetId
                })
                  , d = (0,
                w.getHasBlogSmartContent)(s)
                  , r = (0,
                w.getHasPagesSmartContent)(s)
                  , l = t(s, {
                    assetId: i.customWidgetId
                }).contentTypes
                  , a = l.includes(oo.BLOG_POST) || l.includes(oo.BLOG_LISTING)
                  , u = l.includes(oo.PAGE)
                  , c = a || u
                  , p = (0,
                w.getHasGenericSmartContent)(s);
                let h = !0;
                if (c) {
                    a && !d && (h = !1);
                    u && !r && (h = !1)
                } else
                    p || (h = !1);
                return {
                    isEditingGlobalContent: n,
                    dependentsCount: Object.keys(o).reduce(( (e, t) => e + Object.keys(o[t]).length), 0),
                    hasSmartContentAccess: h
                }
            }
        }
        const lo = {
            fetchForParentConnections: no.fetchForParentConnections,
            setIsEditingGlobalContent: A.setIsEditingGlobalContent
        }
          , ao = e => `DesignEditorsUI.customWidgetEditor.sidebar.main.globalAndSmartContent.${e}`;
        class uo extends i.PureComponent {
            constructor(...e) {
                super(...e);
                this.onEditGlobalContent = () => {
                    this.props.setIsEditingGlobalContent(this.props.customWidgetId, !0)
                }
            }
            componentDidMount() {
                this.props.fetchForParentConnections(this.props.customWidgetId)
            }
            componentDidUpdate(e) {
                this.props.customWidgetId !== e.customWidgetId && this.props.fetchForParentConnections(this.props.customWidgetId)
            }
            renderDependentsMessage() {
                const {customWidgetId: e, dependentsCount: t} = this.props;
                if (!t)
                    return null;
                const s = (0,
                ne.jsx)(ws.default, {
                    to: (0,
                    Bs.createDependentsPath)($.CUSTOM_WIDGET, e),
                    children: (0,
                    ne.jsx)(p.default, {
                        message: ao("dependentsLink"),
                        options: {
                            count: t
                        }
                    })
                });
                return (0,
                ne.jsx)(U.default, {
                    message: ao("dependentsLink.prefix"),
                    options: {
                        dependentsLink: s
                    }
                })
            }
            render() {
                const {isEditingGlobalContent: e, hasSmartContentAccess: t} = this.props;
                return (0,
                ne.jsxs)("div", {
                    children: [(0,
                    ne.jsx)("div", {
                        children: (0,
                        ne.jsxs)(Nt.default, {
                            children: [(0,
                            ne.jsx)(p.default, {
                                message: ao("message")
                            }), this.renderDependentsMessage()]
                        })
                    }), (0,
                    ne.jsx)(Hs.default, {
                        disabled: t,
                        title: (0,
                        ne.jsx)(p.default, {
                            message: ao("noSmartContent")
                        }),
                        children: (0,
                        ne.jsx)(G.default, {
                            className: "m-top-3",
                            disabled: e || !t,
                            onClick: this.onEditGlobalContent,
                            size: "extra-small",
                            use: "tertiary-light",
                            children: (0,
                            ne.jsx)(p.default, {
                                message: ao("editButton.globalAndSmart")
                            })
                        })
                    })]
                })
            }
        }
        uo.propTypes = {
            customWidgetId: u.default.customWidgetId.isRequired,
            isEditingGlobalContent: a().bool.isRequired,
            hasSmartContentAccess: a().bool.isRequired,
            dependentsCount: a().number.isRequired,
            fetchForParentConnections: a().func.isRequired,
            setIsEditingGlobalContent: a().func.isRequired
        };
        var co = (0,
        d.connect)(ro, lo)(uo)
          , po = s(1284)
          , ho = s(701)
          , go = s(1464)
          , mo = s(1234)
          , fo = s(1279);
        const bo = (0,
        ie.default)(( () => Promise.all([s.e(7626), s.e(8902)]).then(s.bind(s, 2054))));
        function Co() {
            const e = P.makeGetCustomWidgetBuffer()
              , t = ee.makeGetParentConnectionsByCategory()
              , s = ee.makeGetParentConnectionsCount();
            return function(i, n) {
                const {hostTemplateTypes: o, id: d} = e(i, n) || {};
                return {
                    hostTemplateTypes: o,
                    customWidgetId: d,
                    dependentsCount: s(i, {
                        assetId: d
                    }),
                    dependentsByCategory: t(i, {
                        assetId: d
                    })
                }
            }
        }
        function Eo(e) {
            class t extends i.Component {
                constructor(e) {
                    super(e);
                    this.handleUpdateTemplateCallback = e => {
                        e && this.props.updateCustomWidget(e);
                        this.handleUpdateModalClose()
                    }
                    ;
                    this.handleUpdateModalClose = () => {
                        this.setState({
                            open: !1
                        })
                    }
                    ;
                    this.handleUpdateHostTemplateTypesClick = () => {
                        this.setState({
                            open: !0
                        })
                    }
                    ;
                    this.state = {
                        open: !1
                    }
                }
                renderUpdateTemplateModal() {
                    const {open: e} = this.state
                      , {hostTemplateTypes: t, dependentsByCategory: s, customWidgetId: i, dependentsCount: n} = this.props;
                    return e ? (0,
                    ne.jsx)(bo, {
                        hostTemplateTypes: t,
                        callback: this.handleUpdateTemplateCallback,
                        dependentsByCategory: s,
                        customWidgetId: i,
                        dependentsCount: n
                    }) : null
                }
                render() {
                    const t = this.renderUpdateTemplateModal();
                    return (0,
                    ne.jsx)(e, Object.assign({}, this.props, {
                        updateTemplateModal: t,
                        onUpdateHostTemplateTypesClick: this.handleUpdateHostTemplateTypesClick,
                        handleOnboardingUpdatedTemplate: this.handleOnboardingUpdatedTemplate
                    }))
                }
            }
            t.propTypes = {
                hostTemplateTypes: a().array.isRequired,
                updateCustomWidget: a().func.isRequired,
                customWidgetId: u.default.customWidgetId.isRequired,
                dependentsByCategory: y.dependentsByCategory,
                dependentsCount: a().number
            };
            return (0,
            d.connect)(Co, null)(t)
        }
        const Oo = (0,
        ie.default)(( () => Promise.all([s.e(6740), s.e(7675), s.e(7626), s.e(9762), s.e(2156)]).then(s.bind(s, 990))))
          , yo = (0,
        Ei.default)(Mt.default)
          , To = e => `DesignEditorsUI.customWidgetEditor.sidebar.main.nameLabel.${e}`
          , xo = Object.freeze([]);
        function jo() {
            const e = P.makeGetCustomWidgetBuffer();
            return (t, s) => {
                const i = e(t, s);
                let n = "";
                i && (n = i.path && i.path.startsWith("@hubspot") ? i.displayName || i.label || i.name : i.name || "");
                return {
                    customWidgetLabel: n,
                    displayName: i && i.displayName || "",
                    isV1: !!i && 1 === i.schemaVersion,
                    isUngatedForContentTypes: (0,
                    O.getIsUngatedForContentTypes)(t),
                    contentTypes: i && i.contentTypes ? i.contentTypes : xo,
                    hostTemplateTypes: i ? i.hostTemplateTypes : xo,
                    customWidgetIcon: i ? i.icon : null
                }
            }
        }
        const Io = {
            setIsSelectingIcon: A.setIsSelectingIcon
        };
        class Ro extends i.PureComponent {
            constructor(e) {
                super(e);
                this.onLabelBlur = () => {
                    const e = this.props.customWidgetLabel
                      , {isValidLabel: t, label: s} = this.state;
                    t && s !== e ? this.handleRenameConfirmOpen() : this.setState({
                        isValidLabel: !0,
                        label: e
                    })
                }
                ;
                this.handleRenameConfirmOpen = () => {
                    this.setState({
                        showRenameConfirmModal: !0
                    })
                }
                ;
                this.handleRenameConfirmClose = () => {
                    this.setState({
                        showRenameConfirmModal: !1
                    })
                }
                ;
                this.handleRenameConfirmCallback = (e=!1) => {
                    e || this.onLabelChange(this.props.customWidgetLabel, !0);
                    this.handleRenameConfirmClose()
                }
                ;
                this.handleDisplayNameChange = e => {
                    const {updateCustomWidget: t} = this.props;
                    t({
                        displayName: e.target.value
                    })
                }
                ;
                this.onLabelChange = (e, t) => {
                    this.setState({
                        isValidLabel: t,
                        label: e
                    })
                }
                ;
                this.onLabelError = e => {
                    this.onLabelChange(e, !1)
                }
                ;
                this.onLabelSuccess = e => {
                    this.onLabelChange(e, !0)
                }
                ;
                this.onIconClick = () => {
                    const {customWidgetId: e, setIsSelectingIcon: t} = this.props;
                    t(e, !0)
                }
                ;
                const {customWidgetLabel: t} = this.props;
                this.state = {
                    isValidLabel: !0,
                    label: t,
                    showRenameConfirmModal: !1
                }
            }
            componentDidUpdate(e) {
                e.customWidgetLabel !== this.props.customWidgetLabel && this.setState({
                    label: this.props.customWidgetLabel
                })
            }
            renderRenameFileConfirmModal() {
                return this.state.showRenameConfirmModal ? (0,
                ne.jsx)(Oo, {
                    callback: this.handleRenameConfirmCallback,
                    fileId: this.props.customWidgetId,
                    newFileName: this.state.label
                }) : null
            }
            renderTypeLabel() {
                const {isReadOnly: e, isV1: t, isUngatedForContentTypes: s, contentTypes: i, hostTemplateTypes: n, revisionId: o, onUpdateHostTemplateTypesClick: d} = this.props;
                if (t)
                    return null;
                if (s) {
                    let t, s = "contentTypesLabel";
                    if (!i.length || i.includes(oo.ANY)) {
                        t = (0,
                        ne.jsx)(p.default, {
                            message: i.length ? `contentUtils.contentTypes.${oo.ANY}` : To("contentTypes.noContentTypes")
                        });
                        s = "contentTypesLabel.other"
                    } else
                        t = i.map((e => (0,
                        h.default)(`contentUtils.contentTypes.${e}`))).join(", ");
                    return (0,
                    ne.jsx)(Nt.default, {
                        className: "display-block",
                        children: (0,
                        ne.jsx)(U.default, {
                            message: To(s),
                            options: {
                                count: i.length,
                                types: (0,
                                ne.jsx)(G.default, {
                                    onClick: d,
                                    use: "link",
                                    size: "extra-small",
                                    disabled: !!o || e,
                                    children: t
                                })
                            }
                        })
                    })
                }
                const r = n.includes(oo.ANY) || n.includes(oo.NONE) ? n.length + 1 : n.length;
                return (0,
                ne.jsx)(Nt.default, {
                    className: "display-block",
                    children: (0,
                    ne.jsx)(U.default, {
                        message: To("templateTypesLabel"),
                        options: {
                            count: r,
                            types: (0,
                            ne.jsx)(G.default, {
                                onClick: d,
                                use: "link",
                                size: "extra-small",
                                disabled: !!o || e,
                                children: n.map((e => (0,
                                h.default)(To(`types.${e}`)))).join(", ")
                            })
                        }
                    })
                })
            }
            renderIcon() {
                const {isReadOnly: e, customWidgetIcon: t, isV1: s} = this.props
                  , i = t ? "" : "p-y-2";
                let n = (0,
                ne.jsx)(mo.default, {
                    className: i,
                    size: ho.NAME_LABEL_ICON_SIZE,
                    icon: t
                });
                if (!e && !s) {
                    const e = (0,
                    ne.jsx)(_.default, {
                        align: "center",
                        justify: "center",
                        children: (0,
                        ne.jsx)("div", {
                            className: "change-icon-text text-center",
                            children: (0,
                            ne.jsx)(p.default, {
                                message: To("changeIcon")
                            })
                        })
                    });
                    n = (0,
                    ne.jsx)(go.default, {
                        className: "custom-widget-icon-overlay",
                        foregroundContent: e,
                        onClick: this.onIconClick,
                        children: n
                    })
                }
                return (0,
                ne.jsx)("div", {
                    className: "m-right-2",
                    children: n
                })
            }
            render() {
                const {label: e} = this.state
                  , {displayName: t} = this.props;
                return (0,
                ne.jsxs)(i.Fragment, {
                    children: [(0,
                    ne.jsxs)(B.default, {
                        align: "center",
                        className: "custom-widget-name-label",
                        itemLeft: this.renderIcon(),
                        children: [this.renderRenameFileConfirmModal(), this.props.updateTemplateModal, (0,
                        ne.jsx)(fo.default, {
                            allowBlank: !1,
                            onBlur: this.onLabelBlur,
                            onError: this.onLabelError,
                            onSuccess: this.onLabelSuccess,
                            placeholder: (0,
                            h.default)(To("placeholder")),
                            readOnly: this.props.isReadOnly,
                            typeLabel: this.renderTypeLabel(),
                            value: e
                        })]
                    }), (0,
                    ne.jsx)(es.default, {
                        className: "m-top-2",
                        "data-test-id": "module-label",
                        tooltip: (0,
                        ne.jsx)(U.default, {
                            message: To("displayNameTooltip")
                        }),
                        label: (0,
                        ne.jsx)(U.default, {
                            message: To("displayNameLabel")
                        }),
                        children: (0,
                        ne.jsx)(yo, {
                            readOnly: this.props.isReadOnly,
                            value: t,
                            onChange: this.handleDisplayNameChange
                        })
                    })]
                })
            }
        }
        Ro.propTypes = {
            customWidgetLabel: a().string.isRequired,
            customWidgetId: u.default.customWidgetId.isRequired,
            displayName: a().string.isRequired,
            revisionId: a().number,
            isReadOnly: a().bool.isRequired,
            isUngatedForContentTypes: a().bool.isRequired,
            isV1: a().bool.isRequired,
            contentTypes: a().array.isRequired,
            hostTemplateTypes: a().array.isRequired,
            onUpdateHostTemplateTypesClick: a().func.isRequired,
            updateTemplateModal: a().node,
            customWidgetIcon: a().string,
            setIsSelectingIcon: a().func.isRequired,
            updateCustomWidget: a().func.isRequired
        };
        var So = (0,
        q.compose)((0,
        d.connect)(jo, Io), Eo)(Ro)
          , Fo = s(1352)
          , Lo = s(994)
          , vo = s(596)
          , Wo = s(544)
          , Ao = s(1912)
          , Do = s(1239)
          , Po = s(691)
          , No = s(539)
          , _o = s(397)
          , qo = s(399)
          , Uo = s(398)
          , ko = s(1913);
        function Go() {
            const [e,t] = (0,
            i.useState)(!1);
            return (0,
            d.useSelector)(O.getIsUngatedForEmailCrmTokenRestrictions) ? (0,
            ne.jsx)(No.default, {
                content: (0,
                ne.jsxs)(ne.Fragment, {
                    children: [(0,
                    ne.jsxs)(Uo.default, {
                        children: [(0,
                        ne.jsx)(Po.default, {
                            children: (0,
                            ne.jsx)(p.default, {
                                message: "DesignEditorsUI.shared.programmableEmail.crmTokensHeading"
                            })
                        }), (0,
                        ne.jsx)(vo.default, {
                            className: "m-x-3",
                            use: "beta",
                            children: (0,
                            ne.jsx)(p.default, {
                                message: "DesignEditorsUI.shared.programmableEmail.beta"
                            })
                        }), (0,
                        ne.jsx)(qo.default, {
                            popoverUse: "longform",
                            onClick: () => t(!1)
                        })]
                    }), (0,
                    ne.jsx)(_o.default, {
                        className: "m-bottom-4",
                        children: (0,
                        ne.jsx)(ko.default, {})
                    })]
                }),
                open: e,
                placement: "left",
                use: "longform",
                width: 520,
                children: (0,
                ne.jsx)(G.default, {
                    className: "p-left-0",
                    onClick: () => t((e => !e)),
                    size: "small",
                    use: "transparent",
                    children: (0,
                    ne.jsx)(p.default, {
                        message: "DesignEditorsUI.customWidgetEditor.toolbar.isEnabledForEmailV3Rendering.helpLink"
                    })
                })
            }) : null
        }
        var Mo = Go;
        const {track: Bo} = Mn.usageTrackerActions;
        class wo extends i.PureComponent {
            constructor(e) {
                super(e);
                this.onClickToggle = () => {
                    this.setState({
                        modalOpen: !0
                    })
                }
                ;
                this.state = {
                    modalOpen: !1
                }
            }
            renderConfirmModal() {
                return this.state.modalOpen ? (0,
                ne.jsx)(Ao.default, {
                    onConfirm: () => {
                        this.props.track("programmableEmailInteraction", Bn(this.props.checked ? "disable" : "enable"));
                        this.props.onChange(!this.props.checked);
                        this.setState({
                            modalOpen: !1
                        })
                    }
                    ,
                    onCancel: () => {
                        this.setState({
                            modalOpen: !1
                        })
                    }
                    ,
                    version: this.props.checked ? "MODULE_TWO" : "MODULE_THREE",
                    fileId: this.props.fileId
                }) : null
            }
            render() {
                return (0,
                ne.jsxs)("div", {
                    children: [(0,
                    ne.jsxs)("div", {
                        className: "display-flex align-center m-bottom-2",
                        children: [(0,
                        ne.jsx)(xi.default, {
                            children: this.props.toggleLabel
                        }), (0,
                        ne.jsx)(Wo.default, {
                            disabled: this.props.disabled,
                            checked: this.props.checked,
                            onChange: this.onClickToggle,
                            size: "extra-small"
                        })]
                    }), this.props.tooltipTitle, (0,
                    ne.jsx)("div", {
                        className: "m-top-2",
                        children: (0,
                        ne.jsx)(Mo, {})
                    }), this.props.checked && (0,
                    ne.jsx)(Do.default, {}), this.renderConfirmModal()]
                })
            }
        }
        wo.defaultProps = {
            disabled: !1
        };
        wo.propTypes = {
            disabled: a().bool,
            checked: a().bool.isRequired,
            onChange: a().func.isRequired,
            toggleLabel: a().node.isRequired,
            tooltipTitle: a().node,
            fileId: a().number.isRequired,
            track: a().func.isRequired
        };
        var Ho = (0,
        d.connect)(null, {
            track: Bo
        })(wo)
          , Vo = s(1386);
        const $o = e => `DesignEditorsUI.customWidgetEditor.toolbar.${e}`;
        function Yo() {
            const e = P.makeGetCustomWidgetBuffer()
              , t = P.makeGetIsEmailOrAnyType();
            return (s, i) => {
                const n = e(s, i);
                return {
                    isBufferLoaded: !!n,
                    isEnabledForEmailV3Rendering: !(!n || !n.isEnabledForEmailV3Rendering),
                    isEmailOrAnyType: t(s, i)
                }
            }
        }
        const zo = {
            setIsSelectingIcon: A.setIsSelectingIcon
        };
        class Ko extends i.PureComponent {
            constructor(...e) {
                super(...e);
                this.onIsEnabledForEmailV3RenderingToggleChange = e => {
                    this.props.updateCustomWidget({
                        isEnabledForEmailV3Rendering: e
                    })
                }
            }
            render() {
                return this.props.isEmailOrAnyType ? (0,
                ne.jsx)(Ho, {
                    disabled: !this.props.isBufferLoaded || this.props.isReadOnly,
                    checked: !!this.props.isEnabledForEmailV3Rendering,
                    onChange: this.onIsEnabledForEmailV3RenderingToggleChange,
                    toggleLabel: (0,
                    ne.jsxs)(ne.Fragment, {
                        children: [(0,
                        ne.jsx)(p.default, {
                            className: "m-right-2",
                            message: $o("isEnabledForEmailV3Rendering.label")
                        }), (0,
                        ne.jsx)(vo.default, {
                            use: "beta",
                            children: (0,
                            ne.jsx)(p.default, {
                                message: $o("isEnabledForEmailV3Rendering.beta")
                            })
                        })]
                    }),
                    tooltipTitle: (0,
                    ne.jsx)(Nt.default, {
                        use: "help",
                        children: (0,
                        ne.jsx)(jt.default, {
                            message: $o("isEnabledForEmailV3Rendering.tooltipTitle_jsx"),
                            elements: {
                                KnowledgeBaseButton: () => (0,
                                ne.jsx)(Vo.default, {
                                    url: "https://knowledge.hubspot.com/email/create-programmable-emails"
                                })
                            }
                        })
                    }),
                    fileId: this.props.customWidgetId
                }) : null
            }
        }
        Ko.propTypes = {
            customWidgetId: u.default.customWidgetId.isRequired,
            isEmailOrAnyType: a().bool.isRequired,
            isReadOnly: a().bool.isRequired,
            updateCustomWidget: a().func.isRequired,
            isBufferLoaded: a().bool.isRequired,
            isEnabledForEmailV3Rendering: a().bool.isRequired
        };
        var Jo = (0,
        d.connect)(Yo, zo)(Ko);
        const Xo = e => `DesignEditorsUI.customWidgetEditor.sidebar.main.${e}`
          , Zo = [sn.CUSTOM_WIDGET_FIELD_TABLE_ROW, sn.CUSTOM_WIDGET_CHOICE_FIELD_OPTION]
          , Qo = (0,
        Lo.default)(Zo)
          , ed = e => Object.keys(e).reduce(( (t, s) => t.concat(e[s] || [])), []);
        class td extends i.PureComponent {
            constructor(...e) {
                super(...e);
                this.onFieldCreate = e => {
                    const {createField: t, customWidgetId: s, fieldCreateOptions: i} = this.props;
                    t(s, new bt.default({
                        type: e,
                        isNew: !0,
                        fieldCreateOptions: i
                    }))
                }
                ;
                this.onStyleFieldCreate = e => {
                    const {styleFields: t, createField: s, customWidgetId: i, fieldCreateOptions: n} = this.props;
                    s(i, new bt.default({
                        type: e,
                        isNew: !0,
                        fieldCreateOptions: n
                    }), t.id)
                }
                ;
                this.onGroupClick = e => {
                    const {customWidgetId: t, toggleFieldGrouping: s} = this.props;
                    s(t, e)
                }
                ;
                this.onTagsChange = (e, t) => {
                    this.props.updateCustomWidget({
                        contentTags: e,
                        tags: t
                    })
                }
                ;
                this.onCategoriesChange = e => {
                    this.props.updateCustomWidget({
                        categories: e
                    })
                }
                ;
                this.onOpenChange = e => t => {
                    this.props.saveAccordionState(e, t.target.value)
                }
                ;
                this.onAddStyleFieldGroup = () => {
                    const {createFieldGroup: e, customWidgetId: t} = this.props;
                    e(t, new bt.default({
                        type: "group",
                        isNew: !1,
                        name: "style",
                        label: "Style",
                        tab: "STYLE"
                    }))
                }
                ;
                this.sortFieldErrors = e => {
                    const {styleFields: t} = this.props
                      , s = {}
                      , i = {};
                    Object.keys(e).forEach((n => {
                        const o = ed(e[n]);
                        t && (0,
                        he.isChild)(t, n) ? i[n] = o : s[n] = o
                    }
                    ));
                    return {
                        content: s,
                        style: i
                    }
                }
            }
            getIsOpen(e) {
                return (0,
                Fo.getIsOpen)(this.props.accordionStates, e)
            }
            get editorOptionsErrors() {
                const {moduleErrors: e} = this.props;
                return (0,
                c.pick)(e, ["inline_help_text"])
            }
            renderBreadcrumbs() {
                const {customWidgetLabel: e} = this.props
                  , {customWidgetIcon: t, isReadOnly: s} = this.props
                  , i = (0,
                ne.jsx)(mo.default, {
                    alignment: "text-bottom",
                    size: 14,
                    icon: t
                })
                  , n = e ? (0,
                ne.jsx)("span", {
                    children: e
                }) : null;
                return (0,
                ne.jsx)(qt.default, {
                    className: "field-edit-breadcrumbs",
                    isReadOnly: s,
                    rootIcon: i,
                    rootLabel: n
                })
            }
            renderNameLabel() {
                return (0,
                ne.jsx)(So, {
                    customWidgetId: this.props.customWidgetId,
                    isReadOnly: this.props.isReadOnly,
                    revisionId: this.props.revisionId,
                    updateCustomWidget: this.props.updateCustomWidget
                })
            }
            renderEmailV3RenderingToggle() {
                return (0,
                ne.jsx)(Jo, {
                    customWidgetId: this.props.customWidgetId,
                    isReadOnly: this.props.isReadOnly,
                    updateCustomWidget: this.props.updateCustomWidget
                })
            }
            renderFields() {
                const {fields: e, customWidgetId: t, isReadOnly: s} = this.props;
                return (0,
                ne.jsx)(Dn, {
                    customWidgetId: t,
                    fields: e,
                    isReadOnly: s
                })
            }
            renderStyleFields() {
                const {styleFields: e, customWidgetId: t, isReadOnly: s} = this.props;
                return (0,
                ne.jsx)(Dn, {
                    customWidgetId: t,
                    fields: e && e.children || [],
                    styleFields: e,
                    isStyleTab: !0,
                    fieldName: e && e.name,
                    isReadOnly: s,
                    createStyleFieldGroup: this.onAddStyleFieldGroup
                })
            }
            renderStyleTabEditControls() {
                const {styleFields: e, customWidgetId: t, isReadOnly: s, revisionId: i} = this.props;
                return (0,
                ne.jsx)(ms, {
                    customWidgetId: t,
                    revisionId: i,
                    field: e,
                    isReadOnly: s
                })
            }
            renderFieldsDropdown() {
                const {isReadOnly: e, isFieldGroupingActive: t, isV1: s, customWidgetId: i, fields: n} = this.props;
                if (t)
                    return null;
                if (e)
                    return (0,
                    ne.jsx)($n, {
                        fields: n
                    });
                if (s)
                    return (0,
                    ne.jsx)(Nn, {
                        customWidgetId: i,
                        onFieldCreate: this.onFieldCreate
                    });
                const o = (0,
                ne.jsx)(Nt.default, {
                    children: (0,
                    ne.jsx)(p.default, {
                        message: Xo("actionButtonLabel")
                    })
                });
                return (0,
                ne.jsxs)(_.default, {
                    align: "center",
                    children: [(0,
                    ne.jsx)(Nn, {
                        customWidgetId: i,
                        onFieldCreate: this.onFieldCreate
                    }), (0,
                    ne.jsx)(Dt.default, {
                        buttonClassName: "m-left-0",
                        buttonUse: "transparent",
                        buttonText: o,
                        menuWidth: 150,
                        children: (0,
                        ne.jsxs)(Pt.default, {
                            children: [(0,
                            ne.jsx)($n, {
                                fields: n
                            }), (0,
                            ne.jsx)(G.default, {
                                onClick: () => {
                                    this.onGroupClick("CONTENT")
                                }
                                ,
                                use: "link",
                                children: (0,
                                ne.jsx)(Nt.default, {
                                    children: (0,
                                    ne.jsx)(p.default, {
                                        message: Xo("fields.groupLabel")
                                    })
                                })
                            })]
                        })
                    })]
                })
            }
            renderStyleFieldsDropdown() {
                const {isReadOnly: e, isFieldGroupingActive: t, customWidgetId: s, styleFields: i} = this.props;
                if (t)
                    return null;
                if (e)
                    return (0,
                    ne.jsx)($n, {
                        fields: i
                    });
                const n = (0,
                ne.jsx)(Nt.default, {
                    children: (0,
                    ne.jsx)(p.default, {
                        message: Xo("actionButtonLabel")
                    })
                });
                return (0,
                ne.jsxs)(_.default, {
                    align: "center",
                    children: [(0,
                    ne.jsx)(Nn, {
                        customWidgetId: s,
                        onFieldCreate: this.onStyleFieldCreate,
                        disabled: !i,
                        isStyleTab: !0
                    }), (0,
                    ne.jsx)(Dt.default, {
                        buttonClassName: "m-left-0",
                        buttonUse: "transparent",
                        buttonText: n,
                        menuWidth: 150,
                        children: (0,
                        ne.jsxs)(Pt.default, {
                            children: [(0,
                            ne.jsx)($n, {
                                fields: i
                            }), (0,
                            ne.jsx)(G.default, {
                                onClick: () => {
                                    this.onGroupClick(cs.STYLE)
                                }
                                ,
                                disabled: !i,
                                use: "link",
                                children: (0,
                                ne.jsx)(Nt.default, {
                                    children: (0,
                                    ne.jsx)(p.default, {
                                        message: Xo("fields.groupLabel")
                                    })
                                })
                            })]
                        })
                    })]
                })
            }
            renderGlobalAndSmartContentAccordion() {
                const {customWidgetPath: e, isGlobal: t, moduleId: s} = this.props;
                return t && s ? (0,
                ne.jsx)(Ut.default, {
                    titleText: (0,
                    ne.jsx)(p.default, {
                        message: Xo("accordionLabels.globalAndSmartContent")
                    }),
                    onOpenChange: this.onOpenChange(fs.GLOBAL_CONTENT),
                    open: this.getIsOpen(fs.GLOBAL_CONTENT),
                    children: this.props.hasGlobalContentEditorAccess ? (0,
                    ne.jsx)(po.default, {
                        contentPath: e,
                        globalContentType: "module"
                    }) : (0,
                    ne.jsx)(co, {
                        customWidgetId: this.props.customWidgetId
                    })
                }, "global-content") : null
            }
            renderLinkedFilesHelpLink() {
                const {isEmailOrAnyType: e} = this.props
                  , t = (0,
                ne.jsx)("h4", {
                    children: (0,
                    ne.jsx)(p.default, {
                        message: Xo("linkedFiles.helpLink.header")
                    })
                })
                  , s = (0,
                ne.jsxs)("p", {
                    children: [(0,
                    ne.jsx)(Xe.default, {
                        message: Xo("linkedFiles.helpLink.body")
                    }), e ? (0,
                    ne.jsx)(Xe.default, {
                        message: Xo("linkedFiles.helpLink.emailWarning")
                    }) : null]
                });
                return (0,
                ne.jsx)(Wt, {
                    closeOnTargetLeave: !0,
                    content: {
                        header: t,
                        body: s
                    },
                    placement: "bottom left",
                    children: (0,
                    ne.jsx)(Nt.default, {
                        children: (0,
                        ne.jsx)(p.default, {
                            message: Xo("linkedFiles.helpLink.text")
                        })
                    })
                })
            }
            renderFieldTranslationsHelpLink() {
                const e = (0,
                ne.jsx)("h4", {
                    children: (0,
                    ne.jsx)(p.default, {
                        message: Xo("translations.helpLink.header")
                    })
                })
                  , t = (0,
                ne.jsx)("p", {
                    children: (0,
                    ne.jsx)(jt.default, {
                        message: Xo("translations.helpLink.body_jsx"),
                        options: {
                            external: !0,
                            href: "https://knowledge.hubspot.com/articles/kcs_article/cos-general/create-translations-of-your-modules"
                        },
                        elements: {
                            Link: M.default
                        }
                    })
                });
                return (0,
                ne.jsx)(Wt, {
                    closeOnTargetLeave: !0,
                    content: {
                        header: e,
                        body: t
                    },
                    placement: "bottom left",
                    children: (0,
                    ne.jsx)(Nt.default, {
                        children: (0,
                        ne.jsx)(p.default, {
                            message: Xo("translations.helpLink.text")
                        })
                    })
                })
            }
            renderFieldTranslations() {
                const {customWidgetId: e, customWidgetLabel: t, revisionId: s, isReadOnly: i} = this.props;
                return (0,
                ne.jsx)(Ut.default, {
                    actions: this.renderFieldTranslationsHelpLink(),
                    titleText: (0,
                    ne.jsx)(p.default, {
                        message: Xo("accordionLabels.translations")
                    }),
                    onOpenChange: this.onOpenChange(fs.TRANSLATIONS),
                    open: this.getIsOpen([fs.TRANSLATIONS]),
                    children: (0,
                    ne.jsx)(Di, {
                        customWidgetId: e,
                        customWidgetLabel: t,
                        revisionId: s,
                        isReadOnly: i
                    })
                }, "field-translations")
            }
            renderAccordions() {
                const {customWidgetId: e, isFieldGroupingActive: t, fieldType: s, updateCustomWidget: i, isReadOnly: n, assets: o, isModuleCategoriesUngated: d, isModuleStyleFieldsUngated: r, revisionId: l, isV1: a, customWidgetInlineHelpText: u, fieldsErrors: c, fieldsWarnings: g} = this.props
                  , {content: m, style: f} = this.sortFieldErrors(c)
                  , {content: b, style: C} = this.sortFieldErrors(g)
                  , E = (0,
                ne.jsxs)(_.default, {
                    align: "end",
                    children: [(0,
                    ne.jsx)(gn, {
                        className: "m-right-2",
                        fieldErrors: m,
                        i18nKey: Xo("accordionLabels.hasError")
                    }), (0,
                    ne.jsx)(mn, {
                        className: "m-right-2",
                        fieldWarnings: b,
                        i18nKey: Xo("accordionLabels.hasWarning")
                    }), (0,
                    ne.jsx)(At.default, {
                        matchContentWidth: !0,
                        children: (0,
                        ne.jsx)(p.default, {
                            message: Xo("accordionLabels.fields")
                        })
                    })]
                })
                  , O = (0,
                ne.jsxs)(_.default, {
                    align: "end",
                    children: [(0,
                    ne.jsx)(gn, {
                        className: "m-right-2",
                        fieldErrors: f,
                        i18nKey: Xo("accordionLabels.hasError")
                    }), (0,
                    ne.jsx)(mn, {
                        className: "m-right-2",
                        fieldWarnings: C,
                        i18nKey: Xo("accordionLabels.hasWarning")
                    }), (0,
                    ne.jsx)(At.default, {
                        matchContentWidth: !0,
                        children: (0,
                        ne.jsx)(p.default, {
                            message: Xo("accordionLabels.styleFields")
                        })
                    })]
                })
                  , y = (0,
                ne.jsxs)(_.default, {
                    align: "end",
                    children: [(0,
                    ne.jsx)(gn, {
                        className: "m-right-2",
                        fieldErrors: this.editorOptionsErrors,
                        i18nKey: Xo("accordionLabels.hasError")
                    }), (0,
                    ne.jsx)(p.default, {
                        message: Xo("accordionLabels.editorOptions")
                    })]
                })
                  , T = (0,
                ne.jsx)(p.default, {
                    message: Xo("accordionLabels.linkedFiles"),
                    options: {
                        fileCount: o.otherAssets.length + o.cssAssets.length + o.jsAssets.length
                    }
                })
                  , x = (0,
                ne.jsx)(p.default, {
                    message: Xo("accordionLabels.tags")
                });
                return t ? s === cs.STYLE ? this.renderStyleFields() : this.renderFields() : a ? [(0,
                ne.jsx)(Ut.default, {
                    actions: this.renderFieldsDropdown(),
                    defaultOpen: !0,
                    titleText: E,
                    onOpenChange: this.onOpenChange(fs.FIELDS),
                    open: this.getIsOpen(fs.FIELDS),
                    children: this.renderFields()
                }, "fields")] : [this.renderGlobalAndSmartContentAccordion(), (0,
                ne.jsx)(Ut.default, {
                    actions: this.renderFieldsDropdown(),
                    defaultOpen: !this.props.isGlobal,
                    titleText: E,
                    onOpenChange: this.onOpenChange(fs.FIELDS),
                    open: this.getIsOpen(fs.FIELDS),
                    children: this.renderFields()
                }, "fields"), r && (0,
                ne.jsxs)(Ut.default, {
                    fieldType: "style",
                    actions: this.renderStyleFieldsDropdown(),
                    defaultOpen: !this.props.isGlobal,
                    titleText: O,
                    onOpenChange: this.onOpenChange(fs.STYLE_FIELDS),
                    open: this.getIsOpen(fs.STYLE_FIELDS),
                    children: [this.renderStyleTabEditControls(), this.renderStyleFields()]
                }, "style-fields"), (0,
                ne.jsx)(Ut.default, {
                    titleText: y,
                    onOpenChange: this.onOpenChange(fs.EDITOR_OPTIONS),
                    open: this.getIsOpen(fs.EDITOR_OPTIONS),
                    children: (0,
                    ne.jsx)(Ti, {
                        customWidgetId: e,
                        isReadOnly: n,
                        updateCustomWidget: i,
                        revisionId: l,
                        moduleErrors: this.editorOptionsErrors,
                        inlineHelpText: u
                    })
                }, "editor-options"), (0,
                ne.jsx)(Ut.default, {
                    actions: this.renderLinkedFilesHelpLink(),
                    titleText: T,
                    onOpenChange: this.onOpenChange(fs.LINKED_FILES),
                    open: this.getIsOpen(fs.LINKED_FILES),
                    children: (0,
                    ne.jsx)(ri, {
                        customWidgetId: e,
                        isReadOnly: n,
                        updateCustomWidget: i,
                        revisionId: l
                    })
                }, "linked-files"), (0,
                ne.jsx)(Ut.default, {
                    titleText: x,
                    onOpenChange: this.onOpenChange([fs.TAGS]),
                    open: this.getIsOpen(fs.TAGS),
                    children: (0,
                    ne.jsx)(js, {
                        customWidgetCategories: this.props.customWidgetCategories,
                        customWidgetTags: this.props.customWidgetTags,
                        isModuleCategoriesUngated: d,
                        isReadOnly: n,
                        onCategoriesChange: this.onCategoriesChange,
                        onTagsChange: this.onTagsChange
                    })
                }, "tags"), this.renderFieldTranslations(), (0,
                ne.jsx)(Ut.default, {
                    titleText: (0,
                    h.default)(Xo("accordionLabels.moduleSnippet")),
                    onOpenChange: this.onOpenChange(fs.SNIPPET),
                    open: this.getIsOpen(fs.SNIPPET),
                    children: (0,
                    ne.jsx)(io, {
                        customWidgetId: this.props.customWidgetId,
                        customWidgetLabel: this.props.customWidgetLabel,
                        customWidgetPath: this.props.customWidgetPath,
                        moduleId: this.props.moduleId
                    })
                }, "snippet")]
            }
            renderGroupControls() {
                const {customWidgetId: e, isFieldGroupingActive: t, isV1: s} = this.props;
                return !t || s ? null : (0,
                ne.jsx)(kt.default, {
                    flush: !0,
                    children: (0,
                    ne.jsx)(Gn, {
                        customWidgetId: e
                    })
                })
            }
            render() {
                return (0,
                ne.jsx)(_t.default, {
                    className: "main-sidebar-container",
                    breadcrumbsContent: this.renderBreadcrumbs(),
                    contentComponent: Qo,
                    children: (0,
                    ne.jsxs)(Gt.default, {
                        className: "main-sidebar-controls",
                        children: [this.renderNameLabel(), this.renderEmailV3RenderingToggle(), this.renderGroupControls(), this.renderAccordions()]
                    })
                })
            }
        }
        td.propTypes = {
            assets: a().object.isRequired,
            createField: a().func.isRequired,
            createFieldGroup: a().func.isRequired,
            isGlobal: a().bool.isRequired,
            customWidgetLabel: a().string.isRequired,
            customWidgetTags: a().array.isRequired,
            customWidgetCategories: a().array.isRequired,
            customWidgetId: u.default.customWidgetId.isRequired,
            fieldCreateOptions: a().object.isRequired,
            fieldsErrors: a().object.isRequired,
            fieldsWarnings: a().object.isRequired,
            moduleErrors: a().object.isRequired,
            moduleId: a().number,
            isFieldGroupingActive: a().bool.isRequired,
            fields: a().arrayOf(a().instanceOf(bt.default)).isRequired,
            styleFields: a().instanceOf(bt.default),
            isModuleCategoriesUngated: a().bool,
            isModuleStyleFieldsUngated: a().bool,
            isEmailOrAnyType: a().bool.isRequired,
            isReadOnly: a().bool.isRequired,
            toggleFieldGrouping: a().func.isRequired,
            fieldType: a().string,
            updateCustomWidget: a().func.isRequired,
            saveAccordionState: a().func.isRequired,
            accordionStates: a().object.isRequired,
            revisionId: a().number,
            customWidgetIcon: a().string,
            isV1: a().bool.isRequired,
            customWidgetPath: a().string.isRequired,
            hasGlobalContentEditorAccess: a().bool,
            customWidgetInlineHelpText: a().string
        };
        const sd = Object.freeze([]);
        function id() {
            const e = P.makeGetCustomWidgetBufferContentFields()
              , t = P.makeGetCustomWidgetBufferStyleFields()
              , s = P.makeGetCustomWidgetBuffer()
              , i = P.makeGetAssets()
              , n = P.makeGetIsEmailOrAnyType()
              , o = P.makeGetIsReadOnly();
            return (d, r) => {
                const l = s(d, r)
                  , a = N.getIsEditingGlobalContent(d, r)
                  , {isActive: u, fieldType: c} = N.getFieldGrouping(d, r);
                return {
                    assets: i(d, r),
                    isBufferLoaded: !!l,
                    customWidgetIcon: l ? l.icon : null,
                    customWidgetId: r.customWidgetId,
                    moduleId: l ? l.moduleId : null,
                    customWidgetLabel: l ? l.name : "",
                    isGlobal: !!l && l.global,
                    customWidgetCategories: l ? l.categories : sd,
                    customWidgetTags: l ? l.contentTags : sd,
                    isV1: !!l && 1 === l.schemaVersion,
                    fields: e(d, r),
                    styleFields: t(d, r),
                    isModuleCategoriesUngated: (0,
                    O.getIsModuleCategoriesUngated)(d),
                    isModuleStyleFieldsUngated: (0,
                    O.getIsModuleStyleFieldsUngated)(d),
                    fieldsErrors: P.getFieldsErrors(d, r),
                    fieldsWarnings: P.getFieldsWarnings(d, r),
                    hasGlobalContentEditorAccess: (0,
                    w.getHasGlobalContentEditorAccess)(d),
                    isFieldGroupingActive: !!u,
                    fieldType: c,
                    isReadOnly: (0,
                    w.getUserHasReadAccessOnly)(d) || o(d, r) || a,
                    moduleErrors: P.getModuleErrors(d, r),
                    accordionStates: N.getAccordionStates(d, r),
                    customWidgetPath: l ? l.path : "",
                    isEmailOrAnyType: n(d, r),
                    customWidgetInlineHelpText: l ? l.inlineHelpText : "",
                    fieldCreateOptions: N.getFieldCreateOptions(d, r)
                }
            }
        }
        const nd = {
            createField: W.createField,
            createFieldGroup: W.createFieldGroup,
            toggleFieldGrouping: A.toggleFieldGrouping,
            toggleFieldGroupingSelection: A.toggleFieldGroupingSelection,
            updateCustomWidget: W.update,
            saveAccordionState: A.saveAccordionState,
            fetchSfdcIntegrationStatus: xt
        };
        class od extends i.Component {
            constructor(...e) {
                super(...e);
                this.updateCustomWidget = e => {
                    const {customWidgetId: t, updateCustomWidget: s} = this.props;
                    s(t, e)
                }
                ;
                this.saveAccordionState = (e, t=!1) => {
                    this.props.saveAccordionState(this.props.customWidgetId, e, t)
                }
            }
            componentDidMount() {
                this.props.fetchSfdcIntegrationStatus()
            }
            render() {
                const {accordionStates: e, assets: t, createField: s, createFieldGroup: i, customWidgetIcon: n, customWidgetId: o, customWidgetPath: d, customWidgetCategories: r, fieldCreateOptions: l, fields: a, styleFields: u, isModuleCategoriesUngated: c, isModuleStyleFieldsUngated: p, hasGlobalContentEditorAccess: h, isFieldGroupingActive: g, fieldType: m, isReadOnly: f, isV1: b, moduleId: C, revisionId: E, toggleFieldGrouping: O, toggleFieldGroupingSelection: y, isEmailOrAnyType: T, fieldsErrors: x, fieldsWarnings: j, moduleErrors: I, customWidgetInlineHelpText: R} = this.props;
                return this.props.isBufferLoaded ? (0,
                ne.jsx)(td, {
                    accordionStates: e,
                    assets: t,
                    createField: s,
                    createFieldGroup: i,
                    customWidgetIcon: n,
                    customWidgetId: o,
                    customWidgetLabel: this.props.customWidgetLabel,
                    customWidgetPath: d,
                    customWidgetCategories: r,
                    customWidgetTags: this.props.customWidgetTags,
                    fieldCreateOptions: l,
                    fields: a,
                    styleFields: u,
                    isModuleCategoriesUngated: c,
                    isModuleStyleFieldsUngated: p,
                    fieldsErrors: x,
                    fieldsWarnings: j,
                    hasGlobalContentEditorAccess: h,
                    isFieldGroupingActive: g,
                    fieldType: m,
                    isGlobal: this.props.isGlobal,
                    isReadOnly: f,
                    isV1: b,
                    moduleErrors: I,
                    moduleId: C,
                    revisionId: E,
                    toggleFieldGrouping: O,
                    toggleFieldGroupingSelection: y,
                    updateCustomWidget: this.updateCustomWidget,
                    saveAccordionState: this.saveAccordionState,
                    isEmailOrAnyType: T,
                    customWidgetInlineHelpText: R
                }) : null
            }
        }
        od.propTypes = {
            assets: a().object.isRequired,
            createField: a().func.isRequired,
            createFieldGroup: a().func.isRequired,
            customWidgetId: u.default.customWidgetId.isRequired,
            moduleId: a().number,
            isFieldGroupingActive: a().bool.isRequired,
            fieldCreateOptions: a().object.isRequired,
            fieldType: a().string,
            fields: a().arrayOf(a().instanceOf(bt.default)).isRequired,
            styleFields: a().instanceOf(bt.default),
            isModuleCategoriesUngated: a().bool,
            isModuleStyleFieldsUngated: a().bool,
            isReadOnly: a().bool.isRequired,
            toggleFieldGrouping: a().func.isRequired,
            toggleFieldGroupingSelection: a().func.isRequired,
            revisionId: a().number,
            updateCustomWidget: a().func.isRequired,
            saveAccordionState: a().func.isRequired,
            accordionStates: a().object.isRequired,
            customWidgetIcon: a().string,
            isBufferLoaded: a().bool.isRequired,
            isGlobal: a().bool.isRequired,
            customWidgetLabel: a().string.isRequired,
            customWidgetCategories: a().array.isRequired,
            customWidgetTags: a().array.isRequired,
            fetchSfdcIntegrationStatus: a().func.isRequired,
            isV1: a().bool.isRequired,
            customWidgetPath: a().string.isRequired,
            hasGlobalContentEditorAccess: a().bool,
            isEmailOrAnyType: a().bool.isRequired,
            fieldsErrors: a().object.isRequired,
            fieldsWarnings: a().object.isRequired,
            moduleErrors: a().object.isRequired,
            customWidgetInlineHelpText: a().string
        };
        od.defaultProps = {
            accordionStates: {}
        };
        var dd = (0,
        d.connect)(id, nd)(od)
          , rd = s(1497)
          , ld = s(576)
          , ad = s(1417);
        const ud = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.editorOptions.${e}`
          , cd = ({editField: e, field: t}) => {
            const s = t => {
                e({
                    [wt.ALLOW_CUSTOM_BORDER_SIDES]: t.target.checked
                })
            }
              , {type: i} = t
              , n = t[wt.ALLOW_CUSTOM_BORDER_SIDES];
            return i !== Gi.BORDER ? null : (0,
            ne.jsxs)(ld.default, {
                checked: n,
                onChange: s,
                children: [(0,
                ne.jsx)(xi.default, {
                    className: "p-top-0 p-right-1",
                    children: (0,
                    ne.jsx)(p.default, {
                        message: ud("allowCustomBorderSides")
                    })
                }), (0,
                ne.jsx)(ad.default, {
                    title: (0,
                    ne.jsx)(p.default, {
                        message: ud("allowCustomBorderSidesTooltip")
                    })
                })]
            })
        }
        ;
        cd.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired
        };
        var pd = cd;
        const hd = (0,
        Ei.default)(Ci)
          , gd = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.editorOptions.${e}`;
        class md extends i.Component {
            constructor(...e) {
                super(...e);
                this.onHelpTextChange = e => {
                    this.props.editField({
                        help_text: e.target.value
                    })
                }
                ;
                this.onInlineHelpTextChange = e => {
                    this.props.editField({
                        [wt.INLINE_HELP_TEXT]: e.target.value
                    })
                }
                ;
                this.onRequiredChange = e => {
                    this.props.editField({
                        [wt.REQUIRED]: e.target.checked
                    })
                }
                ;
                this.onLockedChange = e => {
                    this.props.editField({
                        [wt.LOCKED]: e.target.checked
                    })
                }
                ;
                this.onExpandedChange = e => {
                    this.props.editField({
                        [wt.EXPANDED]: e.target.checked
                    })
                }
                ;
                this.renderRequiredToggle = () => {
                    const {field: e, readOnly: t} = this.props;
                    return e.type === Gi.GROUP ? null : (0,
                    ne.jsxs)("div", {
                        children: [(0,
                        ne.jsx)(xi.default, {
                            children: (0,
                            ne.jsx)(p.default, {
                                message: gd("requiredLabel")
                            })
                        }), (0,
                        ne.jsx)(Wo.default, {
                            checked: e[wt.REQUIRED],
                            "data-test-id": "module-field-editor-options-required-toggle",
                            onChange: this.onRequiredChange,
                            size: "extra-small",
                            readOnly: t
                        })]
                    })
                }
                ;
                this.renderLockedToggle = () => this.props.isGlobal ? null : (0,
                ne.jsxs)("div", {
                    children: [(0,
                    ne.jsx)(xi.default, {
                        children: (0,
                        ne.jsx)(p.default, {
                            message: gd("lockedLabel")
                        })
                    }), (0,
                    ne.jsx)(Wo.default, {
                        checked: this.props.field[wt.LOCKED],
                        "data-test-id": "module-field-editor-options-locked-toggle",
                        onChange: this.onLockedChange,
                        size: "extra-small",
                        readOnly: this.props.readOnly
                    })]
                });
                this.renderExpandedToggle = () => {
                    const {field: e, readOnly: t} = this.props;
                    if (e.type !== Gi.GROUP)
                        return null;
                    return e.children.some((e => e.type === Gi.GROUP)) ? null : (0,
                    ne.jsxs)("div", {
                        children: [(0,
                        ne.jsx)(xi.default, {
                            children: (0,
                            ne.jsx)(p.default, {
                                message: gd("expandedLabel")
                            })
                        }), (0,
                        ne.jsx)(Wo.default, {
                            checked: e[wt.EXPANDED],
                            "data-test-id": "module-field-editor-options-expanded-toggle",
                            onChange: this.onExpandedChange,
                            size: "extra-small",
                            readOnly: t
                        })]
                    })
                }
                ;
                this.renderInlineHelpTextInput = () => {
                    const {field: e, fieldErrors: t, readOnly: s} = this.props;
                    return (0,
                    ne.jsx)(hd, {
                        counter: "down",
                        max: 400,
                        onChange: this.onInlineHelpTextChange,
                        value: e[wt.INLINE_HELP_TEXT],
                        renderInput: ({count: e, onChange: i, value: n}) => (0,
                        ne.jsx)(rs, {
                            characterCount: e,
                            "data-test-id": "module-field-editor-inline-help",
                            errors: t[wt.INLINE_HELP_TEXT],
                            label: (0,
                            ne.jsx)(p.default, {
                                message: gd("inlineHelpTextLabel")
                            }),
                            tooltip: (0,
                            ne.jsx)(p.default, {
                                message: gd("inlineHelpTextTooltip")
                            }),
                            children: (0,
                            ne.jsx)(Vt, {
                                disabled: s,
                                inputComponent: li.default,
                                minHeight: 70,
                                onChange: i,
                                value: n
                            })
                        })
                    })
                }
            }
            render() {
                const {editField: e, field: t, readOnly: s, isV1: i} = this.props
                  , n = (0,
                ne.jsx)(hd, {
                    counter: "down",
                    max: 300,
                    onChange: this.onHelpTextChange,
                    value: t.help_text,
                    renderInput: ({count: e, onChange: t, value: i}) => {
                        const n = e < 0;
                        return (0,
                        ne.jsx)(es.default, {
                            characterCount: e,
                            "data-test-id": "module-field-editor-tooltip-help",
                            error: n,
                            label: (0,
                            ne.jsx)(p.default, {
                                message: gd("helpTextLabel")
                            }),
                            tooltip: (0,
                            ne.jsx)(p.default, {
                                message: gd("helpTextTooltip")
                            }),
                            validationMessage: n && (0,
                            ne.jsx)(p.default, {
                                message: gd("helpTextLengthWarning")
                            }),
                            children: (0,
                            ne.jsx)(Vt, {
                                disabled: s,
                                inputComponent: li.default,
                                minHeight: 70,
                                onChange: t,
                                value: i
                            })
                        })
                    }
                });
                return i ? (0,
                ne.jsx)(Bt.default, {
                    children: n
                }) : (0,
                ne.jsxs)(Bt.default, {
                    children: [this.renderRequiredToggle(), this.renderLockedToggle(), this.renderExpandedToggle(), n, this.renderInlineHelpTextInput(), (0,
                    ne.jsx)(pd, {
                        editField: e,
                        field: t
                    })]
                })
            }
        }
        md.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            fieldErrors: a().object,
            isGlobal: a().bool,
            readOnly: a().bool,
            isV1: a().bool.isRequired
        };
        var fd = s(207)
          , bd = s(131)
          , Cd = s(1501)
          , Ed = s(585);
        const Od = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`;
        class yd extends i.Component {
            constructor(...e) {
                super(...e);
                this.state = {
                    invalidRegex: !1
                };
                this.onDefaultChange = e => {
                    this.props.editField({
                        [wt.DEFAULT]: e
                    })
                }
                ;
                this.onPlaceholderChange = e => {
                    this.props.editField({
                        [wt.PLACEHOLDER]: e.target.value
                    })
                }
                ;
                this.onValidationRegexChange = e => {
                    this.props.editField({
                        [wt.VALIDATION_REGEX]: e.target.value
                    })
                }
                ;
                this.onValidationErrorMessageChange = e => {
                    this.props.editField({
                        [wt.VALIDATION_ERROR_MESSAGE]: e.target.value
                    })
                }
                ;
                this.onShowEmojiPickerChange = ({target: {checked: e}}) => {
                    this.props.editField({
                        [wt.SHOW_EMOJI_PICKER]: e
                    })
                }
                ;
                this.renderValidationRegexTooltip = () => (0,
                ne.jsxs)("span", {
                    children: [(0,
                    ne.jsx)(p.default, {
                        message: Od("text.regex.helpText")
                    }), (0,
                    ne.jsx)(M.default, {
                        className: "m-left-2",
                        href: "https://www.w3schools.com/jsref/jsref_obj_regexp.asp",
                        target: "_blank",
                        children: (0,
                        ne.jsx)(p.default, {
                            message: Od("text.regex.learnMore")
                        })
                    })]
                })
            }
            render() {
                const {field: e, fieldErrors: t, readOnly: s, isV1: i} = this.props
                  , n = (0,
                ne.jsx)(rs, {
                    errors: t[wt.DEFAULT],
                    label: (0,
                    ne.jsx)(p.default, {
                        message: Od(`defaultLabels.${Gi.TEXT}`)
                    }),
                    children: (0,
                    ne.jsx)(Vt, {
                        inputComponent: Cd.default,
                        onFieldChange: this.onDefaultChange,
                        value: e[wt.DEFAULT],
                        readOnly: s,
                        placeholder: e[wt.PLACEHOLDER],
                        show_emoji_picker: e[wt.SHOW_EMOJI_PICKER],
                        allow_new_line: e[wt.ALLOW_NEW_LINE]
                    })
                });
                if (i)
                    return (0,
                    ne.jsx)("div", {
                        className: "text-content-options",
                        children: (0,
                        ne.jsx)(Bt.default, {
                            children: n
                        })
                    });
                const o = t.validation_regex ? (0,
                ne.jsx)(p.default, {
                    message: Od("text.regex.invalidRegex")
                }) : null;
                return (0,
                ne.jsx)("div", {
                    className: "text-content-options",
                    children: (0,
                    ne.jsxs)(Bt.default, {
                        children: [n, (0,
                        ne.jsx)(ts.default, {
                            label: (0,
                            ne.jsx)(p.default, {
                                message: Od("text.placeholderLabel")
                            }),
                            children: (0,
                            ne.jsx)(Mt.default, {
                                "data-test-id": "module-text-field-placeholder-input",
                                onChange: this.onPlaceholderChange,
                                value: e[wt.PLACEHOLDER],
                                disabled: s || i
                            })
                        }), (0,
                        ne.jsx)(ts.default, {
                            error: t.validation_regex,
                            label: (0,
                            ne.jsx)(p.default, {
                                message: Od("text.regex.label")
                            }),
                            tooltip: this.renderValidationRegexTooltip(),
                            tooltipPlacement: "top left",
                            validationMessage: o,
                            children: (0,
                            ne.jsx)(Ed.default, {
                                text: "/",
                                position: "start",
                                children: (0,
                                ne.jsx)(Ed.default, {
                                    text: "/",
                                    position: "end",
                                    children: (0,
                                    ne.jsx)(Mt.default, {
                                        className: "validation-regex-input",
                                        "data-test-id": "module-text-field-regex-input",
                                        onChange: this.onValidationRegexChange,
                                        placeholder: (0,
                                        h.default)(Od("text.regex.placeholder")),
                                        value: e[wt.VALIDATION_REGEX],
                                        disabled: s || i
                                    })
                                })
                            })
                        }), (0,
                        ne.jsx)(ts.default, {
                            label: (0,
                            ne.jsx)(p.default, {
                                message: Od("text.validationErrorMessage.label")
                            }),
                            tooltip: (0,
                            ne.jsx)(p.default, {
                                message: Od("text.validationErrorMessage.tooltip")
                            }),
                            children: (0,
                            ne.jsx)(Mt.default, {
                                disabled: s || i,
                                onChange: this.onValidationErrorMessageChange,
                                value: e[wt.VALIDATION_ERROR_MESSAGE]
                            })
                        }), (0,
                        ne.jsx)(ts.default, {
                            label: (0,
                            ne.jsx)(p.default, {
                                message: Od("text.emoji.label")
                            }),
                            children: (0,
                            ne.jsx)(Wo.default, {
                                "data-test-id": "module-text-field-emoji-picker",
                                size: "extra-small",
                                onChange: this.onShowEmojiPickerChange,
                                checked: e[wt.SHOW_EMOJI_PICKER],
                                disabled: s || i
                            })
                        })]
                    })
                })
            }
        }
        yd.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            fieldErrors: a().object,
            readOnly: a().bool,
            isV1: a().bool.isRequired
        };
        yd.defaultProps = {
            fieldErrors: {}
        };
        var Td = s(1705);
        const xd = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`
          , jd = (e, t) => ({
            modulePath: (0,
            P.makeGetModulePath)()(e, t)
        });
        class Id extends i.PureComponent {
            constructor(...e) {
                super(...e);
                this.onDefaultChange = e => {
                    this.props.editField({
                        [wt.DEFAULT]: e
                    })
                }
            }
            render() {
                const {field: e, fieldErrors: t, modulePath: s, readOnly: i} = this.props;
                return (0,
                ne.jsx)(rs, {
                    errors: t[wt.DEFAULT],
                    label: me.default.text(xd(`defaultLabels.${Gi.RICH_TEXT}`)),
                    children: (0,
                    ne.jsx)(Vt, {
                        enabled_features: e[wt.ENABLED_FEATURES],
                        id: e.id,
                        inputComponent: Td.default,
                        modulePath: s,
                        onFieldChange: this.onDefaultChange,
                        readOnly: i,
                        shouldFetchCustomFonts: !0,
                        value: e[wt.DEFAULT]
                    })
                })
            }
        }
        Id.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            fieldErrors: a().object,
            modulePath: a().string.isRequired,
            readOnly: a().bool
        };
        Id.defaultProps = {
            fieldErrors: {}
        };
        var Rd = (0,
        d.connect)(jd)(Id)
          , Sd = s(1428)
          , Fd = s(1425)
          , Ld = s(212);
        const vd = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`;
        class Wd extends i.Component {
            constructor(...e) {
                super(...e);
                this.onDefaultChange = e => {
                    this.props.editField({
                        [wt.DEFAULT]: e
                    })
                }
                ;
                this.onDisplayChange = e => {
                    this.props.editField({
                        [wt.DISPLAY]: e.target.name
                    })
                }
            }
            renderDisplayOptions() {
                const {field: e} = this.props
                  , t = Object.values(Ld.default[Gi.BOOLEAN]).map((t => {
                    const s = e[wt.DISPLAY] === t;
                    return (0,
                    ne.jsx)(Sd.default, {
                        checked: s,
                        inline: !0,
                        name: t,
                        onChange: this.onDisplayChange,
                        size: "small",
                        className: "content-options-radio-input",
                        children: (0,
                        h.default)(vd(`display.displayTypeLabels.${t}`))
                    }, t)
                }
                ));
                return (0,
                ne.jsx)(ts.default, {
                    label: (0,
                    ne.jsx)(p.default, {
                        message: vd("display.label")
                    }),
                    children: (0,
                    ne.jsx)(i.Fragment, {
                        children: t
                    })
                })
            }
            render() {
                const {field: e, readOnly: t} = this.props;
                return (0,
                ne.jsxs)(i.Fragment, {
                    children: [this.renderDisplayOptions(), (0,
                    ne.jsx)(ts.default, {
                        label: (0,
                        ne.jsx)(p.default, {
                            message: vd(`${Gi.BOOLEAN}.label`)
                        }),
                        children: (0,
                        ne.jsx)(Vt, {
                            className: "dm-boolean-field",
                            display: e[wt.DISPLAY],
                            inputComponent: Fd.default,
                            label: (0,
                            h.default)(vd(`defaultLabels.${Gi.BOOLEAN}`)),
                            onFieldChange: this.onDefaultChange,
                            readOnly: t,
                            value: e[wt.DEFAULT]
                        })
                    })]
                })
            }
        }
        Wd.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            readOnly: a().bool
        };
        var Ad = s(102)
          , Dd = s(1427)
          , Pd = s(130)
          , Nd = s(403);
        class _d extends i.Component {
            render() {
                const {children: e, className: t, name: s, onClick: i, readOnly: n} = this.props;
                return (0,
                ne.jsxs)(G.default, {
                    className: t,
                    disabled: n,
                    onClick: i,
                    use: "link",
                    children: [(0,
                    ne.jsx)(Qs.default, {
                        color: Pi.CALYPSO_DARK,
                        name: s
                    }), e]
                })
            }
        }
        _d.propTypes = {
            children: a().node,
            className: a().string,
            name: (0,
            Nd.getIconNamePropType)().isRequired,
            onClick: a().func,
            readOnly: a().bool
        };
        _d.defaultProps = {
            children: null,
            className: null,
            onClick: ge.default
        };
        var qd = s(358)
          , Ud = s(396)
          , kd = s(804)
          , Gd = s(565);
        const Md = ["children", "className", "closeable", "CloseButton", "closeButtonProps", "closeButtonTooltip", "connectDragPreview", "connectDragSource", "connectDropTarget", "draggable", "DragHandle", "onClose"]
          , Bd = (e, t, s) => {
            const i = (0,
            ne.jsx)("span", {
                className: "private-movable-group__grippie"
            })
              , n = (0,
            qd.callIfPossible)(e, i) || i;
            return (0,
            ne.jsx)(t, {
                size: "small" === s.size ? "small" : void 0,
                children: n
            })
        }
        ;
        class wd extends i.Component {
            render() {
                const e = this.props
                  , {children: t, className: s, closeable: i, CloseButton: n, closeButtonProps: o, closeButtonTooltip: d, connectDragPreview: r, connectDragSource: l, connectDropTarget: a, draggable: u, DragHandle: c, onClose: p} = e
                  , h = (0,
                It.default)(e, Md);
                return (0,
                ne.jsx)(Gd.FieldsetContextConsumer, {
                    children: e => {
                        const g = (0,
                        ne.jsxs)("div", Object.assign({}, h, {
                            className: be()("private-moveable-group", s),
                            children: [u && Bd(l, c, e), (0,
                            ne.jsx)("div", {
                                className: "private-moveable-group__inner has--horizontal-spacing",
                                children: t
                            }), i && (0,
                            ne.jsx)(Hs.default, {
                                title: d,
                                children: (0,
                                ne.jsx)(n, Object.assign({
                                    className: "private-moveable-group__close",
                                    onClick: p,
                                    use: "transparent"
                                }, o, {
                                    children: (0,
                                    ne.jsx)(Qs.default, {
                                        name: "delete"
                                    })
                                }))
                            })]
                        }))
                          , m = (0,
                        qd.callIfPossible)(r, g) || g;
                        return (0,
                        qd.callIfPossible)(a, m) || m
                    }
                })
            }
        }
        wd.displayName = "UIMoveableGroup";
        wd.defaultProps = {
            closeable: !1,
            CloseButton: kd.default,
            draggable: !0,
            DragHandle: ki.default
        };
        wd.propTypes = {
            children: a().node,
            closeable: a().bool.isRequired,
            CloseButton: a().elementType.isRequired,
            closeButtonProps: a().object,
            closeButtonTooltip: Hs.default.propTypes.title,
            draggable: a().bool.isRequired,
            DragHandle: (0,
            Ud.getComponentPropType)(ki.default).isRequired,
            onClose: a().func,
            connectDragSource: a().func,
            connectDropTarget: a().func,
            connectDragPreview: a().func
        };
        const Hd = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.choice.${e}`;
        let Vd = null;
        const $d = (0,
        tn.DragSource)(sn.CUSTOM_WIDGET_CHOICE_FIELD_OPTION, {
            beginDrag(e) {
                Vd = e.index;
                return {
                    index: e.index
                }
            },
            isDragging(e) {
                return e.index === Vd
            }
        }, ( (e, t) => ({
            connectDragSource: e.dragSource(),
            connectDragPreview: e.dragPreview(),
            isDragging: t.isDragging()
        })))
          , Yd = (0,
        tn.DropTarget)(sn.CUSTOM_WIDGET_CHOICE_FIELD_OPTION, {
            hover: (0,
            c.throttle)(( (e, t) => {
                Vd = e.index;
                const s = t.getItem();
                if (s && e.index !== s.index) {
                    e.onMove(s.index, e.index);
                    t.getItem().index = e.index
                }
            }
            ), 250)
        }, (e => ({
            connectDropTarget: e.dropTarget()
        })))
          , zd = (0,
        i.forwardRef)(( (e, t) => {
            const {value: s, label: i, deletable: n, duplicateError: o, onDelete: d, onLabelChange: r, onValueChange: l, connectDropTarget: a, connectDragSource: u, connectDragPreview: c, isDragging: p, onLabelBlur: h, readOnly: g} = e
              , m = o ? [o] : []
              , f = "choice-option" + (p ? " is--dragging" : "");
            return (0,
            ne.jsxs)(wd, {
                className: f,
                closeable: n,
                connectDragPreview: c,
                connectDragSource: u,
                connectDropTarget: a,
                draggable: !g,
                onClose: d,
                ref: t,
                children: [(0,
                ne.jsx)(es.default, {
                    "aria-label": "label",
                    children: (0,
                    ne.jsx)(Vt, {
                        className: "choice-label-input",
                        onChange: r,
                        placeholder: me.default.text(Hd("placeholders.label")),
                        value: i,
                        onBlur: h,
                        disabled: g
                    })
                }), (0,
                ne.jsx)(rs, {
                    "aria-label": "value",
                    errors: m,
                    children: (0,
                    ne.jsx)(Vt, {
                        className: "is--code",
                        onChange: l,
                        placeholder: me.default.text(Hd("placeholders.value")),
                        value: s,
                        disabled: g
                    })
                })]
            })
        }
        ));
        zd.propTypes = {
            connectDragSource: a().func.isRequired,
            connectDropTarget: a().func.isRequired,
            connectDragPreview: a().func.isRequired,
            deletable: a().bool,
            duplicateError: a().object,
            isDragging: a().bool.isRequired,
            label: a().string,
            onDelete: a().func.isRequired,
            onLabelChange: a().func.isRequired,
            onValueChange: a().func.isRequired,
            value: a().string,
            onLabelBlur: a().func.isRequired,
            readOnly: a().bool
        };
        zd.defaultProps = {
            closeable: null,
            duplicateError: null,
            label: "",
            value: ""
        };
        var Kd = (0,
        q.compose)($d, Yd)(zd);
        const Jd = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`;
        function Xd(e) {
            return (0,
            Ad.isNullOrUndefined)(e) ? "" : e.asMutable ? e.asMutable() : e
        }
        class Zd extends i.Component {
            constructor(...e) {
                super(...e);
                this.state = {
                    newChoiceAdded: !1
                };
                this.setChoiceContainerRef = e => {
                    this._choiceContainer = e
                }
                ;
                this.focusLastChoice = () => {
                    const e = this._choiceContainer.children;
                    e && e[e.length - 1].querySelector(".choice-label-input").focus()
                }
                ;
                this.onDefaultChange = e => {
                    this.props.editField({
                        default: e
                    })
                }
                ;
                this.onDeleteChoice = e => {
                    const {field: t, editField: s} = this.props
                      , {choices: i} = t;
                    if (!i[e] || 1 === i.length)
                        return;
                    const n = i[e][0]
                      , o = i.slice(0, e).concat(i.slice(e + 1));
                    let d = t[wt.DEFAULT] === n ? o[0][0] : t[wt.DEFAULT];
                    t[wt.MULTIPLE] && Array.isArray(t[wt.DEFAULT]) && t[wt.DEFAULT].length && (d = t[wt.DEFAULT].filter((e => e !== n)));
                    s({
                        [wt.CHOICES]: o,
                        [wt.DEFAULT]: d
                    })
                }
                ;
                this.onChoiceLabelChange = (e, t) => {
                    const {field: s, editField: i} = this.props
                      , {newChoiceAdded: n} = this.state;
                    i({
                        choices: s.choices.map(( (s, i) => {
                            if (i === e) {
                                const e = me.default.SafeString(t.target.value).string;
                                return [n ? (0,
                                zt.toSnakeCase)(e) : s[0], e]
                            }
                            return s
                        }
                        ))
                    })
                }
                ;
                this.onChoiceLabelBlur = () => {
                    this.setState({
                        newChoiceAdded: !1
                    })
                }
                ;
                this.onChoiceValueChange = (e, t) => {
                    const {field: s, editField: i} = this.props
                      , {choices: n} = s
                      , o = t.target.value
                      , d = n[e][0] === s.default;
                    let r = s[wt.DEFAULT];
                    const l = [...n];
                    l[e] = [o, n[e][1]];
                    s[wt.MULTIPLE] && Array.isArray(s[wt.DEFAULT]) && s[wt.DEFAULT].length && (r = s[wt.DEFAULT].map((t => t === n[e][0] ? o : t)));
                    d && (r = o);
                    i({
                        [wt.CHOICES]: l,
                        [wt.DEFAULT]: r
                    })
                }
                ;
                this.onAddChoice = () => {
                    const {field: {choices: e}, editField: t} = this.props;
                    t({
                        [wt.CHOICES]: e.concat([["", ""]])
                    });
                    this.setState({
                        newChoiceAdded: !0
                    })
                }
                ;
                this.onMoveChoice = (e, t, s=!1) => {
                    const {field: {choices: i}, editField: n} = this.props
                      , o = i[e];
                    let d = i.slice(0, e).concat(i.slice(e + 1));
                    d = d.slice(0, t).concat([o], d.slice(t));
                    n({
                        [wt.CHOICES]: d
                    }, s)
                }
                ;
                this.onPlaceholderChange = e => {
                    this.props.editField({
                        [wt.PLACEHOLDER]: e.target.value
                    })
                }
                ;
                this.onMultipleChange = e => {
                    const {editField: t, field: s} = this.props
                      , i = e.target.checked
                      , n = {
                        [wt.MULTIPLE]: i
                    };
                    i && s[wt.REORDERING_ENABLED] && s[wt.DISPLAY] !== Ld.default[Gi.CHOICE].SELECT ? n[wt.DISPLAY] = Ld.default[Gi.CHOICE].SELECT : i && s[wt.DISPLAY] === Ld.default[Gi.CHOICE].RADIO ? n[wt.DISPLAY] = Ld.default[Gi.CHOICE].CHECKBOX : i || s[wt.DISPLAY] !== Ld.default[Gi.CHOICE].CHECKBOX || (n[wt.DISPLAY] = Ld.default[Gi.CHOICE].RADIO);
                    i && !Array.isArray(s[wt.DEFAULT]) ? n[wt.DEFAULT] = (0,
                    Ad.isNullOrUndefined)(s[wt.DEFAULT]) || "" === s[wt.DEFAULT] ? [] : [s[wt.DEFAULT]] : !i && Array.isArray(s[wt.DEFAULT]) && (n[wt.DEFAULT] = void 0 === s[wt.DEFAULT][0] ? "" : s[wt.DEFAULT][0]);
                    t(n)
                }
                ;
                this.onReorderingChange = e => {
                    const {editField: t, field: s} = this.props
                      , i = e.target.checked
                      , n = {
                        [wt.REORDERING_ENABLED]: i
                    };
                    i && s[wt.DISPLAY] === Ld.default[Gi.CHOICE].CHECKBOX && (n[wt.DISPLAY] = Ld.default[Gi.CHOICE].SELECT);
                    t(n)
                }
                ;
                this.onDisplayChange = e => {
                    this.props.editField({
                        [wt.DISPLAY]: e.target.name
                    })
                }
                ;
                this.getChoiceValueDuplicates = () => (this.props.fieldErrors[wt.CHOICES] || []).reduce(( (e, t) => {
                    const {type: s, data: i} = t;
                    return s === Pd.MODULE_VALIDATION_CHOICE_DUP_VALUE ? Object.assign({}, e, {
                        [i.value]: t
                    }) : e
                }
                ), {});
                this.getNonDuplicateErrors = () => (this.props.fieldErrors[wt.CHOICES] || []).filter(( ({type: e}) => e !== Pd.MODULE_VALIDATION_CHOICE_DUP_VALUE))
            }
            componentDidUpdate() {
                this.state.newChoiceAdded && this.focusLastChoice()
            }
            renderChoices() {
                const {field: {choices: e}, readOnly: t} = this.props
                  , s = this.getChoiceValueDuplicates()
                  , i = e.length > 2 && !t;
                return e.map(( (e, n) => {
                    const [o,d] = e
                      , r = s[o];
                    return (0,
                    ne.jsx)(Kd, {
                        deletable: i,
                        duplicateError: r,
                        index: n,
                        label: d,
                        onDelete: (...e) => this.onDeleteChoice(n, ...e),
                        onLabelChange: (...e) => this.onChoiceLabelChange(n, ...e),
                        onMove: this.onMoveChoice,
                        onValueChange: (...e) => this.onChoiceValueChange(n, ...e),
                        value: o,
                        onLabelBlur: this.onChoiceLabelBlur,
                        readOnly: t
                    }, n)
                }
                ))
            }
            renderMultipleToggle() {
                const {field: e, readOnly: t} = this.props;
                return (0,
                ne.jsx)(ld.default, {
                    checked: e[wt.MULTIPLE],
                    className: "p-y-8",
                    onChange: this.onMultipleChange,
                    readOnly: t,
                    size: "small",
                    children: (0,
                    ne.jsx)(p.default, {
                        message: Jd("choice.labels.allowMultiple")
                    })
                })
            }
            renderReorderingToggle() {
                const {field: e, readOnly: t} = this.props;
                return e[wt.MULTIPLE] ? (0,
                ne.jsx)(ld.default, {
                    checked: e[wt.REORDERING_ENABLED],
                    className: "p-bottom-6",
                    onChange: this.onReorderingChange,
                    readOnly: t,
                    size: "small",
                    children: (0,
                    ne.jsx)(p.default, {
                        message: Jd("choice.labels.allowReordering")
                    })
                }) : null
            }
            renderDisplayOptions() {
                const {field: e} = this.props
                  , t = e[wt.MULTIPLE]
                  , s = Object.values(Ld.default[Gi.CHOICE]).map((s => {
                    const i = e[wt.DISPLAY] === s;
                    let n;
                    s === Ld.default[Gi.CHOICE].RADIO && t && (n = !0);
                    s !== Ld.default[Gi.CHOICE].CHECKBOX || t && !e[wt.REORDERING_ENABLED] || (n = !0);
                    return s === Ld.default[Gi.CHOICE].BUTTONS ? null : (0,
                    ne.jsx)(Sd.default, {
                        checked: i,
                        className: "content-options-radio-input",
                        disabled: n,
                        inline: !0,
                        name: s,
                        onChange: this.onDisplayChange,
                        size: "small",
                        children: (0,
                        h.default)(Jd(`display.displayTypeLabels.${s}`))
                    }, s)
                }
                ));
                return (0,
                ne.jsx)(ts.default, {
                    label: (0,
                    ne.jsx)(p.default, {
                        message: Jd("display.label")
                    }),
                    children: (0,
                    ne.jsx)(i.Fragment, {
                        children: s
                    })
                })
            }
            render() {
                const e = this.getNonDuplicateErrors()
                  , {field: t, isV1: s, readOnly: i} = this.props
                  , n = (0,
                ne.jsxs)(_.default, {
                    children: [(0,
                    ne.jsx)("span", {
                        className: "m-right-1",
                        children: (0,
                        ne.jsx)(p.default, {
                            message: Jd("choice.labels.choices")
                        })
                    }), (0,
                    ne.jsx)(_i.default, {
                        title: (0,
                        ne.jsx)(Nt.default, {
                            children: (0,
                            ne.jsx)(p.default, {
                                message: Jd("choice.htmlUsageTooltip")
                            })
                        }),
                        color: Pi.BATTLESHIP,
                        tooltipPlacement: "top"
                    })]
                })
                  , o = (0,
                ne.jsxs)(_.default, {
                    children: [(0,
                    ne.jsx)("span", {
                        className: "m-right-1",
                        children: (0,
                        ne.jsx)(p.default, {
                            message: Jd("choice.labels.placeholder")
                        })
                    }), (0,
                    ne.jsx)(_i.default, {
                        title: (0,
                        ne.jsx)(Nt.default, {
                            children: (0,
                            ne.jsx)(p.default, {
                                message: Jd("choice.placeholderTooltip")
                            })
                        }),
                        color: Pi.BATTLESHIP,
                        tooltipProps: {
                            placement: "top"
                        }
                    })]
                })
                  , d = !s && (0,
                ne.jsx)(ts.default, {
                    label: o,
                    children: (0,
                    ne.jsx)(Mt.default, {
                        onChange: this.onPlaceholderChange,
                        value: t[wt.PLACEHOLDER],
                        disabled: i
                    })
                });
                return (0,
                ne.jsx)("div", {
                    className: "choice-content-options",
                    children: (0,
                    ne.jsxs)(Bt.default, {
                        children: [(0,
                        ne.jsx)(ts.default, {
                            label: (0,
                            h.default)(Jd("choice.labels.default")),
                            children: (0,
                            ne.jsx)(Dd.default, {
                                choices: t[wt.CHOICES],
                                display: t[wt.DISPLAY],
                                multiple: t[wt.MULTIPLE],
                                onFieldChange: this.onDefaultChange,
                                placeholder: t[wt.PLACEHOLDER],
                                preset: t[wt.PRESET],
                                readOnly: i,
                                reordering_enabled: t[wt.REORDERING_ENABLED],
                                required: !1,
                                value: Xd(t[wt.DEFAULT])
                            })
                        }), this.renderMultipleToggle(), this.renderReorderingToggle(), this.renderDisplayOptions(), (0,
                        ne.jsx)(rs, {
                            errors: e,
                            label: n,
                            children: (0,
                            ne.jsxs)("div", {
                                children: [(0,
                                ne.jsx)("div", {
                                    ref: this.setChoiceContainerRef,
                                    children: this.renderChoices()
                                }), (0,
                                ne.jsx)(_d, {
                                    className: "m-top-3",
                                    name: "add",
                                    onClick: this.onAddChoice,
                                    readOnly: i,
                                    children: (0,
                                    ne.jsx)("span", {
                                        className: "m-left-1",
                                        children: (0,
                                        ne.jsx)(p.default, {
                                            message: Jd("choice.addChoice")
                                        })
                                    })
                                })]
                            })
                        }), d]
                    })
                })
            }
        }
        Zd.defaultProps = {
            fieldErrors: {}
        };
        Zd.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            fieldErrors: a().object,
            isV1: a().bool.isRequired,
            readOnly: a().bool
        };
        var Qd = Zd
          , er = s(608)
          , tr = s(1499);
        const sr = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`;
        function ir(e) {
            return null === e ? void 0 : e
        }
        class nr extends i.Component {
            constructor(...e) {
                super(...e);
                this.onDefaultChange = e => {
                    this.props.editField({
                        [wt.DEFAULT]: e
                    })
                }
                ;
                this.onAttributeChange = (e, t) => {
                    const s = t.target.value;
                    this.props.editField({
                        [e]: s
                    })
                }
                ;
                this.onDisplayChange = e => {
                    this.props.editField({
                        [wt.DISPLAY]: e.target.name
                    })
                }
            }
            renderDisplayOptions() {
                const {field: e} = this.props
                  , t = Object.values(Ld.default[Gi.NUMBER]).map((t => {
                    const s = e[wt.DISPLAY] === t;
                    return (0,
                    ne.jsx)(Sd.default, {
                        checked: s,
                        inline: !0,
                        name: t,
                        onChange: this.onDisplayChange,
                        size: "small",
                        className: "content-options-radio-input",
                        children: (0,
                        h.default)(sr(`display.displayTypeLabels.${t}`))
                    }, t)
                }
                ));
                return (0,
                ne.jsx)(ts.default, {
                    label: (0,
                    ne.jsx)(p.default, {
                        message: sr("display.label")
                    }),
                    children: (0,
                    ne.jsx)(i.Fragment, {
                        children: t
                    })
                })
            }
            render() {
                const {field: e, fieldErrors: t, readOnly: s} = this.props;
                return (0,
                ne.jsx)("div", {
                    children: (0,
                    ne.jsxs)(Bt.default, {
                        children: [(0,
                        ne.jsx)(kt.default, {
                            flush: !0,
                            children: (0,
                            ne.jsxs)(_.default, {
                                children: [(0,
                                ne.jsx)(ts.default, {
                                    className: "m-right-2",
                                    label: (0,
                                    ne.jsx)(p.default, {
                                        message: sr("number.prefix.label")
                                    }),
                                    tooltip: (0,
                                    ne.jsx)(p.default, {
                                        message: sr("number.prefix.tooltip")
                                    }),
                                    children: (0,
                                    ne.jsx)(Vt, {
                                        inputComponent: Mt.default,
                                        onChange: (...e) => this.onAttributeChange(wt.PREFIX, ...e),
                                        value: e[wt.PREFIX] || "",
                                        readOnly: s
                                    })
                                }), (0,
                                ne.jsx)(ts.default, {
                                    className: "m-top-0",
                                    label: (0,
                                    ne.jsx)(p.default, {
                                        message: sr("number.suffix.label")
                                    }),
                                    tooltip: (0,
                                    ne.jsx)(p.default, {
                                        message: sr("number.suffix.tooltip")
                                    }),
                                    children: (0,
                                    ne.jsx)(Vt, {
                                        inputComponent: Mt.default,
                                        onChange: (...e) => this.onAttributeChange(wt.SUFFIX, ...e),
                                        value: e[wt.SUFFIX] || "",
                                        readOnly: s
                                    })
                                })]
                            })
                        }), (0,
                        ne.jsx)(kt.default, {
                            flush: !0,
                            children: (0,
                            ne.jsxs)(_.default, {
                                children: [(0,
                                ne.jsx)(rs, {
                                    className: "m-right-2",
                                    errors: t[wt.MIN],
                                    label: (0,
                                    ne.jsx)(p.default, {
                                        message: sr("number.min")
                                    }),
                                    children: (0,
                                    ne.jsx)(Vt, {
                                        inputComponent: er.default,
                                        onChange: (...e) => this.onAttributeChange(wt.MIN, ...e),
                                        value: e[wt.MIN],
                                        readOnly: s
                                    })
                                }), (0,
                                ne.jsx)(ts.default, {
                                    className: "m-top-0",
                                    label: (0,
                                    ne.jsx)(p.default, {
                                        message: sr("number.max")
                                    }),
                                    children: (0,
                                    ne.jsx)(Vt, {
                                        inputComponent: er.default,
                                        onChange: (...e) => this.onAttributeChange(wt.MAX, ...e),
                                        value: e[wt.MAX],
                                        readOnly: s
                                    })
                                })]
                            })
                        }), (0,
                        ne.jsx)(kt.default, {
                            flush: !0,
                            children: (0,
                            ne.jsx)(ts.default, {
                                className: "m-top-0",
                                label: (0,
                                ne.jsx)(p.default, {
                                    message: sr("number.step")
                                }),
                                children: (0,
                                ne.jsx)(Vt, {
                                    inputComponent: er.default,
                                    onChange: (...e) => this.onAttributeChange(wt.STEP, ...e),
                                    value: e[wt.STEP],
                                    readOnly: s
                                })
                            })
                        }), (0,
                        ne.jsxs)(kt.default, {
                            flush: !0,
                            children: [this.renderDisplayOptions(), (0,
                            ne.jsx)(rs, {
                                errors: t[wt.DEFAULT],
                                label: (0,
                                ne.jsx)(p.default, {
                                    message: sr(`defaultLabels.${Gi.NUMBER}`)
                                }),
                                children: (0,
                                ne.jsx)(Vt, {
                                    display: e[wt.DISPLAY],
                                    inputComponent: tr.default,
                                    onFieldChange: this.onDefaultChange,
                                    max: ir(e[wt.MAX]),
                                    min: ir(e[wt.MIN]),
                                    prefix: e[wt.PREFIX],
                                    readOnly: s,
                                    step: ir(e[wt.STEP]),
                                    suffix: e[wt.SUFFIX],
                                    value: e[wt.DEFAULT]
                                }, `${e[wt.PREFIX]}-${e[wt.SUFFIX]}`)
                            })]
                        })]
                    })
                })
            }
        }
        nr.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            fieldErrors: a().object,
            readOnly: a().bool
        };
        nr.defaultProps = {
            fieldErrors: {}
        };
        var or = s(1468);
        const dr = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`;
        class rr extends i.Component {
            constructor(...e) {
                super(...e);
                this.onDefaultChange = e => {
                    this.props.editField({
                        [wt.DEFAULT]: e
                    })
                }
            }
            render() {
                const {field: e, readOnly: t} = this.props;
                return (0,
                ne.jsx)(ts.default, {
                    label: me.default.text(dr(`defaultLabels.${Gi.DATE}`)),
                    children: (0,
                    ne.jsx)(Vt, {
                        inputComponent: or.default,
                        onFieldChange: this.onDefaultChange,
                        type: e.type,
                        value: e[wt.DEFAULT],
                        readOnly: t
                    })
                })
            }
        }
        rr.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            readOnly: a().bool
        };
        var lr = s(609);
        const ar = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`;
        class ur extends i.PureComponent {
            constructor(...e) {
                super(...e);
                this.onStepChange = e => {
                    const t = e.target.value;
                    !isNaN(t) && t > 0 && this.props.editField({
                        [wt.STEP]: t
                    })
                }
                ;
                this.onDefaultChange = e => {
                    this.props.editField({
                        [wt.DEFAULT]: e
                    })
                }
            }
            render() {
                const {field: e, readOnly: t} = this.props;
                return (0,
                ne.jsxs)("div", {
                    children: [(0,
                    ne.jsx)(ts.default, {
                        label: me.default.text(ar(`defaultLabels.${Gi.DATE_TIME}`)),
                        children: (0,
                        ne.jsx)(Vt, {
                            inputComponent: or.default,
                            onFieldChange: this.onDefaultChange,
                            step: e[wt.STEP],
                            type: e.type,
                            value: e[wt.DEFAULT],
                            readOnly: t
                        })
                    }), (0,
                    ne.jsx)(ts.default, {
                        label: me.default.text(ar("datetime.step")),
                        tooltip: me.default.text(ar("datetime.stepTooltip")),
                        tooltipPlacement: "left",
                        children: (0,
                        ne.jsx)(Ed.default, {
                            position: "end",
                            text: me.default.text(ar("datetime.minutes")),
                            children: (0,
                            ne.jsx)(Vt, {
                                inputComponent: lr.default,
                                onChange: this.onStepChange,
                                value: e[wt.STEP],
                                disabled: t
                            })
                        })
                    })]
                })
            }
        }
        ur.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            readOnly: a().bool
        };
        var cr = s(1458);
        const pr = 100
          , hr = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`;
        class gr extends i.Component {
            constructor(...e) {
                super(...e);
                this.onDefaultChange = e => {
                    this.props.editField({
                        [wt.DEFAULT]: e
                    })
                }
                ;
                this.onShowOpacityChange = e => {
                    const {field: t, editField: s} = this.props
                      , i = e.target.checked
                      , n = {
                        [wt.SHOW_OPACITY]: i
                    };
                    i || (n[wt.DEFAULT] = this.resetColorOpacity(t));
                    s(n)
                }
                ;
                this.onOverrideOpacityChange = e => {
                    const {field: t, isEmailOrAnyType: s, editField: i} = this.props
                      , n = e.target.checked
                      , o = {
                        [wt.SHOW_OPACITY]: n ? !s : void 0
                    };
                    s && (o[wt.DEFAULT] = this.resetColorOpacity(t));
                    i(o)
                }
            }
            resetColorOpacity(e) {
                return Object.assign({}, e.default, {
                    opacity: pr
                })
            }
            renderShowOpacityToggle() {
                const {field: e, readOnly: t} = this.props
                  , s = void 0 !== e[wt.SHOW_OPACITY];
                return (0,
                ne.jsxs)("div", {
                    className: "m-top-3",
                    children: [(0,
                    ne.jsx)(ld.default, {
                        checked: s,
                        description: (0,
                        ne.jsx)(_i.default, {
                            title: (0,
                            ne.jsx)(p.default, {
                                message: hr("color.overrideOpacityHelp")
                            })
                        }),
                        descriptionLayout: "horizontal",
                        onChange: this.onOverrideOpacityChange,
                        children: (0,
                        ne.jsx)(p.default, {
                            message: hr("color.overrideOpacity")
                        })
                    }), s && (0,
                    ne.jsxs)("div", {
                        className: "m-top-3",
                        children: [(0,
                        ne.jsx)($s.default, {
                            className: "p-right-4 p-top-1",
                            children: (0,
                            ne.jsx)(p.default, {
                                message: hr("color.showOpacity")
                            })
                        }), (0,
                        ne.jsx)(Vt, {
                            checked: e[wt.SHOW_OPACITY],
                            disabled: t,
                            inputComponent: Wo.default,
                            onChange: this.onShowOpacityChange,
                            required: !0,
                            size: "extra-small"
                        })]
                    })]
                })
            }
            render() {
                const {field: e, fieldErrors: t, readOnly: s, isEmailOrAnyType: i} = this.props;
                return (0,
                ne.jsx)("div", {
                    className: "custom-widget-editor-color-picker",
                    children: (0,
                    ne.jsxs)(Bt.default, {
                        children: [(0,
                        ne.jsx)(rs, {
                            errors: t[wt.DEFAULT],
                            label: (0,
                            h.default)(hr(`defaultLabels.${Gi.COLOR}`)),
                            children: (0,
                            ne.jsx)(cr.default, {
                                onFieldChange: this.onDefaultChange,
                                value: e[wt.DEFAULT],
                                readOnly: s,
                                isEmailOrAnyType: i,
                                show_opacity: e[wt.SHOW_OPACITY]
                            })
                        }), this.renderShowOpacityToggle()]
                    })
                })
            }
        }
        gr.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            fieldErrors: a().object,
            readOnly: a().bool,
            isEmailOrAnyType: a().bool
        };
        function mr() {
            const e = (0,
            P.makeGetIsEmailOrAnyType)();
            return (t, s) => ({
                isEmailOrAnyType: e(t, s)
            })
        }
        var fr = (0,
        d.connect)(mr, null)(gr)
          , br = s(1462);
        const Cr = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`;
        class Er extends i.PureComponent {
            constructor(...e) {
                super(...e);
                this.onFieldChange = e => {
                    this.props.editField({
                        [wt.DEFAULT]: e
                    })
                }
            }
            render() {
                const {field: e, readOnly: t} = this.props;
                return (0,
                ne.jsx)(Vt, {
                    onFieldChange: this.onFieldChange,
                    value: e[wt.DEFAULT],
                    label: (0,
                    h.default)(Cr(`defaultLabels.${Gi.CTA}`)),
                    inputComponent: br.default,
                    readOnly: t
                })
            }
        }
        Er.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            readOnly: a().bool
        };
        var Or = s(1638)
          , yr = s(298)
          , Tr = s(543)
          , xr = s(59);
        const jr = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`
          , Ir = Object.keys(xr.ICON_SETS).filter((e => e !== xr.ICON_SETS["fontawesome-5"])).map((e => ({
            text: e,
            value: e
        })));
        class Rr extends i.PureComponent {
            constructor(e) {
                super(e);
                this.onDefaultChange = e => {
                    this.props.editField({
                        [wt.DEFAULT]: e
                    })
                }
                ;
                this.onSetChange = ({target: {value: e}}) => {
                    this.props.editField({
                        [wt.ICON_SET]: e
                    })
                }
                ;
                this.onIconSetWarningClose = () => {
                    this.setState({
                        showIconSetWarning: !1
                    });
                    this.props.dismissIconSetWarning()
                }
                ;
                const t = e.field && e.field[wt.ICON_SET];
                this.state = {
                    showIconSetWarning: t !== xr.DEFAULT_ICON_SET
                }
            }
            componentDidUpdate(e) {
                const {field: t} = this.props
                  , {field: s} = e
                  , i = t && t[wt.ICON_SET];
                (s && s[wt.ICON_SET]) !== i && this.setState({
                    showIconSetWarning: i !== xr.DEFAULT_ICON_SET
                })
            }
            render() {
                const {field: e, hasDismissedIconSetWarning: t, readOnly: s} = this.props;
                let i = e[wt.ICON_SET] || xr.DEFAULT_ICON_SET;
                i === xr.ICON_SETS["fontawesome-5"] && (i = xr.ICON_SETS["fontawesome-5.0.10"]);
                const n = this.state.showIconSetWarning && !t;
                return (0,
                ne.jsxs)(Bt.default, {
                    children: [(0,
                    ne.jsx)(Or.default, {
                        icon_set: i,
                        label: (0,
                        ne.jsx)(p.default, {
                            message: jr(`defaultLabels.${Gi.ICON}`)
                        }),
                        onFieldChange: this.onDefaultChange,
                        value: e[wt.DEFAULT],
                        readOnly: s
                    }), (0,
                    ne.jsx)(ts.default, {
                        label: (0,
                        ne.jsx)(p.default, {
                            message: jr("icon.set.label")
                        }),
                        tooltip: (0,
                        ne.jsx)(U.default, {
                            message: jr("icon.set.tooltip"),
                            options: {
                                changelogLink: (0,
                                ne.jsx)(M.default, {
                                    external: !0,
                                    href: "https://fontawesome.com/changelog/latest",
                                    children: (0,
                                    ne.jsx)(p.default, {
                                        message: jr("icon.set.changelogLink")
                                    })
                                })
                            }
                        }),
                        children: (0,
                        ne.jsx)(Es.default, {
                            onChange: this.onSetChange,
                            options: Ir,
                            value: i
                        })
                    }), n && (0,
                    ne.jsx)(k.default, {
                        className: "m-top-2",
                        type: "warning",
                        closeable: !0,
                        onClose: this.onIconSetWarningClose,
                        children: (0,
                        ne.jsx)(U.default, {
                            message: jr("icon.iconSetWarning"),
                            options: {
                                iconSetProperty: (0,
                                ne.jsx)("code", {
                                    children: "icon_set"
                                })
                            }
                        })
                    })]
                })
            }
        }
        Rr.propTypes = {
            dismissIconSetWarning: a().func.isRequired,
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            hasDismissedIconSetWarning: a().bool.isRequired,
            readOnly: a().bool
        };
        function Sr(e) {
            return {
                hasDismissedIconSetWarning: (0,
                yr.getHasDismissedIconSetWarning)(e)
            }
        }
        const Fr = {
            dismissIconSetWarning: Tr.dismissIconSetWarning
        };
        var Lr = (0,
        d.connect)(Sr, Fr)(Rr)
          , vr = s(1498)
          , Wr = s(240);
        const Ar = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`
          , Dr = {
            ALL: "ALL",
            EXACT_ONLY: "EXACT_ONLY",
            NONE: "NONE"
        }
          , Pr = {
            ALL: "ALL",
            NONE: "NONE"
        }
          , Nr = Object.keys(Dr).map((e => ({
            text: (0,
            h.default)(Ar(`image.sizeControlType.options.${e}`)),
            value: e
        })))
          , _r = Object.keys(Pr).map((e => ({
            text: (0,
            h.default)(Ar(`image.showLoadingType.options.${e}`)),
            value: e
        })));
        class qr extends i.Component {
            constructor(e) {
                super(e);
                this.onDefaultChange = e => {
                    this.props.editField({
                        [wt.DEFAULT]: e
                    })
                }
                ;
                this.onResizableChange = e => {
                    this.props.editField({
                        [wt.RESIZABLE]: !e.target.checked
                    })
                }
                ;
                this.onShowLoadingChange = e => {
                    const t = e.target.value
                      , s = {
                        [wt.SHOW_LOADING]: t === Pr.ALL
                    }
                      , i = t === Pr.ALL && this.loadingControlType === Pr.NONE;
                    this.props.editField(s);
                    this.setState({
                        showImageLoadingWarning: i
                    })
                }
                ;
                this.onSizeControlTypeChange = e => {
                    let t = {}
                      , s = !1;
                    switch (e.target.value) {
                    case Dr.ALL:
                        t = {
                            [wt.RESIZABLE]: !0,
                            [wt.RESPONSIVE]: !0
                        };
                        this.sizeControlType === Dr.EXACT_ONLY && (s = !0);
                        break;
                    case Dr.EXACT_ONLY:
                        t = {
                            [wt.RESIZABLE]: !0,
                            [wt.RESPONSIVE]: !1,
                            [wt.DEFAULT]: Object.assign({}, this.props.field[wt.DEFAULT], {
                                size_type: Wr.default.EXACT
                            })
                        };
                        break;
                    case Dr.NONE:
                        t = {
                            [wt.RESIZABLE]: !1
                        }
                    }
                    this.setState({
                        showResponsiveImageWarning: s
                    });
                    this.props.editField(t)
                }
                ;
                this.onResponsiveImageWarningClose = () => {
                    this.setState({
                        showResponsiveImageWarning: !1
                    });
                    this.props.dismissResponsiveImageWarning()
                }
                ;
                this.onLoadingWarningClose = () => {
                    this.setState({
                        showImageLoadingWarning: !1
                    });
                    this.props.dismissShowLoadingWarning()
                }
                ;
                this.state = {
                    showResponsiveImageWarning: !1,
                    showImageLoadingWarning: !1
                }
            }
            get sizeControlType() {
                return this.props.field[wt.RESIZABLE] ? this.props.field[wt.RESPONSIVE] ? Dr.ALL : Dr.EXACT_ONLY : Dr.NONE
            }
            get loadingControlType() {
                return this.props.field[wt.SHOW_LOADING] ? Pr.ALL : Pr.NONE
            }
            renderShowLoading() {
                const e = !this.props.hasDismissedShowLoadingWarning && this.state.showImageLoadingWarning;
                return (0,
                ne.jsxs)("div", {
                    children: [(0,
                    ne.jsx)(ts.default, {
                        className: "m-top-4",
                        label: (0,
                        ne.jsx)(p.default, {
                            message: Ar("image.showLoadingType.label")
                        }),
                        tooltip: (0,
                        ne.jsx)(p.default, {
                            message: Ar("image.showLoadingType.tooltip")
                        }),
                        children: (0,
                        ne.jsx)(Es.default, {
                            "data-test-id": "module-image-field-size-dropdown",
                            disabled: this.props.readOnly,
                            options: _r,
                            onChange: this.onShowLoadingChange,
                            required: !0,
                            value: this.loadingControlType
                        })
                    }), e && (0,
                    ne.jsx)(k.default, {
                        className: "m-top-2",
                        type: "warning",
                        closeable: !0,
                        onClose: this.onLoadingWarningClose,
                        children: (0,
                        ne.jsx)(U.default, {
                            message: Ar("image.showLoadingType.loadingControlWarning"),
                            options: {
                                loadingProperty: (0,
                                ne.jsx)("code", {
                                    children: "loading"
                                })
                            }
                        })
                    })]
                })
            }
            renderResponsiveSizeControl() {
                const e = !this.props.hasDismissedResponsiveImageWarning && this.state.showResponsiveImageWarning
                  , t = (0,
                ne.jsx)("code", {
                    children: "size_type"
                });
                return (0,
                ne.jsxs)("div", {
                    children: [(0,
                    ne.jsx)(ts.default, {
                        className: "m-top-4",
                        label: (0,
                        ne.jsx)(p.default, {
                            message: Ar("image.sizeControlType.label")
                        }),
                        tooltip: (0,
                        ne.jsx)(p.default, {
                            message: Ar("image.sizeControlType.tooltip")
                        }),
                        children: (0,
                        ne.jsx)(Es.default, {
                            "data-test-id": "module-image-field-size-dropdown",
                            disabled: this.props.readOnly,
                            options: Nr,
                            onChange: this.onSizeControlTypeChange,
                            required: !0,
                            value: this.sizeControlType
                        })
                    }), e && (0,
                    ne.jsx)(k.default, {
                        className: "m-top-2",
                        type: "warning",
                        closeable: !0,
                        onClose: this.onResponsiveImageWarningClose,
                        children: (0,
                        ne.jsx)(U.default, {
                            message: Ar("image.sizeControlType.responsiveImageWarning"),
                            options: {
                                sizeTypeProperty: t
                            }
                        })
                    })]
                })
            }
            render() {
                const {field: e, readOnly: t, isV1: s, isEmail: i} = this.props;
                return (0,
                ne.jsxs)(Bt.default, {
                    children: [(0,
                    ne.jsx)(ts.default, {
                        children: (0,
                        ne.jsx)(vr.default, {
                            label: (0,
                            h.default)(Ar(`defaultLabels.${Gi.IMAGE}`)),
                            onFieldChange: this.onDefaultChange,
                            value: e[wt.DEFAULT],
                            readOnly: t,
                            resizable: e[wt.RESIZABLE],
                            responsive: e[wt.RESPONSIVE],
                            forceHideResponsive: i,
                            show_loading: e[wt.SHOW_LOADING],
                            forceShowLoading: !i
                        })
                    }), !s && this.renderResponsiveSizeControl(), !s && this.renderShowLoading()]
                })
            }
        }
        qr.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            readOnly: a().bool,
            isV1: a().bool.isRequired,
            isEmail: a().bool.isRequired,
            hasDismissedResponsiveImageWarning: a().bool.isRequired,
            dismissResponsiveImageWarning: a().func.isRequired,
            dismissShowLoadingWarning: a().func.isRequired,
            hasDismissedShowLoadingWarning: a().bool.isRequired
        };
        function Ur(e) {
            return {
                hasDismissedResponsiveImageWarning: (0,
                yr.getHasDismissedResponsiveImageWarning)(e),
                hasDismissedShowLoadingWarning: (0,
                yr.getHasDismissedShowLoadingControls)(e)
            }
        }
        const kr = {
            dismissResponsiveImageWarning: Tr.dismissResponsiveImageWarning,
            dismissShowLoadingWarning: Tr.dismissShowLoadingWarning
        };
        var Gr = (0,
        d.connect)(Ur, kr)(qr)
          , Mr = s(1473)
          , Br = s(216);
        const wr = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`
          , Hr = [Br.DrawerTypes.FILE, Br.DrawerTypes.IMAGE, Br.DrawerTypes.VIDEO, Br.DrawerTypes.DOCUMENT, Br.DrawerTypes.AUDIO];
        class Vr extends i.Component {
            constructor(...e) {
                super(...e);
                this.onDefaultChange = e => {
                    this.props.editField({
                        [wt.DEFAULT]: e
                    })
                }
                ;
                this.onPickerChange = e => {
                    this.props.editField({
                        [wt.PICKER]: e.target.name
                    })
                }
                ;
                this.renderPickerRadios = () => {
                    const {field: e, readOnly: t} = this.props;
                    return Hr.reduce(( (s, i) => {
                        const n = Br.DrawerTypes[i].toLowerCase();
                        s.push((0,
                        ne.jsx)(Sd.default, {
                            checked: e[wt.PICKER] === n,
                            disabled: t,
                            name: n,
                            onChange: this.onPickerChange,
                            children: me.default.text(wr(`file.pickerTypes.${n}`))
                        }, n));
                        return s
                    }
                    ), [])
                }
            }
            render() {
                const {field: e, readOnly: t, fieldErrors: s} = this.props;
                return (0,
                ne.jsx)("div", {
                    children: (0,
                    ne.jsxs)(Bt.default, {
                        children: [(0,
                        ne.jsx)(ts.default, {
                            label: me.default.text(wr("file.pickerLabel")),
                            children: (0,
                            ne.jsx)("div", {
                                children: this.renderPickerRadios()
                            })
                        }), (0,
                        ne.jsx)(rs, {
                            "aria-label": "value",
                            errors: s[wt.DEFAULT],
                            children: (0,
                            ne.jsx)(Vt, {
                                inputComponent: Mr.default,
                                label: me.default.text(wr(`defaultLabels.${Gi.FILE}`)),
                                onFieldChange: this.onDefaultChange,
                                picker: e[wt.PICKER],
                                value: e[wt.DEFAULT],
                                wrap: !0,
                                readOnly: t
                            })
                        })]
                    })
                })
            }
        }
        Vr.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            readOnly: a().bool,
            fieldErrors: a().object
        };
        var $r = s(1613);
        const Yr = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`;
        class zr extends i.Component {
            constructor(e) {
                super(e);
                this.onDefaultChange = this.onDefaultChange.bind(this)
            }
            onDefaultChange(e) {
                this.props.editField({
                    [wt.DEFAULT]: e
                })
            }
            render() {
                const {field: e, fieldErrors: t} = this.props;
                return (0,
                ne.jsx)(rs, {
                    errors: t[wt.DEFAULT],
                    label: (0,
                    h.default)(Yr(`defaultLabels.${Gi.HTML}`)),
                    children: (0,
                    ne.jsx)(Vt, {
                        inputComponent: $r.default,
                        onFieldChange: this.onDefaultChange,
                        value: e[wt.DEFAULT]
                    })
                })
            }
        }
        zr.defaultProps = {
            fieldErrors: {}
        };
        zr.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            fieldErrors: a().object
        };
        var Kr = zr
          , Jr = s(1615);
        const Xr = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`;
        class Zr extends i.Component {
            constructor(...e) {
                super(...e);
                this.onDefaultChange = e => {
                    this.props.editField({
                        [wt.DEFAULT]: e
                    })
                }
            }
            render() {
                const {field: e, readOnly: t} = this.props
                  , s = (0,
                ne.jsx)(p.default, {
                    message: Xr(`defaultLabels.${Gi.SIMPLE_MENU}`)
                });
                return (0,
                ne.jsx)(ts.default, {
                    label: s,
                    children: (0,
                    ne.jsx)(Jr.default, {
                        onFieldChange: this.onDefaultChange,
                        value: e[wt.DEFAULT],
                        readOnly: t
                    })
                })
            }
        }
        Zr.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            readOnly: a().bool
        };
        var Qr = s(1618);
        const el = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`
          , tl = e => el(`image.showLoadingType.${e}`)
          , sl = {
            ALL: "ALL",
            NONE: "NONE"
        }
          , il = Object.keys(sl).map((e => ({
            text: (0,
            h.default)(tl(`options.${e}`)),
            value: e
        })));
        class nl extends i.Component {
            constructor(...e) {
                super(...e);
                this.onDefaultChange = e => {
                    this.props.editField({
                        [wt.DEFAULT]: e
                    })
                }
                ;
                this.onShowLoadingChange = ({target: {value: e}}) => {
                    const t = e === sl.ALL;
                    this.props.editField({
                        [wt.SHOW_LOADING]: t
                    })
                }
            }
            get loadingControlType() {
                return this.props.field[wt.SHOW_LOADING] ? sl.ALL : sl.NONE
            }
            renderShowLoading() {
                return (0,
                ne.jsx)(ts.default, {
                    className: "m-top-4",
                    label: (0,
                    ne.jsx)(p.default, {
                        message: tl("label")
                    }),
                    tooltip: (0,
                    ne.jsx)(p.default, {
                        message: tl("tooltip")
                    }),
                    children: (0,
                    ne.jsx)(Es.default, {
                        "data-test-id": "module-image-field-size-dropdown",
                        disabled: this.props.readOnly,
                        options: il,
                        onChange: this.onShowLoadingChange,
                        required: !0,
                        value: this.loadingControlType
                    })
                })
            }
            render() {
                const {field: e, readOnly: t, isEmail: s} = this.props
                  , i = (0,
                ne.jsx)(p.default, {
                    message: el(`defaultLabels.${Gi.LOGO}`)
                });
                return (0,
                ne.jsxs)("div", {
                    children: [(0,
                    ne.jsx)(ts.default, {
                        label: i,
                        children: (0,
                        ne.jsx)(Vt, {
                            inputComponent: Qr.default,
                            onFieldChange: this.onDefaultChange,
                            value: e[wt.DEFAULT],
                            wrap: !0,
                            readOnly: t,
                            forceShowLoading: !s
                        })
                    }), this.renderShowLoading()]
                })
            }
        }
        nl.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            isEmail: a().bool.isRequired,
            readOnly: a().bool
        };
        var ol = nl
          , dl = s(1903);
        const rl = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`;
        function ll() {
            return {}
        }
        const al = {
            setFullScreenEditorOpen: A.setFullScreenEditorOpen
        };
        class ul extends i.PureComponent {
            constructor(...e) {
                super(...e);
                this.openFullScreenEditor = () => {
                    this.props.setFullScreenEditorOpen(this.props.customWidgetId, !0)
                }
            }
            renderEditButton() {
                const {type: e} = this.props.field;
                return (0,
                ne.jsx)(G.default, {
                    disabled: this.props.readOnly,
                    use: "tertiary-light",
                    onClick: this.openFullScreenEditor,
                    children: (0,
                    ne.jsx)(p.default, {
                        message: rl(`${e}.edit`)
                    })
                })
            }
            renderRichTextPreview() {
                const {field: e} = this.props;
                return (0,
                ne.jsx)(dl.default, {
                    onClick: this.openFullScreenEditor,
                    value: e[wt.DEFAULT] || ""
                })
            }
            renderOption() {
                return this.props.field.type === Gi.RICH_TEXT ? this.renderRichTextPreview() : this.renderEditButton()
            }
            render() {
                const {type: e} = this.props.field;
                return (0,
                ne.jsxs)("div", {
                    className: "m-y-3",
                    children: [(0,
                    ne.jsx)("div", {
                        children: (0,
                        ne.jsx)(xi.default, {
                            className: "p-top-0",
                            children: (0,
                            ne.jsx)(p.default, {
                                message: rl(`defaultLabels.${e}`)
                            })
                        })
                    }), this.renderOption()]
                })
            }
        }
        ul.propTypes = {
            customWidgetId: u.default.customWidgetId.isRequired,
            setFullScreenEditorOpen: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            readOnly: a().bool
        };
        var cl = (0,
        d.connect)(ll, al)(ul)
          , pl = s(1423);
        const hl = (0,
        Ei.default)(Mt.default)
          , gl = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`;
        class ml extends i.PureComponent {
            constructor(...e) {
                super(...e);
                this.onFieldChange = e => {
                    this.props.editField({
                        [wt.DEFAULT]: e
                    })
                }
                ;
                this.onPlaceholderChange = ({target: {value: e}}) => {
                    this.props.editField({
                        [wt.PLACEHOLDER]: e
                    })
                }
            }
            renderPlaceholderLabel() {
                return (0,
                ne.jsxs)(_.default, {
                    children: [(0,
                    ne.jsx)("span", {
                        className: "m-right-1",
                        children: (0,
                        ne.jsx)(p.default, {
                            message: gl("selectFields.placeholder.label")
                        })
                    }), (0,
                    ne.jsx)(_i.default, {
                        title: (0,
                        ne.jsx)(Nt.default, {
                            children: (0,
                            ne.jsx)(p.default, {
                                message: gl("selectFields.placeholder.tooltip")
                            })
                        }),
                        color: Pi.BATTLESHIP,
                        tooltipPlacement: "top"
                    })]
                })
            }
            render() {
                const {field: e, componentsByType: t, formControlProps: s, inputProps: i, readOnly: n} = this.props;
                return (0,
                ne.jsxs)(Bt.default, {
                    children: [(0,
                    ne.jsx)(ts.default, Object.assign({
                        label: (0,
                        ne.jsx)(p.default, {
                            message: gl(`defaultLabels.${e.type}`)
                        })
                    }, s, {
                        children: (0,
                        ne.jsx)(Vt, Object.assign({
                            onFieldChange: this.onFieldChange,
                            value: e[wt.DEFAULT],
                            required: !1,
                            componentsByType: t,
                            editor: rd.default.DESIGN_MANAGER,
                            type: e.type,
                            inputComponent: t[e.type],
                            readOnly: n,
                            tooltipPlacement: "top left",
                            placeholder: e[wt.PLACEHOLDER]
                        }, i))
                    })), (0,
                    ne.jsx)(ts.default, {
                        label: this.renderPlaceholderLabel(),
                        children: (0,
                        ne.jsx)(hl, {
                            "data-test-id": "module-field-placeholder-input",
                            onChange: this.onPlaceholderChange,
                            value: e[wt.PLACEHOLDER] || "",
                            disabled: n
                        })
                    })]
                })
            }
        }
        ml.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            componentsByType: a().object.isRequired,
            inputProps: a().object.isRequired,
            formControlProps: a().object.isRequired,
            readOnly: a().bool
        };
        ml.defaultProps = {
            inputProps: {},
            formControlProps: {}
        };
        var fl = (0,
        pl.default)(ml);
        const bl = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`;
        class Cl extends i.PureComponent {
            constructor(...e) {
                super(...e);
                this.state = {
                    error: null
                };
                this.setError = e => {
                    this.setState({
                        error: e
                    })
                }
            }
            render() {
                const {field: e, readOnly: t} = this.props
                  , {error: s} = this.state;
                return (0,
                ne.jsx)(fl, Object.assign({}, this.props, {
                    inputProps: {
                        setError: this.setError,
                        error: !!s,
                        readOnly: t
                    },
                    formControlProps: {
                        validationMessage: s,
                        label: me.default.text(bl(`defaultLabels.${e.type}`))
                    }
                }))
            }
        }
        Cl.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            readOnly: a().bool
        };
        var El = s(1644);
        const Ol = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`;
        class yl extends i.PureComponent {
            constructor(...e) {
                super(...e);
                this.onDefaultChange = e => {
                    this.props.editField({
                        [wt.DEFAULT]: e
                    })
                }
            }
            render() {
                const {field: e, isEmailOrAnyType: t, modulePath: s, readOnly: i} = this.props;
                return (0,
                ne.jsx)("div", {
                    className: "custom-widget-editor-font-picker",
                    children: (0,
                    ne.jsx)(Bt.default, {
                        children: (0,
                        ne.jsx)(ts.default, {
                            children: (0,
                            ne.jsx)(El.default, {
                                buttonSize: "small",
                                isEmailOrAnyType: t,
                                label: (0,
                                h.default)(Ol(`defaultLabels.${Gi.FONT}`)),
                                modulePath: s,
                                onFieldChange: this.onDefaultChange,
                                readOnly: i,
                                showSizeUnit: !0,
                                value: e[wt.DEFAULT]
                            })
                        })
                    })
                })
            }
        }
        yl.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            isEmailOrAnyType: a().bool,
            modulePath: a().string,
            readOnly: a().bool
        };
        function Tl() {
            const e = (0,
            P.makeGetIsEmailOrAnyType)()
              , t = (0,
            P.makeGetModulePath)();
            return (s, i) => ({
                isEmailOrAnyType: e(s, i),
                modulePath: t(s, i)
            })
        }
        var xl = (0,
        d.connect)(Tl, null)(yl)
          , jl = s(1265)
          , Il = s(208)
          , Rl = s(197);
        const Sl = ["partial", "field", "componentsByType"]
          , Fl = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`;
        class Ll extends i.PureComponent {
            constructor(...e) {
                super(...e);
                this.validateType = () => {
                    const e = this.props.field[Rl.DEFAULT]
                      , t = this.props.field[Rl.TAG_VALUE];
                    e || t ? e && "string" == typeof e && t !== Il.SLUG && t !== Il.NAME ? this.props.editField({
                        [Rl.TAG_VALUE]: Il.SLUG
                    }) : e && "number" == typeof e && t !== Il.ID ? this.props.editField({
                        [Rl.TAG_VALUE]: Il.ID
                    }) : e && "object" == typeof e && t !== Il.ALL && this.props.editField({
                        [Rl.TAG_VALUE]: Il.ALL
                    }) : this.props.editField({
                        [Rl.TAG_VALUE]: Il.SLUG
                    })
                }
                ;
                this.onFieldChange = (e, t) => {
                    this.props.editField({
                        [e]: t
                    })
                }
            }
            componentDidMount() {
                this.validateType()
            }
            renderOptions() {
                return Object.keys(Il).filter((e => "default" !== e)).map((e => (0,
                ne.jsxs)(Sd.default, {
                    name: e,
                    size: "small",
                    checked: e === this.props.field[Rl.TAG_VALUE],
                    onChange: this.props.partial(this.onFieldChange, Rl.TAG_VALUE, e),
                    disabled: this.props.readOnly,
                    className: "p-bottom-2",
                    children: [(0,
                    ne.jsx)(p.default, {
                        message: Fl(`tag.valueSelect.options.${e}.label`)
                    }), (0,
                    ne.jsx)(Nt.default, {
                        use: "help",
                        className: "display-block",
                        children: (0,
                        ne.jsx)(p.default, {
                            message: Fl(`tag.valueSelect.options.${e}.helpText`)
                        })
                    })]
                }, e)))
            }
            render() {
                const e = this.props
                  , {partial: t, field: s, componentsByType: i} = e
                  , n = (0,
                It.default)(e, Sl);
                return (0,
                ne.jsxs)("div", {
                    children: [(0,
                    ne.jsx)(es.default, {
                        label: (0,
                        ne.jsx)(p.default, {
                            message: Fl("defaultLabels.tag")
                        }),
                        children: (0,
                        ne.jsx)(Vt, Object.assign({
                            onFieldChange: t(this.onFieldChange, Rl.DEFAULT),
                            value: s[Rl.DEFAULT],
                            required: !1,
                            componentsByType: i,
                            type: Gi.TAG,
                            inputComponent: i[Gi.TAG],
                            tag_value: s[Rl.TAG_VALUE] || Il.SLUG
                        }, n))
                    }), (0,
                    ne.jsx)(es.default, {
                        label: (0,
                        ne.jsx)(p.default, {
                            message: Fl("tag.valueSelect.label")
                        }),
                        tooltip: (0,
                        ne.jsx)(p.default, {
                            message: Fl("tag.valueSelect.tooltip")
                        }),
                        children: (0,
                        ne.jsx)("div", {
                            children: this.renderOptions()
                        })
                    })]
                })
            }
        }
        Ll.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            componentsByType: a().object.isRequired,
            partial: a().func.isRequired,
            readOnly: a().bool
        };
        var vl = (0,
        q.compose)(pl.default, (0,
        jl.default)())(Ll)
          , Wl = s(1647)
          , Al = s(1685)
          , Dl = s(213)
          , Pl = s(1424);
        const Nl = ["children", "option"];
        function _l(e, t) {
            const {urlSupportedTypePermissions: s} = (0,
            N.getFieldCreateOptions)(e, t);
            return {
                hasDismissedAdvancedRelOptionsWarning: (0,
                yr.getHasDismissedAdvancedRelOptionsWarning)(e),
                urlSupportedTypePermissions: s
            }
        }
        const ql = {
            dismissAdvancedRelOptionsWarning: Tr.dismissAdvancedRelOptionsWarning
        }
          , Ul = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`;
        class kl extends i.PureComponent {
            constructor(...e) {
                super(...e);
                this.getTypeOptions = () => {
                    const {field: e, urlSupportedTypePermissions: t={}} = this.props;
                    return Object.keys(Dl.default).map((s => {
                        const i = !1 === t[s]
                          , n = e[wt.SUPPORTED_TYPES].includes(s);
                        return {
                            showMissingPermissionsTooltip: i,
                            disabled: i && !n,
                            badge: i && n && (0,
                            ne.jsx)(Qs.default, {
                                color: Pi.MARIGOLD,
                                name: "warning"
                            }),
                            value: s,
                            text: me.default.text(`ContentComponents.cmv2.fields.url.linkType.linkLabels.${s}`)
                        }
                    }
                    ))
                }
                ;
                this.onFieldChange = e => {
                    this.props.editField({
                        [wt.DEFAULT]: e
                    })
                }
                ;
                this.onAcceptedTypesChange = ({target: {value: e}}) => {
                    this.props.editField({
                        [wt.SUPPORTED_TYPES]: e
                    })
                }
                ;
                this.onShowAdvancedRelOptionsChange = ({target: {checked: e}}) => {
                    this.props.editField({
                        [wt.SHOW_ADVANCED_REL_OPTIONS]: e
                    })
                }
                ;
                this.onAdvancedRelWarningClose = () => {
                    this.props.dismissAdvancedRelOptionsWarning()
                }
                ;
                this.renderOption = e => {
                    let {children: t, option: s} = e
                      , i = (0,
                    It.default)(e, Nl);
                    return (0,
                    ne.jsx)("span", Object.assign({}, i, {
                        children: (0,
                        ne.jsx)(Hs.default, {
                            title: (0,
                            ne.jsx)(p.default, {
                                message: Ul("url.disabledUrlType")
                            }),
                            disabled: !s.showMissingPermissionsTooltip,
                            children: t
                        })
                    }))
                }
            }
            renderLinkOrUrlField() {
                const {field: e, fieldErrors: t, readOnly: s} = this.props
                  , i = e.type === Gi.URL ? Wl.default : Al.default;
                return (0,
                ne.jsx)(ts.default, {
                    label: (0,
                    ne.jsx)(p.default, {
                        message: Ul(`defaultLabels.${e.type}`)
                    }),
                    error: t[wt.DEFAULT],
                    children: (0,
                    ne.jsx)(i, {
                        onFieldChange: this.onFieldChange,
                        componentsByType: Pl.default,
                        value: e[wt.DEFAULT],
                        show_advanced_rel_options: e.type === Gi.LINK && e[wt.SHOW_ADVANCED_REL_OPTIONS],
                        supported_types: e[wt.SUPPORTED_TYPES],
                        readOnly: s
                    })
                })
            }
            renderSupportedTypesSelect() {
                const {field: e} = this.props;
                return (0,
                ne.jsx)(ts.default, {
                    label: (0,
                    ne.jsx)(p.default, {
                        message: Ul("url.acceptedTypesSelect.label")
                    }),
                    children: (0,
                    ne.jsx)(Es.default, {
                        multi: !0,
                        value: e[wt.SUPPORTED_TYPES],
                        defaultValue: Object.values(Dl.default || {}),
                        anchorType: "button",
                        onChange: this.onAcceptedTypesChange,
                        options: this.getTypeOptions(),
                        itemComponent: this.renderOption,
                        placeholder: me.default.text(Ul("url.acceptedTypesSelect.placeholder"))
                    })
                })
            }
            renderShowAdvancedRelOptionsToggle() {
                const {field: e, hasDismissedAdvancedRelOptionsWarning: t, readOnly: s} = this.props;
                if (e.type === Gi.URL)
                    return null;
                const i = !t && e[wt.SHOW_ADVANCED_REL_OPTIONS];
                return (0,
                ne.jsxs)("div", {
                    className: "m-top-4",
                    children: [(0,
                    ne.jsx)($s.default, {
                        className: "p-right-4 p-top-1",
                        children: (0,
                        ne.jsx)(p.default, {
                            message: Ul("url.advancedRelOptions")
                        })
                    }), (0,
                    ne.jsx)(Vt, {
                        checked: e[wt.SHOW_ADVANCED_REL_OPTIONS],
                        disabled: s,
                        inputComponent: Wo.default,
                        onChange: this.onShowAdvancedRelOptionsChange,
                        size: "extra-small"
                    }), i && (0,
                    ne.jsx)(k.default, {
                        className: "m-top-3",
                        type: "warning",
                        closeable: !0,
                        onClose: this.onAdvancedRelWarningClose,
                        children: (0,
                        ne.jsx)(U.default, {
                            message: Ul("url.advancedRelOptionsWarning"),
                            options: {
                                relProperty: (0,
                                ne.jsx)("code", {
                                    children: "rel"
                                })
                            }
                        })
                    })]
                })
            }
            render() {
                return (0,
                ne.jsxs)(Bt.default, {
                    children: [this.renderLinkOrUrlField(), this.renderSupportedTypesSelect(), this.renderShowAdvancedRelOptionsToggle()]
                })
            }
        }
        kl.propTypes = {
            dismissAdvancedRelOptionsWarning: a().func,
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            hasDismissedAdvancedRelOptionsWarning: a().bool,
            readOnly: a().bool,
            fieldErrors: a().object,
            urlSupportedTypePermissions: a().object.isRequired
        };
        kl.defaultProps = {
            inputProps: {},
            formControlProps: {}
        };
        var Gl = (0,
        d.connect)(_l, ql)(kl)
          , Ml = s(1686);
        const Bl = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`;
        class wl extends i.PureComponent {
            constructor(...e) {
                super(...e);
                this.onResizableChange = e => {
                    this.props.editField({
                        [wt.RESIZABLE]: e.target.checked
                    })
                }
                ;
                this.onShowPreviewChange = e => {
                    this.props.editField({
                        [wt.SHOW_PREVIEW]: e.target.checked
                    })
                }
                ;
                this.onDefaultChange = e => {
                    this.props.editField({
                        [wt.DEFAULT]: e
                    })
                }
                ;
                this.onChangeShowAdvancedOptions = e => {
                    this.props.editField({
                        [wt.SHOW_ADVANCED_OPTIONS]: e.target.checked
                    })
                }
                ;
                this.onAdvancedVideoOptionsWarningClose = () => {
                    this.props.dismissAdvancedVideoOptionsWarning()
                }
            }
            renderSizeControlToggle() {
                const {field: e, readOnly: t} = this.props;
                return (0,
                ne.jsxs)("div", {
                    className: "m-top-3",
                    children: [(0,
                    ne.jsx)($s.default, {
                        className: "p-right-4 p-top-1",
                        children: (0,
                        ne.jsx)(p.default, {
                            message: Bl("embed.sizeControlOptionsLabel")
                        })
                    }), (0,
                    ne.jsx)(Vt, {
                        checked: e[wt.RESIZABLE],
                        defaultChecked: !0,
                        disabled: t,
                        inputComponent: Wo.default,
                        onChange: this.onResizableChange,
                        required: !0,
                        size: "extra-small"
                    })]
                })
            }
            renderShowPreviewToggle() {
                const {field: e, readOnly: t} = this.props;
                return (0,
                ne.jsxs)("div", {
                    className: "m-top-3",
                    children: [(0,
                    ne.jsx)($s.default, {
                        className: "p-right-4 p-top-1",
                        children: (0,
                        ne.jsx)(p.default, {
                            message: Bl("embed.showPreview.labelVideo")
                        })
                    }), (0,
                    ne.jsx)(Vt, {
                        checked: e[wt.SHOW_PREVIEW],
                        defaultChecked: !0,
                        disabled: t,
                        inputComponent: Wo.default,
                        onChange: this.onShowPreviewChange,
                        required: !0,
                        size: "extra-small"
                    })]
                })
            }
            renderShowAdvancedVideoOptionsToggle() {
                const {field: e, hasDismissedAdvancedVideoOptionsWarning: t} = this.props
                  , s = !t && e[wt.SHOW_ADVANCED_OPTIONS];
                return (0,
                ne.jsxs)("div", {
                    className: "m-top-3",
                    children: [(0,
                    ne.jsx)($s.default, {
                        className: "p-right-4 p-top-1",
                        children: (0,
                        ne.jsx)(p.default, {
                            message: Bl("embed.showAdvancedOptions")
                        })
                    }), (0,
                    ne.jsx)(Wo.default, {
                        checked: e[wt.SHOW_ADVANCED_OPTIONS],
                        "data-test-id": "module-field-editor-advanced-options-toggle",
                        onChange: this.onChangeShowAdvancedOptions,
                        size: "extra-small"
                    }), s && (0,
                    ne.jsx)(k.default, {
                        className: "m-top-3",
                        type: "warning",
                        closeable: !0,
                        onClose: this.onAdvancedVideoOptionsWarningClose,
                        children: (0,
                        ne.jsx)(p.default, {
                            message: Bl("embed.advancedVideoOptionsWarning")
                        })
                    })]
                })
            }
            render() {
                const {field: e, fieldErrors: t, readOnly: s} = this.props;
                return (0,
                ne.jsx)("div", {
                    className: "cmv2-edit-form cmv2-field-group cmv2-edit-form--with-padding",
                    children: (0,
                    ne.jsxs)(Bt.default, {
                        children: [(0,
                        ne.jsx)(rs, {
                            errors: t[wt.DEFAULT],
                            children: (0,
                            ne.jsx)(Ml.default, {
                                label: (0,
                                ne.jsx)(p.default, {
                                    message: Bl(`defaultLabels.${Gi.VIDEO}`)
                                }),
                                onFieldChange: this.onDefaultChange,
                                readOnly: s,
                                resizable: e[wt.RESIZABLE],
                                show_advanced_options: e[wt.SHOW_ADVANCED_OPTIONS],
                                show_preview: e[wt.SHOW_PREVIEW],
                                value: e[wt.DEFAULT]
                            })
                        }), this.renderSizeControlToggle(), this.renderShowPreviewToggle(), this.renderShowAdvancedVideoOptionsToggle()]
                    })
                })
            }
        }
        wl.propTypes = {
            dismissAdvancedVideoOptionsWarning: a().func,
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            fieldErrors: a().object,
            hasDismissedAdvancedVideoOptionsWarning: a().bool,
            readOnly: a().bool
        };
        const Hl = e => ({
            hasDismissedAdvancedVideoOptionsWarning: (0,
            yr.getHasDismissedAdvancedVideoOptionsWarning)(e)
        })
          , Vl = {
            dismissAdvancedVideoOptionsWarning: Tr.dismissAdvancedVideoOptionsWarning
        };
        var $l = (0,
        d.connect)(Hl, Vl)(wl)
          , Yl = s(1422)
          , zl = s(1620);
        const Kl = Pl.default[Gi.RICH_TEXT]
          , Jl = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`;
        class Xl extends i.Component {
            constructor(...e) {
                super(...e);
                this.onFieldChange = e => {
                    this.props.editField({
                        [wt.DEFAULT]: e
                    })
                }
                ;
                this.onRedirect = e => {
                    this.redirectPending = !0;
                    this.redirectToForm = e
                }
                ;
                this.renderRichTextField = e => (0,
                ne.jsx)(Kl, Object.assign({}, e, {
                    modulePath: this.props.modulePath,
                    shouldFetchCustomFonts: !0
                }))
            }
            componentDidUpdate(e) {
                if (this.redirectPending && e.formIdFromBuffer !== this.props.formIdFromBuffer)
                    this.props.saveCustomWidget(this.props.customWidgetId);
                else if (this.redirectPending && this.redirectToForm && e.isSaving && !this.props.isSaving) {
                    this.redirectPending = !1;
                    this.redirectToForm()
                }
            }
            render() {
                const {componentsByType: e} = this.props;
                this.props.compact || (e[Gi.RICH_TEXT] = this.renderRichTextField);
                return (0,
                ne.jsx)(ts.default, {
                    label: (0,
                    h.default)(Jl(`defaultLabels.${Gi.FORM}`)),
                    children: (0,
                    ne.jsx)(Vt, {
                        onFieldChange: this.onFieldChange,
                        value: this.props.field[wt.DEFAULT],
                        readOnly: this.props.readOnly,
                        type: Gi.FORM,
                        inputComponent: zl.default,
                        onRedirect: this.onRedirect,
                        componentsByType: e,
                        required: !1,
                        required_property_types: this.props.field[wt.REQUIRED_PROPERTY_TYPES]
                    })
                })
            }
        }
        Xl.propTypes = {
            compact: a().bool,
            componentsByType: a().object.isRequired,
            customWidgetId: u.default.customWidgetId.isRequired,
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            formIdFromBuffer: a().string,
            isSaving: a().bool.isRequired,
            modulePath: a().string.isRequired,
            readOnly: a().bool,
            saveCustomWidget: a().func.isRequired
        };
        function Zl() {
            const e = P.makeGetRequestStatus()
              , t = P.makeGetModulePath();
            return (s, i) => {
                const {isSaving: n=!1} = e(s, i) || {}
                  , o = t(s, i)
                  , d = N.getIsFullScreenEditorOpen(s, i)
                  , r = P.getCustomWidgetBufferFieldsMap(s, {
                    customWidgetId: i.customWidgetId
                })[i.field.id] || {};
                return {
                    isSaving: n,
                    modulePath: o,
                    richTextPreviewIconName: d ? "remove" : "expand",
                    formIdFromBuffer: r[wt.DEFAULT] && r[wt.DEFAULT].form_id
                }
            }
        }
        const Ql = {
            saveCustomWidget: W.save
        };
        var ea = (0,
        q.compose)((0,
        d.connect)(Zl, Ql), Yl.default)(Xl)
          , ta = s(1693)
          , sa = s(1344)
          , ia = s(1341);
        const na = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`
          , oa = (0,
        Ei.default)(li.default)
          , da = (0,
        Ei.default)(Mt.default);
        function ra(e) {
            return e ? e.asMutable ? e.asMutable() : e : []
        }
        function la() {
            return (e, t) => {
                const s = N.getSelectedFieldBreadcrumbs(e, t).map((e => e.name)).join(".")
                  , i = t.field[wt.OBJECT_TYPE];
                return {
                    crmPropertyOptions: ia.getCrmObjectPropertyOptions(e, {
                        objectType: i
                    }),
                    crmObjectTypeOptions: ia.getCrmObjectTypeOptions(e),
                    crmObjectSchema: ia.getCrmObjectSchema(e, {
                        objectType: i
                    }),
                    fieldNamePath: `module.${s || t.field.name}`,
                    selectedCrmObjectType: ia.getSelectedCrmObjectType(e, {
                        objectType: i
                    })
                }
            }
        }
        const aa = {
            fetchCrmObjectSchema: sa.fetchCrmObjectSchema,
            fetchCrmObjectTypes: sa.fetchCrmObjectTypes
        };
        class ua extends i.Component {
            constructor(...e) {
                super(...e);
                this.onObjectTypeChange = e => {
                    this.props.editField({
                        [wt.OBJECT_TYPE]: e.target.value,
                        [wt.PROPERTIES_TO_FETCH]: [],
                        [wt.DISPLAY_PROPERTIES]: [],
                        [wt.DEFAULT]: null
                    })
                }
                ;
                this.onPropertiesToFetchChange = e => {
                    this.props.editField({
                        [wt.PROPERTIES_TO_FETCH]: e.target.value
                    })
                }
                ;
                this.onDisplayPropertiesChange = e => {
                    this.props.editField({
                        [wt.DISPLAY_PROPERTIES]: e.target.value
                    })
                }
                ;
                this.onDisplayFormatChange = e => {
                    this.props.editField({
                        [wt.DISPLAY_FORMAT]: e.target.value
                    })
                }
                ;
                this.onPlaceholderChange = e => {
                    this.props.editField({
                        [wt.PLACEHOLDER]: e.target.value
                    })
                }
                ;
                this.onDefaultChange = e => {
                    this.props.editField({
                        [wt.DEFAULT]: e
                    })
                }
            }
            componentDidMount() {
                const {crmObjectSchema: e, fetchCrmObjectSchema: t, fetchCrmObjectTypes: s, field: i} = this.props;
                s();
                const n = i[wt.OBJECT_TYPE];
                n && !e && t(n)
            }
            componentDidUpdate(e) {
                const {crmObjectSchema: t, fetchCrmObjectSchema: s, field: i} = this.props
                  , n = i[wt.OBJECT_TYPE];
                e.field[wt.OBJECT_TYPE] !== n && n && !t && s(n)
            }
            renderCRMObjectTypeSelect() {
                const {crmObjectTypeOptions: e, fieldErrors: t, readOnly: s, selectedCrmObjectType: i} = this.props;
                return (0,
                ne.jsx)(rs, {
                    errors: t[wt.OBJECT_TYPE],
                    label: (0,
                    ne.jsx)(p.default, {
                        message: na("crmobject.objectType.label")
                    }),
                    children: (0,
                    ne.jsx)(Vt, {
                        inputComponent: Es.default,
                        disabled: s,
                        onChange: this.onObjectTypeChange,
                        options: e,
                        placeholder: (0,
                        ne.jsx)(p.default, {
                            message: na("crmobject.objectType.placeholder")
                        }),
                        required: !0,
                        value: i
                    })
                })
            }
            renderPropertiesToFetch() {
                const {crmPropertyOptions: e, field: t, fieldNamePath: s, readOnly: i} = this.props;
                return (0,
                ne.jsx)(ts.default, {
                    label: (0,
                    ne.jsx)(p.default, {
                        message: na("crmobject.propertiesToFetch.label")
                    }),
                    tooltip: (0,
                    ne.jsx)(Xe.default, {
                        message: na("crmobject.propertiesToFetch.tooltip"),
                        options: {
                            fieldNamePath: s
                        }
                    }),
                    tooltipProps: {
                        use: "longform"
                    },
                    children: (0,
                    ne.jsx)(Vt, {
                        inputComponent: Es.default,
                        disabled: i,
                        onChange: this.onPropertiesToFetchChange,
                        multi: !0,
                        options: e,
                        placeholder: (0,
                        ne.jsx)(p.default, {
                            message: na("crmobject.propertiesToFetch.placeholder")
                        }),
                        required: !0,
                        value: ra(t[wt.PROPERTIES_TO_FETCH])
                    })
                })
            }
            renderDisplayProperties() {
                const {crmPropertyOptions: e, field: t, readOnly: s} = this.props;
                return (0,
                ne.jsx)(ts.default, {
                    label: (0,
                    ne.jsx)(p.default, {
                        message: na("crmobject.displayProperties.label")
                    }),
                    tooltip: (0,
                    ne.jsxs)(i.Fragment, {
                        children: [(0,
                        ne.jsx)("p", {
                            children: (0,
                            ne.jsx)(p.default, {
                                message: na("crmobject.displayProperties.tooltip1")
                            })
                        }), (0,
                        ne.jsx)("p", {
                            children: (0,
                            ne.jsx)(p.default, {
                                message: na("crmobject.displayProperties.tooltip2")
                            })
                        })]
                    }),
                    tooltipProps: {
                        headingText: (0,
                        ne.jsx)(p.default, {
                            message: na("crmobject.displayProperties.tooltipTitle")
                        }),
                        use: "longform"
                    },
                    children: (0,
                    ne.jsx)(Vt, {
                        inputComponent: Es.default,
                        disabled: s,
                        onChange: this.onDisplayPropertiesChange,
                        multi: !0,
                        options: e,
                        placeholder: (0,
                        ne.jsx)(p.default, {
                            message: na("crmobject.displayProperties.placeholder")
                        }),
                        required: !0,
                        value: ra(t[wt.DISPLAY_PROPERTIES])
                    })
                })
            }
            renderPropertiesDisplayFormat() {
                const {field: e, readOnly: t} = this.props;
                return (0,
                ne.jsx)(ts.default, {
                    label: (0,
                    ne.jsx)(p.default, {
                        message: na("crmobject.displayFormat.label")
                    }),
                    tooltip: (0,
                    ne.jsxs)(i.Fragment, {
                        children: [(0,
                        ne.jsx)("p", {
                            children: (0,
                            ne.jsx)(p.default, {
                                message: na("crmobject.displayFormat.tooltip1")
                            })
                        }), (0,
                        ne.jsx)("p", {
                            children: (0,
                            ne.jsx)(p.default, {
                                message: na("crmobject.displayFormat.tooltip2")
                            })
                        })]
                    }),
                    tooltipProps: {
                        headingText: (0,
                        ne.jsx)(p.default, {
                            message: na("crmobject.displayFormat.tooltipTitle")
                        }),
                        use: "longform"
                    },
                    children: (0,
                    ne.jsx)(Vt, {
                        disabled: t || !e[wt.DISPLAY_PROPERTIES],
                        inputComponent: oa,
                        maxHeight: 300,
                        onChange: this.onDisplayFormatChange,
                        placeholder: (0,
                        h.default)(na("hubdbrow.displayFormat.placeholder")),
                        required: !0,
                        shrink: !0,
                        value: e[wt.DISPLAY_FORMAT]
                    })
                })
            }
            renderPlaceholderInput() {
                const {field: e, readOnly: t} = this.props;
                return (0,
                ne.jsx)(ts.default, {
                    label: (0,
                    ne.jsx)(p.default, {
                        message: na("selectFields.placeholder.label")
                    }),
                    tooltip: (0,
                    ne.jsx)(p.default, {
                        message: na("selectFields.placeholder.tooltip")
                    }),
                    children: (0,
                    ne.jsx)(Vt, {
                        inputComponent: da,
                        onChange: this.onPlaceholderChange,
                        value: e[wt.PLACEHOLDER],
                        disabled: t
                    })
                })
            }
            render() {
                const {crmObjectSchema: e, field: t, readOnly: s} = this.props;
                return (0,
                ne.jsxs)(i.Fragment, {
                    children: [this.renderCRMObjectTypeSelect(), t[wt.OBJECT_TYPE] && e && this.renderPropertiesToFetch(), t[wt.OBJECT_TYPE] && e && this.renderDisplayProperties(), t[wt.OBJECT_TYPE] && e && this.renderPropertiesDisplayFormat(), t[wt.OBJECT_TYPE] && this.renderPlaceholderInput(), t[wt.OBJECT_TYPE] && (0,
                    ne.jsx)(ts.default, {
                        label: (0,
                        ne.jsx)(p.default, {
                            message: na(`defaultLabels.${Gi.CRM_OBJECT}`)
                        }),
                        children: (0,
                        ne.jsx)(Vt, {
                            display_properties: t[wt.DISPLAY_PROPERTIES],
                            display_format: t[wt.DISPLAY_FORMAT],
                            inputComponent: ta.default,
                            object_type: t[wt.OBJECT_TYPE],
                            onFieldChange: this.onDefaultChange,
                            placeholder: t[wt.PLACEHOLDER],
                            readOnly: s,
                            type: t.type,
                            value: t[wt.DEFAULT]
                        })
                    })]
                })
            }
        }
        ua.propTypes = {
            crmObjectSchema: a().object,
            crmObjectTypeOptions: a().array.isRequired,
            crmPropertyOptions: a().array.isRequired,
            editField: a().func.isRequired,
            fetchCrmObjectSchema: a().func.isRequired,
            fetchCrmObjectTypes: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            fieldErrors: a().object,
            fieldNamePath: a().string,
            readOnly: a().bool,
            selectedCrmObjectType: a().string
        };
        var ca = (0,
        d.connect)(la, aa)(ua)
          , pa = s(1694);
        const ha = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`
          , ga = (0,
        Ei.default)(Mt.default);
        function ma() {
            return (e, t) => {
                const s = t.field[wt.OBJECT_TYPE];
                return {
                    crmObjectTypeOptions: ia.getCrmObjectTypeOptions(e),
                    crmObjectSchema: ia.getCrmObjectSchema(e, {
                        objectType: s
                    }),
                    selectedCrmObjectType: ia.getSelectedCrmObjectType(e, {
                        objectType: s
                    })
                }
            }
        }
        const fa = {
            fetchCrmObjectSchema: sa.fetchCrmObjectSchema,
            fetchCrmObjectTypes: sa.fetchCrmObjectTypes
        };
        class ba extends i.Component {
            constructor(...e) {
                super(...e);
                this.onObjectTypeChange = e => {
                    this.props.editField({
                        [wt.OBJECT_TYPE]: e.target.value,
                        [wt.DEFAULT]: {
                            property: null
                        }
                    })
                }
                ;
                this.onPlaceholderChange = e => {
                    this.props.editField({
                        [wt.PLACEHOLDER]: e.target.value
                    })
                }
                ;
                this.onDefaultChange = e => {
                    this.props.editField({
                        [wt.DEFAULT]: e
                    })
                }
            }
            componentDidMount() {
                const {crmObjectSchema: e, fetchCrmObjectSchema: t, fetchCrmObjectTypes: s, field: i} = this.props;
                s();
                const n = i[wt.OBJECT_TYPE];
                n && !e && t(n)
            }
            componentDidUpdate(e) {
                const {crmObjectSchema: t, fetchCrmObjectSchema: s, field: i} = this.props
                  , n = i[wt.OBJECT_TYPE];
                e.field[wt.OBJECT_TYPE] !== n && n && !t && s(n)
            }
            renderCRMObjectTypeSelect() {
                const {crmObjectTypeOptions: e, fieldErrors: t, readOnly: s, selectedCrmObjectType: i} = this.props;
                return (0,
                ne.jsx)(rs, {
                    errors: t[wt.OBJECT_TYPE],
                    label: (0,
                    ne.jsx)(p.default, {
                        message: ha("crmobject.objectType.label")
                    }),
                    children: (0,
                    ne.jsx)(Vt, {
                        inputComponent: Es.default,
                        disabled: s,
                        onChange: this.onObjectTypeChange,
                        options: e,
                        placeholder: (0,
                        ne.jsx)(p.default, {
                            message: ha("crmobject.objectType.placeholder")
                        }),
                        required: !0,
                        value: i
                    })
                })
            }
            renderPlaceholderInput() {
                const {field: e, readOnly: t} = this.props;
                return (0,
                ne.jsx)(ts.default, {
                    label: (0,
                    ne.jsx)(p.default, {
                        message: ha("selectFields.placeholder.label")
                    }),
                    tooltip: (0,
                    ne.jsx)(p.default, {
                        message: ha("selectFields.placeholder.tooltip")
                    }),
                    children: (0,
                    ne.jsx)(Vt, {
                        inputComponent: ga,
                        onChange: this.onPlaceholderChange,
                        value: e[wt.PLACEHOLDER],
                        disabled: t
                    })
                })
            }
            render() {
                const {field: e, readOnly: t} = this.props;
                return (0,
                ne.jsxs)(i.Fragment, {
                    children: [this.renderCRMObjectTypeSelect(), e[wt.OBJECT_TYPE] && this.renderPlaceholderInput(), e[wt.OBJECT_TYPE] && (0,
                    ne.jsx)(ts.default, {
                        label: (0,
                        ne.jsx)(p.default, {
                            message: ha(`defaultLabels.${Gi.CRM_OBJECT_PROPERTY}`)
                        }),
                        children: (0,
                        ne.jsx)(Vt, {
                            inputComponent: pa.default,
                            object_type: e[wt.OBJECT_TYPE],
                            onFieldChange: this.onDefaultChange,
                            placeholder: e[wt.PLACEHOLDER],
                            readOnly: t,
                            type: e.type,
                            value: e[wt.DEFAULT]
                        })
                    })]
                })
            }
        }
        ba.propTypes = {
            crmObjectSchema: a().object,
            crmObjectTypeOptions: a().array.isRequired,
            editField: a().func.isRequired,
            fetchCrmObjectSchema: a().func.isRequired,
            fetchCrmObjectTypes: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            fieldErrors: a().object,
            readOnly: a().bool,
            selectedCrmObjectType: a().string
        };
        var Ca = (0,
        d.connect)(ma, fa)(ba)
          , Ea = s(1695);
        const Oa = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`;
        class ya extends i.Component {
            constructor(e) {
                super(e);
                this.onDefaultChange = this.onDefaultChange.bind(this)
            }
            onDefaultChange(e) {
                this.props.editField({
                    [wt.DEFAULT]: e
                })
            }
            render() {
                const {field: e, readOnly: t} = this.props;
                return (0,
                ne.jsx)(ts.default, {
                    label: (0,
                    ne.jsx)(p.default, {
                        message: Oa(`defaultLabels.${Gi.GRADIENT}`)
                    }),
                    children: (0,
                    ne.jsx)(Vt, {
                        inputComponent: Ea.default,
                        onFieldChange: this.onDefaultChange,
                        value: e[wt.DEFAULT] && e[wt.DEFAULT].asMutable({
                            deep: !0
                        }),
                        readOnly: t
                    })
                })
            }
        }
        ya.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            readOnly: a().bool
        };
        var Ta = ya
          , xa = s(1698);
        const ja = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`;
        class Ia extends i.Component {
            constructor(e) {
                super(e);
                this.onDefaultChange = this.onDefaultChange.bind(this)
            }
            onDefaultChange(e) {
                this.props.editField({
                    [wt.DEFAULT]: e
                })
            }
            render() {
                const {field: e, readOnly: t} = this.props;
                return (0,
                ne.jsx)(ts.default, {
                    label: (0,
                    ne.jsx)(p.default, {
                        message: ja(`defaultLabels.${Gi.SPACING}`)
                    }),
                    children: (0,
                    ne.jsx)(Vt, {
                        inputComponent: xa.default,
                        onFieldChange: this.onDefaultChange,
                        value: e[wt.DEFAULT],
                        readOnly: t
                    })
                })
            }
        }
        Ia.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            readOnly: a().bool
        };
        var Ra = Ia
          , Sa = s(1697);
        const Fa = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`;
        class La extends i.Component {
            constructor(e) {
                super(e);
                this.onDefaultChange = this.onDefaultChange.bind(this)
            }
            onDefaultChange(e) {
                this.props.editField({
                    [wt.DEFAULT]: e
                })
            }
            render() {
                const {field: e, readOnly: t} = this.props;
                return (0,
                ne.jsx)(ts.default, {
                    label: (0,
                    ne.jsx)(p.default, {
                        message: Fa(`defaultLabels.${Gi.BACKGROUND_IMAGE}`)
                    }),
                    children: (0,
                    ne.jsx)(Vt, {
                        inputComponent: Sa.default,
                        onFieldChange: this.onDefaultChange,
                        value: e[wt.DEFAULT],
                        readOnly: t
                    })
                })
            }
        }
        La.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            readOnly: a().bool
        };
        var va = La
          , Wa = s(1575)
          , Aa = s(1700)
          , Da = s(214)
          , Pa = s(1490);
        const Na = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`;
        function _a(e) {
            return e ? e.asMutable ? e.asMutable() : e : []
        }
        const {HTML: qa, MEDIA_BRIDGE: Ua, OEMBED: ka} = Da.EmbedTypes
          , Ga = "ALL_SOURCE_TYPES"
          , Ma = "ALL_PROVIDERS"
          , Ba = "CUSTOM_PROVIDERS"
          , wa = Object.keys(Da.oEmbedTypes).map((e => ({
            text: (0,
            h.default)(Na(`embed.supportedOembedTypes.options.${e}`)),
            value: Da.oEmbedTypes[e]
        })))
          , Ha = e => ({
            hasFetchedProviders: bn.getHasFetchedProviders(e),
            mediaBridgeProviderOptions: bn.getMediaBridgeProviderOptions(e)
        })
          , Va = {
            fetchMediaBridgeProviders: fn.fetchMediaBridgeProviders
        };
        class $a extends i.Component {
            constructor(e) {
                super(e);
                this.onSupportedSourceTypeOptionToggle = e => {
                    const {field: t} = this.props
                      , {checked: s, name: i} = e.target
                      , {[wt.SUPPORTED_SOURCE_TYPES]: n=[]} = t;
                    s ? this.onSupportedSourceTypesChange(n.concat([i])) : this.onSupportedSourceTypesChange(n.filter((e => e !== i)))
                }
                ;
                this.onSupportedSourceTypesChange = e => {
                    const {field: t} = this.props
                      , s = {
                        [wt.SUPPORTED_SOURCE_TYPES]: e
                    }
                      , i = t[wt.DEFAULT] && t[wt.DEFAULT].source_type;
                    i && !e.includes(i) && (s[wt.DEFAULT] = Object.assign({}, t[wt.DEFAULT], {
                        source_type: e[0]
                    }));
                    this.props.editField(s)
                }
                ;
                this.onSupportedOembedTypesChange = e => {
                    this.props.editField({
                        [wt.SUPPORTED_OEMBED_TYPES]: e.target.value
                    })
                }
                ;
                this.onSupportedMediaBridgeProvidersChange = e => {
                    const {field: t, editField: s} = this.props
                      , {media_bridge_object: i} = t[wt.DEFAULT] || {}
                      , {provider_id: n} = i || {}
                      , o = e.target.value
                      , d = {
                        [wt.SUPPORTED_MEDIA_BRIDGE_PROVIDERS]: o
                    };
                    n && !o.includes(n) && (d[wt.DEFAULT] = Object.assign({}, t[wt.DEFAULT], {
                        media_bridge_object: Object.assign({}, i, {
                            id: null,
                            oembed_url: "",
                            provider_id: null
                        }, (0,
                        Pa.getEmptyOEmbedValue)(i))
                    }));
                    s(d)
                }
                ;
                this.onSupportedMediaBridgeProvidersCheck = e => {
                    const {editField: t} = this.props;
                    if (e.target.name === Ma) {
                        this.setState({
                            isCheckedAllProviders: !0
                        });
                        t({
                            [wt.SUPPORTED_MEDIA_BRIDGE_PROVIDERS]: []
                        })
                    } else
                        this.setState({
                            isCheckedAllProviders: !1
                        })
                }
                ;
                this.onResizableChange = e => {
                    this.props.editField({
                        [wt.RESIZABLE]: e.target.checked
                    })
                }
                ;
                this.onShowPreviewChange = e => {
                    this.props.editField({
                        [wt.SHOW_PREVIEW]: e.target.checked
                    })
                }
                ;
                this.onDefaultChange = e => {
                    this.props.editField({
                        [wt.DEFAULT]: e
                    })
                }
                ;
                this.renderSupportedSourceTypeCheckbox = e => {
                    const {field: t, isEmail: s, readOnly: i} = this.props
                      , {[wt.SUPPORTED_SOURCE_TYPES]: n=[]} = t
                      , o = s && e === qa
                      , d = (0,
                    ne.jsx)(p.default, {
                        message: Na(`embed.supportedSourceTypes.options.${e}`)
                    });
                    return (0,
                    ne.jsx)(ld.default, {
                        checked: n.includes(e),
                        disabled: i || o,
                        name: e,
                        onChange: this.onSupportedSourceTypeOptionToggle,
                        size: "small",
                        children: o ? (0,
                        ne.jsx)(Hs.default, {
                            title: (0,
                            ne.jsx)(p.default, {
                                message: Na("embed.supportedSourceTypes.emailTooltip")
                            }),
                            children: d
                        }) : d
                    }, e)
                }
                ;
                const t = e.field[wt.SUPPORTED_MEDIA_BRIDGE_PROVIDERS];
                this.state = {
                    isCheckedAllProviders: !t || !(!t || 0 !== t.length)
                }
            }
            componentDidMount() {
                const {fetchMediaBridgeProviders: e, hasFetchedProviders: t} = this.props;
                t || e()
            }
            shouldComponentUpdate(e, t) {
                return o()(this, e, t)
            }
            componentDidUpdate(e) {
                const {fetchMediaBridgeProviders: t, hasFetchedProviders: s} = this.props
                  , {[wt.SUPPORTED_SOURCE_TYPES]: i} = e.field || {};
                i.includes(Ua) || !this.hasMediaBridgeSource || s || t()
            }
            get hasMediaBridgeSource() {
                return this.props.field[wt.SUPPORTED_SOURCE_TYPES].includes(Ua)
            }
            renderSupportedSourceTypesRadios() {
                const {field: e, fieldErrors: t, isEmail: s, mediaBridgeProviderOptions: i, readOnly: n} = this.props;
                if (i && i.length)
                    return (0,
                    ne.jsx)(rs, {
                        errors: t[wt.SUPPORTED_SOURCE_TYPES],
                        label: (0,
                        ne.jsx)(p.default, {
                            message: Na("embed.supportedSourceTypes.label")
                        }),
                        tooltip: (0,
                        ne.jsx)(U.default, {
                            message: Na("embed.supportedSourceTypes.tooltip"),
                            options: {
                                oembedProviderLink: (0,
                                ne.jsx)(M.default, {
                                    external: !0,
                                    href: "https://oembed.com/#section7",
                                    children: (0,
                                    ne.jsx)(p.default, {
                                        message: Na("embed.supportedSourceTypes.oembedProviderLinkText")
                                    })
                                })
                            }
                        }),
                        tooltipProps: {
                            maxWidth: 235
                        },
                        children: (0,
                        ne.jsx)(Wa.default, {
                            name: "supportedSourceTypes",
                            children: Object.values(Da.EmbedTypes).map(this.renderSupportedSourceTypeCheckbox)
                        })
                    });
                let o = Ga;
                e[wt.SUPPORTED_SOURCE_TYPES] && 1 === e[wt.SUPPORTED_SOURCE_TYPES].length && (o = e[wt.SUPPORTED_SOURCE_TYPES][0]);
                s && (o = Da.EmbedTypes.OEMBED);
                return (0,
                ne.jsx)(ts.default, {
                    label: (0,
                    ne.jsx)(p.default, {
                        message: Na("embed.supportedSourceTypes.label")
                    }),
                    tooltip: (0,
                    ne.jsx)(U.default, {
                        message: Na("embed.supportedSourceTypes.tooltip"),
                        options: {
                            oembedProviderLink: (0,
                            ne.jsx)(M.default, {
                                external: !0,
                                href: "https://oembed.com/#section7",
                                children: (0,
                                ne.jsx)(p.default, {
                                    message: Na("embed.supportedSourceTypes.oembedProviderLinkText")
                                })
                            })
                        }
                    }),
                    tooltipProps: {
                        maxWidth: 235
                    },
                    children: (0,
                    ne.jsxs)("div", {
                        children: [(0,
                        ne.jsx)(Sd.default, {
                            checked: o === ka,
                            disabled: n,
                            name: ka,
                            onChange: () => this.onSupportedSourceTypesChange([ka]),
                            size: "small",
                            children: (0,
                            ne.jsx)(p.default, {
                                message: Na("embed.supportedSourceTypes.options.embedUrlOnly")
                            })
                        }), (0,
                        ne.jsx)(Sd.default, {
                            checked: o === qa,
                            disabled: n || s,
                            name: qa,
                            onChange: () => this.onSupportedSourceTypesChange([qa]),
                            size: "small",
                            children: (0,
                            ne.jsx)(Hs.default, {
                                disabled: !s,
                                title: (0,
                                ne.jsx)(p.default, {
                                    message: Na("embed.supportedSourceTypes.emailTooltip")
                                }),
                                children: (0,
                                ne.jsx)(p.default, {
                                    message: Na("embed.supportedSourceTypes.options.embedCodeOnly")
                                })
                            })
                        }), (0,
                        ne.jsx)(Sd.default, {
                            checked: o === Ga,
                            disabled: n || s,
                            name: Ga,
                            onChange: () => this.onSupportedSourceTypesChange([ka, qa]),
                            size: "small",
                            children: (0,
                            ne.jsx)(Hs.default, {
                                disabled: !s,
                                title: (0,
                                ne.jsx)(p.default, {
                                    message: Na("embed.supportedSourceTypes.emailTooltip")
                                }),
                                children: (0,
                                ne.jsx)(p.default, {
                                    message: Na("embed.supportedSourceTypes.options.allTypes")
                                })
                            })
                        })]
                    })
                })
            }
            renderSupportedOembedTypesSelect() {
                const {field: e, readOnly: t} = this.props;
                if (!e[wt.SUPPORTED_SOURCE_TYPES] || !e[wt.SUPPORTED_SOURCE_TYPES].includes(ka))
                    return null;
                const s = e[wt.SUPPORTED_OEMBED_TYPES] && 1 === e[wt.SUPPORTED_OEMBED_TYPES].length ? wa.map((e => Object.assign({}, e, {
                    clearableValue: !1
                }))) : wa;
                return (0,
                ne.jsx)(ts.default, {
                    className: "m-top-3",
                    label: (0,
                    ne.jsx)(p.default, {
                        message: Na("embed.supportedOembedTypes.label")
                    }),
                    tooltip: (0,
                    ne.jsx)(U.default, {
                        message: Na("embed.supportedOembedTypes.tooltip.message"),
                        options: {
                            documentationLink: (0,
                            ne.jsx)(M.default, {
                                external: !0,
                                href: "https://developers.hubspot.com/docs/cms/building-blocks/module-theme-fields/oembed",
                                children: (0,
                                ne.jsx)(p.default, {
                                    message: Na("embed.supportedOembedTypes.tooltip.documentationLink")
                                })
                            })
                        }
                    }),
                    children: (0,
                    ne.jsx)(Vt, {
                        inputComponent: Es.default,
                        disabled: t,
                        onChange: this.onSupportedOembedTypesChange,
                        multi: !0,
                        options: s,
                        required: !0,
                        value: _a(e[wt.SUPPORTED_OEMBED_TYPES])
                    })
                })
            }
            renderMediaBridgeProvidersOptions() {
                const {field: e, mediaBridgeProviderOptions: t, readOnly: s} = this.props
                  , n = _a(e[wt.SUPPORTED_MEDIA_BRIDGE_PROVIDERS])
                  , o = [...t];
                return t && t.length && this.hasMediaBridgeSource ? (0,
                ne.jsx)(ts.default, {
                    className: "m-top-3",
                    label: (0,
                    ne.jsx)(p.default, {
                        message: Na("embed.supportedMediaBridgeProviders.label")
                    }),
                    tooltip: (0,
                    ne.jsx)(U.default, {
                        message: Na("embed.supportedMediaBridgeProviders.tooltip")
                    }),
                    children: (0,
                    ne.jsxs)(i.Fragment, {
                        children: [(0,
                        ne.jsx)(Sd.default, {
                            checked: this.state.isCheckedAllProviders,
                            disabled: s,
                            name: Ma,
                            onChange: this.onSupportedMediaBridgeProvidersCheck,
                            size: "small",
                            children: (0,
                            ne.jsx)(_i.default, {
                                title: (0,
                                ne.jsx)(p.default, {
                                    message: Na("embed.supportedMediaBridgeProviders.options.allProviders.tooltip")
                                }),
                                children: (0,
                                ne.jsx)(p.default, {
                                    message: Na("embed.supportedMediaBridgeProviders.options.allProviders.label")
                                })
                            })
                        }), (0,
                        ne.jsx)(Sd.default, {
                            checked: !this.state.isCheckedAllProviders,
                            disabled: s,
                            name: Ba,
                            onChange: this.onSupportedMediaBridgeProvidersCheck,
                            size: "small",
                            children: (0,
                            ne.jsx)(_i.default, {
                                title: (0,
                                ne.jsx)(p.default, {
                                    message: Na("embed.supportedMediaBridgeProviders.options.custom.tooltip")
                                }),
                                children: (0,
                                ne.jsx)(p.default, {
                                    message: Na("embed.supportedMediaBridgeProviders.options.custom.label")
                                })
                            })
                        }), !this.state.isCheckedAllProviders && (0,
                        ne.jsx)(Vt, {
                            disabled: s,
                            inputComponent: Es.default,
                            multi: !0,
                            onChange: this.onSupportedMediaBridgeProvidersChange,
                            options: o,
                            required: !0,
                            value: n
                        })]
                    })
                }) : null
            }
            renderSizeControlToggle() {
                const {field: e, readOnly: t} = this.props;
                return (0,
                ne.jsxs)("div", {
                    className: "m-top-6",
                    children: [(0,
                    ne.jsx)($s.default, {
                        className: "p-right-4 p-top-1",
                        children: (0,
                        ne.jsx)(p.default, {
                            message: Na("embed.sizeControlOptionsLabel")
                        })
                    }), (0,
                    ne.jsx)(Vt, {
                        checked: e[wt.RESIZABLE],
                        defaultChecked: !0,
                        disabled: t,
                        inputComponent: Wo.default,
                        onChange: this.onResizableChange,
                        required: !0,
                        size: "extra-small"
                    })]
                })
            }
            renderShowPreviewToggle() {
                const {field: e, readOnly: t} = this.props;
                return (0,
                ne.jsxs)("div", {
                    className: "m-top-3",
                    children: [(0,
                    ne.jsx)($s.default, {
                        className: "p-right-4 p-top-1",
                        children: (0,
                        ne.jsx)(p.default, {
                            message: Na("embed.showPreview.labelGeneral")
                        })
                    }), (0,
                    ne.jsx)(Vt, {
                        checked: e[wt.SHOW_PREVIEW],
                        defaultChecked: !0,
                        disabled: t,
                        inputComponent: Wo.default,
                        onChange: this.onShowPreviewChange,
                        required: !0,
                        size: "extra-small"
                    })]
                })
            }
            render() {
                const {field: e, isEmail: t, readOnly: s} = this.props;
                return (0,
                ne.jsxs)(Bt.default, {
                    children: [this.renderSupportedSourceTypesRadios(), this.renderSupportedOembedTypesSelect(), this.renderMediaBridgeProvidersOptions(), (0,
                    ne.jsx)(ts.default, {
                        label: (0,
                        ne.jsx)(p.default, {
                            message: Na(`defaultLabels.${Gi.EMBED}`)
                        }),
                        children: (0,
                        ne.jsx)(Vt, {
                            inputComponent: Aa.default,
                            isInEmail: t,
                            onFieldChange: this.onDefaultChange,
                            readOnly: s || !e[wt.SUPPORTED_SOURCE_TYPES][0],
                            resizable: e[wt.RESIZABLE],
                            show_preview: e[wt.SHOW_PREVIEW],
                            supported_media_bridge_providers: e[wt.SUPPORTED_MEDIA_BRIDGE_PROVIDERS],
                            supported_source_types: e[wt.SUPPORTED_SOURCE_TYPES],
                            supported_oembed_types: e[wt.SUPPORTED_OEMBED_TYPES],
                            type: e.type,
                            value: e[wt.DEFAULT]
                        })
                    }), this.renderSizeControlToggle(), this.renderShowPreviewToggle()]
                })
            }
        }
        $a.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            fieldErrors: a().object,
            isEmail: a().bool,
            readOnly: a().bool,
            fetchMediaBridgeProviders: a().func.isRequired,
            hasFetchedProviders: a().bool,
            mediaBridgeProviderOptions: a().arrayOf(a().object)
        };
        var Ya = (0,
        d.connect)(Ha, Va)($a)
          , za = s(1495)
          , Ka = s(1706)
          , Ja = s(1319)
          , Xa = s(1322)
          , Za = s(1320);
        const Qa = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`
          , eu = (0,
        Ei.default)(li.default)
          , tu = (0,
        Ei.default)(Mt.default)
          , su = {
            NAME: "hs_name",
            PATH: "hs_path"
        };
        function iu(e) {
            return e ? e.asMutable ? e.asMutable() : e : []
        }
        const nu = (e, t) => {
            const s = "id";
            return {
                hubDbTable: Ja.getHubDbTable(e, {
                    id: t.field[wt.TABLE_NAME_OR_ID]
                }),
                isUnpublished: Ja.getIsUnpublished(e, {
                    [s]: t.field[wt.TABLE_NAME_OR_ID]
                })
            }
        }
          , ou = {
            fetchHubDbTable: Xa.fetchHubDbTable
        };
        class du extends i.Component {
            constructor(...e) {
                super(...e);
                this.onTableChange = e => {
                    const {editField: t} = this.props;
                    t({
                        [wt.TABLE_NAME_OR_ID]: e.target.value,
                        [wt.DEFAULT]: {
                            id: null
                        }
                    })
                }
                ;
                this.onColumnsToFetchChange = e => {
                    this.props.editField({
                        [wt.COLUMNS_TO_FETCH]: e.target.value
                    })
                }
                ;
                this.onDisplayColumnsChange = e => {
                    this.props.editField({
                        [wt.DISPLAY_COLUMNS]: e.target.value
                    })
                }
                ;
                this.onDisplayFormatChange = e => {
                    this.props.editField({
                        [wt.DISPLAY_FORMAT]: e.target.value
                    })
                }
                ;
                this.onPlaceholderChange = e => {
                    this.props.editField({
                        [wt.PLACEHOLDER]: e.target.value
                    })
                }
                ;
                this.onDefaultChange = e => {
                    this.props.editField({
                        [wt.DEFAULT]: e
                    })
                }
            }
            componentDidUpdate(e) {
                const {editField: t, fetchHubDbTable: s, field: i, hubDbTable: n} = this.props;
                e.field[wt.TABLE_NAME_OR_ID] === i[wt.TABLE_NAME_OR_ID] || n || s(i[wt.TABLE_NAME_OR_ID]);
                if (!(0,
                c.isEqual)(e.hubDbTable, n)) {
                    const e = iu(i[wt.COLUMNS_TO_FETCH])
                      , s = iu(i[wt.DISPLAY_COLUMNS])
                      , o = {}
                      , d = this.updateColumns(e, n)
                      , r = this.updateColumns(s, n);
                    e && d && !(0,
                    c.isEqual)(e, d) && (o[wt.COLUMNS_TO_FETCH] = d);
                    s && r && !(0,
                    c.isEqual)(s, r) && (o[wt.DISPLAY_COLUMNS] = r);
                    t(Object.assign({}, o))
                }
            }
            getColumnOptions(e=!0) {
                const {columns: t, useForPages: s} = this.props.hubDbTable || {};
                if (!t)
                    return null;
                const i = s ? [{
                    text: (0,
                    h.default)(Qa("hubdbrow.builtInColumns.name")),
                    value: su.NAME,
                    help: su.NAME
                }, {
                    text: (0,
                    h.default)(Qa("hubdbrow.builtInColumns.path")),
                    value: su.PATH,
                    help: su.PATH
                }] : [];
                return t.reduce(( (t, s) => {
                    !e && Za.DISPLAY_COLUMN_EXCLUSIONS[s.type] || t.push({
                        text: s.label,
                        value: s.name,
                        help: s.name
                    });
                    return t
                }
                ), i)
            }
            updateColumns(e, t) {
                if (!e)
                    return [];
                const {columns: s, useForPages: i} = t || {}
                  , n = i ? {
                    [su.NAME]: su.NAME,
                    [su.PATH]: su.PATH
                } : {}
                  , o = s.reduce(( (e, t) => {
                    e[t.name] = t.name;
                    return e
                }
                ), n);
                return e.filter((e => o[e]))
            }
            renderHubDBTableSelect() {
                const {contentTypes: e, fieldErrors: t, hubDbTable: s, readOnly: i, hostTemplateTypes: n} = this.props;
                return (0,
                ne.jsx)(rs, {
                    errors: t[wt.TABLE_NAME_OR_ID],
                    className: "m-top-3",
                    label: (0,
                    ne.jsx)(p.default, {
                        message: Qa("hubdbrow.table")
                    }),
                    children: (0,
                    ne.jsx)(Vt, {
                        contentTypes: e,
                        disabled: i,
                        editor: rd.default.DESIGN_MANAGER,
                        inputComponent: za.default,
                        isInRowField: !0,
                        hostTemplateTypes: n,
                        onChange: this.onTableChange,
                        required: !0,
                        type: Gi.HUBDB_TABLE,
                        value: s && s.id
                    })
                })
            }
            renderColumnsToFetch() {
                const {field: e, hubDbTable: t, isUnpublished: s, readOnly: n} = this.props;
                return (0,
                ne.jsx)(ts.default, {
                    className: "m-top-3",
                    label: (0,
                    ne.jsx)(p.default, {
                        message: Qa("hubdbrow.columnsToFetch.label")
                    }),
                    tooltip: (0,
                    ne.jsxs)(i.Fragment, {
                        children: [(0,
                        ne.jsx)("p", {
                            children: (0,
                            ne.jsx)(p.default, {
                                message: Qa("hubdbrow.columnsToFetch.tooltip1")
                            })
                        }), (0,
                        ne.jsx)("p", {
                            children: (0,
                            ne.jsx)(p.default, {
                                message: Qa("hubdbrow.columnsToFetch.tooltip2")
                            })
                        })]
                    }),
                    tooltipProps: {
                        headingText: (0,
                        ne.jsx)(p.default, {
                            message: Qa("hubdbrow.columnsToFetch.tooltipTitle")
                        }),
                        use: "longform"
                    },
                    children: (0,
                    ne.jsx)(Vt, {
                        disabled: n || !(t && t.id) || s,
                        inputComponent: Es.default,
                        multi: !0,
                        onChange: this.onColumnsToFetchChange,
                        options: this.getColumnOptions(),
                        placeholder: (0,
                        ne.jsx)(p.default, {
                            message: Qa("hubdbrow.columnsToFetch.placeholder")
                        }),
                        value: iu(e[wt.COLUMNS_TO_FETCH])
                    })
                })
            }
            renderDisplayColumns() {
                const {field: e, hubDbTable: t, isUnpublished: s, readOnly: n} = this.props
                  , o = !1;
                return (0,
                ne.jsx)(ts.default, {
                    className: "m-top-3",
                    label: (0,
                    ne.jsx)(p.default, {
                        message: Qa("hubdbrow.displayColumns.label")
                    }),
                    tooltip: (0,
                    ne.jsxs)(i.Fragment, {
                        children: [(0,
                        ne.jsx)("p", {
                            children: (0,
                            ne.jsx)(p.default, {
                                message: Qa("hubdbrow.displayColumns.tooltip1")
                            })
                        }), (0,
                        ne.jsx)("p", {
                            children: (0,
                            ne.jsx)(p.default, {
                                message: Qa("hubdbrow.displayColumns.tooltip2")
                            })
                        })]
                    }),
                    tooltipProps: {
                        headingText: (0,
                        ne.jsx)(p.default, {
                            message: Qa("hubdbrow.displayColumns.tooltipTitle")
                        }),
                        use: "longform"
                    },
                    children: (0,
                    ne.jsx)(Vt, {
                        disabled: n || !(t && t.id) || s,
                        inputComponent: Es.default,
                        multi: !0,
                        onChange: this.onDisplayColumnsChange,
                        options: this.getColumnOptions(o),
                        placeholder: (0,
                        ne.jsx)(p.default, {
                            message: Qa("hubdbrow.displayColumns.placeholder")
                        }),
                        required: !0,
                        value: iu(e[wt.DISPLAY_COLUMNS])
                    })
                })
            }
            renderColumnsDisplayFormat() {
                const {field: e, isUnpublished: t, readOnly: s} = this.props;
                return (0,
                ne.jsx)(ts.default, {
                    className: "m-top-3",
                    label: (0,
                    ne.jsx)(p.default, {
                        message: Qa("hubdbrow.displayFormat.label")
                    }),
                    tooltip: (0,
                    ne.jsxs)(i.Fragment, {
                        children: [(0,
                        ne.jsx)("p", {
                            children: (0,
                            ne.jsx)(p.default, {
                                message: Qa("hubdbrow.displayFormat.tooltip1")
                            })
                        }), (0,
                        ne.jsx)("p", {
                            children: (0,
                            ne.jsx)(p.default, {
                                message: Qa("hubdbrow.displayFormat.tooltip2")
                            })
                        })]
                    }),
                    tooltipProps: {
                        headingText: (0,
                        ne.jsx)(p.default, {
                            message: Qa("hubdbrow.displayFormat.tooltipTitle")
                        }),
                        use: "longform"
                    },
                    children: (0,
                    ne.jsx)(Vt, {
                        disabled: s || !e[wt.DISPLAY_COLUMNS] || t,
                        inputComponent: eu,
                        maxHeight: 300,
                        onChange: this.onDisplayFormatChange,
                        placeholder: (0,
                        h.default)(Qa("hubdbrow.displayFormat.placeholder")),
                        required: !0,
                        shrink: !0,
                        value: e[wt.DISPLAY_FORMAT]
                    })
                })
            }
            renderPlaceholderInput() {
                const {field: e, hubDbTable: t, isUnpublished: s, readOnly: i} = this.props;
                return (0,
                ne.jsx)(ts.default, {
                    label: (0,
                    ne.jsx)(p.default, {
                        message: Qa("selectFields.placeholder.label")
                    }),
                    tooltip: (0,
                    ne.jsx)(p.default, {
                        message: Qa("selectFields.placeholder.tooltip")
                    }),
                    children: (0,
                    ne.jsx)(Vt, {
                        disabled: i || !(t && t.id) || s,
                        inputComponent: tu,
                        onChange: this.onPlaceholderChange,
                        value: e[wt.PLACEHOLDER]
                    })
                })
            }
            render() {
                const {contentTypes: e, field: t, isEmail: s, readOnly: n, hostTemplateTypes: o} = this.props;
                return t[wt.TABLE_NAME_OR_ID] ? (0,
                ne.jsxs)(i.Fragment, {
                    children: [this.renderHubDBTableSelect(), this.renderColumnsToFetch(), this.renderDisplayColumns(), this.renderColumnsDisplayFormat(), this.renderPlaceholderInput(), (0,
                    ne.jsx)(ts.default, {
                        label: (0,
                        ne.jsx)(p.default, {
                            message: Qa(`defaultLabels.${Gi.HUBDB_ROW}`)
                        }),
                        children: (0,
                        ne.jsx)(Vt, {
                            contentTypes: e,
                            columns_to_fetch: t[wt.COLUMNS_TO_FETCH],
                            display_columns: t[wt.DISPLAY_COLUMNS],
                            display_format: t[wt.DISPLAY_FORMAT],
                            editor: rd.default.DESIGN_MANAGER,
                            inputComponent: Ka.default,
                            hostTemplateTypes: o,
                            isInEmail: s,
                            onFieldChange: this.onDefaultChange,
                            placeholder: t[wt.PLACEHOLDER],
                            readOnly: n,
                            table_name_or_id: t[wt.TABLE_NAME_OR_ID],
                            type: t.type,
                            value: t[wt.DEFAULT]
                        })
                    })]
                }) : this.renderHubDBTableSelect()
            }
        }
        du.propTypes = {
            contentTypes: a().array,
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            fieldErrors: a().object,
            hostTemplateTypes: a().array,
            isEmail: a().bool,
            readOnly: a().bool,
            fetchHubDbTable: a().func.isRequired,
            hubDbTable: a().object,
            isUnpublished: a().bool
        };
        var ru = (0,
        d.connect)(nu, ou)(du)
          , lu = s(1707);
        const au = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`;
        class uu extends i.Component {
            constructor(...e) {
                super(...e);
                this.onDefaultChange = e => {
                    this.props.editField({
                        [wt.DEFAULT]: e
                    })
                }
            }
            render() {
                const {field: e, readOnly: t} = this.props;
                return (0,
                ne.jsx)(ts.default, {
                    label: (0,
                    ne.jsx)(p.default, {
                        message: au(`defaultLabels.${Gi.BORDER}`)
                    }),
                    children: (0,
                    ne.jsx)(Vt, {
                        allow_custom_border_sides: !0,
                        inputComponent: lu.default,
                        onFieldChange: this.onDefaultChange,
                        value: e[wt.DEFAULT],
                        readOnly: t
                    })
                })
            }
        }
        uu.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            readOnly: a().bool
        };
        var cu = uu
          , pu = s(1708);
        const hu = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`;
        class gu extends i.PureComponent {
            constructor(...e) {
                super(...e);
                this.onDefaultChange = e => {
                    this.props.editField({
                        [wt.DEFAULT]: e
                    })
                }
            }
            render() {
                const {field: e, readOnly: t} = this.props;
                return (0,
                ne.jsx)("div", {
                    className: "custom-widget-editor-font-picker",
                    children: (0,
                    ne.jsx)(ts.default, {
                        label: (0,
                        ne.jsx)(p.default, {
                            message: hu(`defaultLabels.${Gi.ALIGNMENT}`)
                        }),
                        children: (0,
                        ne.jsx)(pu.default, {
                            onFieldChange: this.onDefaultChange,
                            value: e[wt.DEFAULT],
                            readOnly: t,
                            buttonSize: "small"
                        })
                    })
                })
            }
        }
        gu.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            readOnly: a().bool
        };
        var mu = gu
          , fu = s(1709);
        const bu = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`;
        class Cu extends i.PureComponent {
            constructor(...e) {
                super(...e);
                this.onDefaultChange = e => {
                    this.props.editField({
                        [wt.DEFAULT]: e
                    })
                }
            }
            render() {
                const {field: e, readOnly: t} = this.props;
                return (0,
                ne.jsx)("div", {
                    className: "custom-widget-editor-font-picker",
                    children: (0,
                    ne.jsx)(ts.default, {
                        label: (0,
                        ne.jsx)(p.default, {
                            message: bu(`defaultLabels.${Gi.TEXT_ALIGNMENT}`)
                        }),
                        children: (0,
                        ne.jsx)(fu.default, {
                            onFieldChange: this.onDefaultChange,
                            value: e[wt.DEFAULT],
                            readOnly: t,
                            buttonSize: "small"
                        })
                    })
                })
            }
        }
        Cu.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            readOnly: a().bool
        };
        var Eu = Cu
          , Ou = s(1710);
        const yu = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`;
        function Tu(e) {
            return e ? e.asMutable ? e.asMutable() : e : []
        }
        function xu() {
            return (e, t) => {
                const s = N.getSelectedFieldBreadcrumbs(e, t).map((e => e.name)).join(".");
                return {
                    crmPropertyOptions: ia.getCrmObjectPropertyOptions(e, {
                        objectType: Gi.PRODUCT
                    }),
                    crmObjectSchema: ia.getCrmObjectSchema(e, {
                        objectType: Gi.PRODUCT
                    }),
                    fieldNamePath: `module.${s || t.field.name}`
                }
            }
        }
        const ju = {
            fetchCrmObjectSchema: sa.fetchCrmObjectSchema
        };
        class Iu extends i.Component {
            constructor(...e) {
                super(...e);
                this.onPropertiesToFetchChange = e => {
                    this.props.editField({
                        [wt.PROPERTIES_TO_FETCH]: e.target.value
                    })
                }
                ;
                this.onDefaultChange = e => {
                    this.props.editField({
                        [wt.DEFAULT]: e
                    })
                }
            }
            componentDidMount() {
                const {crmObjectSchema: e, fetchCrmObjectSchema: t} = this.props;
                e || t(Gi.PRODUCT)
            }
            renderPropertiesToFetch() {
                const {crmPropertyOptions: e, field: t, fieldNamePath: s, readOnly: i} = this.props;
                return (0,
                ne.jsx)(ts.default, {
                    label: (0,
                    ne.jsx)(p.default, {
                        message: yu("crmobject.propertiesToFetch.label")
                    }),
                    tooltip: (0,
                    ne.jsx)(Xe.default, {
                        message: yu("crmobject.propertiesToFetch.tooltip"),
                        options: {
                            fieldNamePath: s
                        }
                    }),
                    tooltipProps: {
                        use: "longform"
                    },
                    children: (0,
                    ne.jsx)(Vt, {
                        inputComponent: Es.default,
                        disabled: i,
                        onChange: this.onPropertiesToFetchChange,
                        multi: !0,
                        options: e,
                        placeholder: (0,
                        ne.jsx)(p.default, {
                            message: yu("crmobject.propertiesToFetch.placeholder")
                        }),
                        required: !0,
                        value: Tu(t[wt.PROPERTIES_TO_FETCH])
                    })
                })
            }
            render() {
                const {crmObjectSchema: e, field: t, readOnly: s} = this.props;
                return (0,
                ne.jsxs)(i.Fragment, {
                    children: [e && this.renderPropertiesToFetch(), (0,
                    ne.jsx)(ts.default, {
                        label: (0,
                        ne.jsx)(p.default, {
                            message: yu(`defaultLabels.${Gi.PRODUCT}`)
                        }),
                        children: (0,
                        ne.jsx)(Vt, {
                            inputComponent: Ou.default,
                            object_type: Gi.PRODUCT,
                            onFieldChange: this.onDefaultChange,
                            readOnly: s,
                            type: t.type,
                            value: t[wt.DEFAULT]
                        })
                    })]
                })
            }
        }
        Iu.propTypes = {
            crmObjectSchema: a().object,
            crmPropertyOptions: a().array.isRequired,
            editField: a().func.isRequired,
            fetchCrmObjectSchema: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            fieldNamePath: a().string,
            readOnly: a().bool
        };
        var Ru = (0,
        d.connect)(xu, ju)(Iu);
        const Su = {
            episode: "episode",
            show: "show"
        };
        var Fu = ({editField: e, field: t}) => {
            const s = t => {
                e({
                    entity_type: t
                })
            }
            ;
            return (0,
            ne.jsx)(es.default, {
                label: (0,
                ne.jsx)(p.default, {
                    message: "DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.podcast.entityType.label"
                }),
                children: (0,
                ne.jsxs)(Wa.default, {
                    name: "entity_type",
                    children: [(0,
                    ne.jsx)(Sd.default, {
                        checked: Boolean(!t.entity_type || t.entity_type === Su.episode),
                        size: "small",
                        onChange: ({currentTarget: {checked: e}}) => {
                            e && s(Su.episode)
                        }
                        ,
                        children: (0,
                        ne.jsx)(p.default, {
                            message: "DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.podcast.entityType.episode"
                        })
                    }), (0,
                    ne.jsx)(Sd.default, {
                        checked: t.entity_type === Su.show,
                        size: "small",
                        onChange: ({currentTarget: {checked: e}}) => {
                            e && s(Su.show)
                        }
                        ,
                        children: (0,
                        ne.jsx)(p.default, {
                            message: "DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.podcast.entityType.show"
                        })
                    })]
                })
            })
        }
        ;
        const Lu = {
            [Gi.TEXT]: yd,
            [Gi.RICH_TEXT]: Rd,
            [Gi.BOOLEAN]: Wd,
            [Gi.CHOICE]: Qd,
            [Gi.NUMBER]: nr,
            [Gi.DATE]: rr,
            [Gi.DATE_TIME]: ur,
            [Gi.COLOR]: fr,
            [Gi.CTA]: Er,
            [Gi.IMAGE]: Gr,
            [Gi.FILE]: Vr,
            [Gi.BLOG]: fl,
            [Gi.TAG]: vl,
            [Gi.FORM]: ea,
            [Gi.WORKFLOW]: fl,
            [Gi.FOLLOW_UP_EMAIL]: Cl,
            [Gi.EMAIL]: fl,
            [Gi.HUBDB_TABLE]: fl,
            [Gi.PAGE]: fl,
            [Gi.MENU]: fl,
            [Gi.HUBL]: Kr,
            [Gi.HTML]: Kr,
            [Gi.MEETING]: fl,
            [Gi.SIMPLE_MENU]: Zr,
            [Gi.LOGO]: ol,
            [Gi.ICON]: Lr,
            [Gi.SFDC_CAMPAIGN]: fl,
            [Gi.SURVEY]: fl,
            [Gi.FONT]: xl,
            [Gi.URL]: Gl,
            [Gi.LINK]: Gl,
            [Gi.VIDEO]: $l,
            [Gi.CRM_OBJECT]: ca,
            [Gi.CRM_OBJECT_PROPERTY]: Ca,
            [Gi.GRADIENT]: Ta,
            [Gi.SPACING]: Ra,
            [Gi.BACKGROUND_IMAGE]: va,
            [Gi.EMBED]: Ya,
            [Gi.HUBDB_ROW]: ru,
            [Gi.BORDER]: cu,
            [Gi.ALIGNMENT]: mu,
            [Gi.TEXT_ALIGNMENT]: Eu,
            [Gi.PAYMENT]: fl,
            [Gi.PRODUCT]: Ru,
            [Gi.PODCAST]: Fu
        }
          , vu = (0,
        Vi.default)({
            [Gi.SIMPLE_MENU]: null,
            [Gi.RICH_TEXT]: null,
            [Gi.HTML]: null,
            [Gi.HUBL]: null
        });
        class Wu extends i.PureComponent {
            renderMissingRequiredDefaultWarning() {
                const {fieldWarnings: e} = this.props
                  , t = e && e[wt.DEFAULT];
                if (!t || !t.length)
                    return null;
                const s = t.find((e => e.type === bd.MODULE_DATA_VALIDATION_REQUIRED_FIELD_MISSING || e.type === bd.MODULE_DATA_VALIDATION_LOCKED_REQUIRED_FIELD_MISSING));
                return s && (0,
                ne.jsx)(k.default, {
                    className: "m-bottom-2",
                    type: "warning",
                    children: (0,
                    ne.jsx)(p.default, {
                        message: `DesignEditorsUI.customWidgetEditor.errors.field.${s.type}`
                    })
                })
            }
            render() {
                const {compact: e, customWidgetContentTypes: t, customWidgetHostTemplateTypes: s, customWidgetId: n, editField: o, field: d, fieldErrors: r, fieldWarnings: l, isEmailOrAnyType: a, isV1: u, onPreviewClick: c, readOnly: p} = this.props
                  , h = Lu[d.type]
                  , g = d.set("default", (0,
                fd.getDefaultScalarValue)(d));
                return e && vu[d.type] ? (0,
                ne.jsx)(cl, {
                    customWidgetId: n,
                    field: d,
                    readOnly: p
                }) : h ? (0,
                ne.jsxs)(i.Fragment, {
                    children: [this.renderMissingRequiredDefaultWarning(), (0,
                    ne.jsx)(h, {
                        compact: e,
                        customWidgetId: n,
                        isV1: u,
                        editField: o,
                        field: g,
                        fieldErrors: r,
                        fieldWarnings: l,
                        contentTypes: t,
                        hostTemplateTypes: s,
                        readOnly: p,
                        onPreviewClick: c,
                        isEmail: a
                    })]
                }) : null
            }
        }
        Wu.propTypes = {
            customWidgetContentTypes: a().array,
            customWidgetHostTemplateTypes: a().array,
            customWidgetId: u.default.customWidgetId.isRequired,
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            fieldErrors: a().object,
            fieldWarnings: a().object,
            compact: a().bool.isRequired,
            readOnly: a().bool,
            isV1: a().bool.isRequired,
            onPreviewClick: a().func,
            isEmailOrAnyType: a().bool.isRequired
        };
        Wu.defaultProps = {
            customWidgetContentTypes: null,
            customWidgetHostTemplateTypes: null,
            fieldErrors: {},
            fieldWarnings: {},
            compact: !1,
            onPreviewClick: ge.default
        };
        var Au = s(205);
        const Du = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.${e}`
          , Pu = e => Du(`displayConditions.${e}`)
          , Nu = "^w*$";
        function _u() {
            return (e, t) => {
                const s = P.makeGetCustomWidgetBufferFields()(e, t);
                return {
                    controllingFields: (0,
                    he.getControllingFields)(s, t.field.name)
                }
            }
        }
        class qu extends i.PureComponent {
            constructor(e) {
                super(e);
                this.onToggleClick = e => {
                    const t = e.target.checked;
                    this.setState({
                        enabled: t
                    });
                    this.props.editField({
                        [wt.VISIBILITY]: t ? this.state.visibility : null
                    })
                }
                ;
                this.onVisibilityPropertyChange = (e, t) => {
                    const s = t.target.value
                      , i = this.props.field[wt.VISIBILITY] || {};
                    this.setState({
                        enabled: !0,
                        visibility: Object.assign({}, this.state.visibility, {
                            [e]: s
                        })
                    });
                    this.props.editField({
                        [wt.VISIBILITY]: Object.assign({}, i, {
                            [e]: s
                        })
                    })
                }
                ;
                this.filterControllingFieldsOptions = (e, t) => t.length ? (0,
                he.findMatchingFields)(e, t, !1) : e;
                this.state = this.getState(e.field)
            }
            componentDidMount() {
                const e = this.props.field[wt.VISIBILITY];
                e && !e.operator && this.state.visibility.operator && this.props.editField({
                    [wt.VISIBILITY]: this.state.visibility
                })
            }
            componentDidUpdate(e) {
                const {field: t} = e
                  , {field: s} = this.props;
                t.id === s.id && (0,
                c.isEqual)(t.visibility, s.visibility) || this.setState(this.getState(s))
            }
            getState(e) {
                const t = e[wt.VISIBILITY]
                  , {controlling_value_regex: s} = t || {};
                let i = t ? t.operator : null;
                i || (i = s === Nu ? Au.STRING_OPERATORS.EMPTY : s ? Au.STRING_OPERATORS.MATCHES_REGEX : Au.STRING_OPERATORS.NOT_EMPTY);
                return {
                    enabled: !!t,
                    visibility: Object.assign({}, t, {
                        operator: i
                    })
                }
            }
            getControllingFieldsOptions() {
                return this.props.controllingFields.map((e => Object.assign({
                    text: e.label,
                    value: e.name,
                    help: e.name
                }, e)))
            }
            getOperatorsOptions() {
                return Object.keys(Au.STRING_OPERATORS).map((e => ({
                    text: (0,
                    h.default)(Pu(`operators.${e}`)),
                    value: e
                })))
            }
            renderFieldValue({help: e}) {
                return e ? (0,
                ne.jsx)("span", {
                    className: "controlling-field-name is--code",
                    children: (0,
                    ne.jsx)(At.default, {
                        children: e
                    })
                }) : (0,
                ne.jsx)(p.default, {
                    message: Pu("placeholders.field")
                })
            }
            renderDisplayConditionsHelpTooltip() {
                const e = (0,
                ne.jsx)(Nt.default, {
                    children: (0,
                    ne.jsxs)("div", {
                        children: [(0,
                        ne.jsx)("p", {
                            children: (0,
                            ne.jsx)(Xe.default, {
                                message: Pu("helpTooltip.explanation")
                            })
                        }), (0,
                        ne.jsxs)(Pt.default, {
                            styled: !0,
                            children: [(0,
                            ne.jsx)(p.default, {
                                message: Pu("helpTooltip.examples.address")
                            }), (0,
                            ne.jsx)(p.default, {
                                message: Pu("helpTooltip.examples.imageDescription")
                            })]
                        }), (0,
                        ne.jsx)(p.default, {
                            message: Pu("helpTooltip.moreHelp")
                        }), (0,
                        ne.jsx)(M.default, {
                            className: "m-left-1",
                            target: "_blank",
                            href: "http://designers.hubspot.com/docs/modules/field-options-and-usage#display-conditions",
                            children: (0,
                            ne.jsx)(p.default, {
                                message: Pu("helpTooltip.learnMore")
                            })
                        })]
                    })
                });
                return (0,
                ne.jsx)(_i.default, {
                    title: e,
                    color: Pi.BATTLESHIP,
                    tooltipPlacement: "top left",
                    tooltipProps: {
                        headingText: (0,
                        h.default)(Pu("helpTooltip.headingText")),
                        className: "field-edit-help-tooltip",
                        use: "longform"
                    }
                })
            }
            renderDisplayConditionsTitle() {
                const e = (0,
                c.pick)(this.props.fieldErrors, ["controlling_field", "controlling_value_regex"])
                  , t = (0,
                c.pick)(this.props.fieldWarnings, ["controlling_field", "controlling_value_regex"]);
                return (0,
                ne.jsxs)(_.default, {
                    align: "end",
                    children: [(0,
                    ne.jsx)(gn, {
                        className: "m-right-2",
                        fieldErrors: e,
                        i18nKey: Du("contentOptions.hasFieldError")
                    }), (0,
                    ne.jsx)(mn, {
                        className: "m-right-2",
                        fieldWarnings: t,
                        i18nKey: Du("contentOptions.hasFieldWarning")
                    }), (0,
                    ne.jsx)("span", {
                        className: "m-right-1",
                        children: (0,
                        ne.jsx)(p.default, {
                            message: Pu("accordionLabel")
                        })
                    }), this.renderDisplayConditionsHelpTooltip()]
                })
            }
            render() {
                const {enabled: e, visibility: t} = this.state
                  , {controllingFields: s, field: i, fieldErrors: n, fieldWarnings: o, onOpenChange: d, open: r, readOnly: l} = this.props
                  , {controlling_field: a, controlling_field_path: u, controlling_value_regex: c, operator: g, property: m} = t
                  , f = s.find((e => u ? e.name === u : e.id === a))
                  , b = (0,
                ne.jsx)(Wo.default, {
                    checked: e,
                    onChange: this.onToggleClick,
                    size: "extra-small",
                    readOnly: l
                })
                  , C = g === Au.STRING_OPERATORS.EMPTY || g === Au.STRING_OPERATORS.NOT_EMPTY || l
                  , E = g === Au.STRING_OPERATORS.MATCHES_REGEX ? (0,
                h.default)(Pu("placeholders.regex")) : (0,
                h.default)(Pu("placeholders.value"));
                return (0,
                ne.jsx)(Ut.default, {
                    actions: b,
                    containerClassName: "field-edit-accordion-container",
                    titleText: this.renderDisplayConditionsTitle(),
                    onOpenChange: d,
                    open: r,
                    children: (0,
                    ne.jsx)("div", {
                        children: (0,
                        ne.jsxs)(Bt.default, {
                            children: [(0,
                            ne.jsx)(rs, {
                                className: "m-bottom-2",
                                errors: n.controlling_field,
                                label: (0,
                                h.default)(Pu("conditionLabel")),
                                children: (0,
                                ne.jsx)(Vt, {
                                    dropdownClassName: "controlling-field-select-dropdown",
                                    inputComponent: Es.default,
                                    onChange: (...e) => this.onVisibilityPropertyChange("controlling_field_path", ...e),
                                    filterOptions: this.filterControllingFieldsOptions,
                                    options: this.getControllingFieldsOptions(),
                                    placeholder: (0,
                                    h.default)(Pu("placeholders.field")),
                                    value: f && f.name,
                                    valueRenderer: this.renderFieldValue,
                                    disabled: l
                                })
                            }), (0,
                            fd.valueIsObject)(f) && (0,
                            ne.jsxs)(_.default, {
                                align: "center",
                                children: [(0,
                                ne.jsx)(Vt, {
                                    className: "m-bottom-2",
                                    onChange: (...e) => this.onVisibilityPropertyChange("property", ...e),
                                    placeholder: (0,
                                    h.default)(Pu("placeholders.property")),
                                    value: m || "",
                                    disabled: l
                                }), (0,
                                ne.jsx)(_i.default, {
                                    className: "m-left-1",
                                    title: (0,
                                    ne.jsx)(p.default, {
                                        message: Pu("helpTooltip.property")
                                    }),
                                    color: Pi.BATTLESHIP,
                                    tooltipPlacement: "top left"
                                })]
                            }), (0,
                            ne.jsx)(Vt, {
                                className: "m-bottom-2",
                                inputComponent: Es.default,
                                onChange: (...e) => this.onVisibilityPropertyChange("operator", ...e),
                                options: this.getOperatorsOptions(),
                                placeholder: (0,
                                h.default)(Pu("placeholders.operator")),
                                value: g,
                                disabled: l
                            }), (0,
                            ne.jsx)(rs, {
                                errors: n.controlling_value_regex || o.controlling_value_regex,
                                children: (0,
                                ne.jsx)(Vt, {
                                    disabled: C,
                                    onChange: (...e) => this.onVisibilityPropertyChange("controlling_value_regex", ...e),
                                    placeholder: E,
                                    value: C ? "" : c
                                })
                            })]
                        })
                    })
                }, `${i.name}-repeater-options`)
            }
        }
        qu.defaultProps = {
            fieldErrors: {},
            fieldWarnings: {}
        };
        qu.propTypes = {
            controllingFields: a().arrayOf(a().object).isRequired,
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            fieldErrors: a().object,
            fieldWarnings: a().object,
            onOpenChange: a().func,
            open: a().bool,
            readOnly: a().bool
        };
        var Uu = (0,
        d.connect)(_u)(qu)
          , ku = s(1414)
          , Gu = s(1285)
          , Mu = s(209);
        const Bu = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.${e}`
          , wu = e => Bu(`occurrence.${e}`)
          , Hu = ["max"];
        class Vu extends i.PureComponent {
            constructor(e) {
                super(e);
                (0,
                c.bindAll)(this, ["getState", "onToggleClick", "onNumberValueChange", "onSortingLabelFieldChange", "onChange"]);
                this.state = this.getState(e.field)
            }
            componentDidUpdate(e) {
                if (e.field.id !== this.props.field.id) {
                    const e = this.getState(this.props.field);
                    this.setState(e)
                }
            }
            getState(e) {
                const t = e[wt.OCCURRENCE];
                return {
                    enabled: !!t,
                    occurrence: t || {}
                }
            }
            onToggleClick(e) {
                const t = e.target.checked;
                this.setState({
                    enabled: t
                });
                this.props.editField({
                    [wt.OCCURRENCE]: t ? this.state.occurrence : null
                })
            }
            onNumberValueChange(e, t) {
                const s = t.target.value;
                (-1 !== Hu.indexOf(e) && !s || s >= 0) && this.onChange(e, s)
            }
            onSortingLabelFieldChange(e) {
                this.onChange("sorting_label_field", e.target.value)
            }
            onChange(e, t) {
                const s = this.props.field[wt.OCCURRENCE] || {};
                this.setState({
                    enabled: !0,
                    [wt.OCCURRENCE]: Object.assign({}, this.state.occurrence, {
                        [e]: t
                    })
                });
                this.props.editField({
                    [wt.OCCURRENCE]: Object.assign({}, s, {
                        [e]: t
                    })
                })
            }
            renderOccurrenceHelpTooltip() {
                const e = (0,
                ne.jsx)(Nt.default, {
                    children: (0,
                    ne.jsxs)("div", {
                        children: [(0,
                        ne.jsx)("p", {
                            children: (0,
                            ne.jsx)(Xe.default, {
                                message: wu("helpTooltip.explanation")
                            })
                        }), (0,
                        ne.jsxs)(Pt.default, {
                            styled: !0,
                            children: [(0,
                            ne.jsx)(p.default, {
                                message: wu("helpTooltip.examples.gallery")
                            }), (0,
                            ne.jsx)(p.default, {
                                message: wu("helpTooltip.examples.collection")
                            }), (0,
                            ne.jsx)(p.default, {
                                message: wu("helpTooltip.examples.group")
                            })]
                        }), (0,
                        ne.jsx)(p.default, {
                            message: wu("helpTooltip.moreHelp")
                        }), (0,
                        ne.jsx)(M.default, {
                            className: "m-left-1",
                            target: "_blank",
                            href: "http://designers.hubspot.com/docs/modules/repeating-fields-and-loops",
                            children: (0,
                            ne.jsx)(p.default, {
                                message: wu("helpTooltip.learnMore")
                            })
                        })]
                    })
                });
                return (0,
                ne.jsx)(_i.default, {
                    title: e,
                    color: Pi.BATTLESHIP,
                    tooltipPlacement: "top left",
                    tooltipProps: {
                        headingText: (0,
                        h.default)(wu("helpTooltip.headingText")),
                        placement: "top left",
                        className: "field-edit-help-tooltip",
                        use: "longform"
                    }
                })
            }
            renderOccurrenceTitle() {
                const e = (0,
                c.pick)(this.props.fieldErrors, wt.OCCURRENCE)
                  , t = (0,
                c.pick)(this.props.fieldWarnings, wt.OCCURRENCE);
                return (0,
                ne.jsxs)(_.default, {
                    align: "end",
                    children: [(0,
                    ne.jsx)(gn, {
                        className: "m-right-2",
                        fieldErrors: e,
                        i18nKey: Bu("contentOptions.hasFieldError")
                    }), (0,
                    ne.jsx)(mn, {
                        className: "m-right-2",
                        fieldWarnings: t,
                        i18nKey: Bu("contentOptions.hasFieldWarning")
                    }), (0,
                    ne.jsx)("span", {
                        className: "m-right-1",
                        children: (0,
                        ne.jsx)(p.default, {
                            message: wu("accordionLabel")
                        })
                    }), this.renderOccurrenceHelpTooltip()]
                })
            }
            renderSortingLabelFieldPreview(e) {
                if (!e)
                    return null;
                const t = (0,
                c.pick)(this.props, Object.values(Mu.RESOURCES_BY_TYPE || {}))
                  , s = (0,
                ne.jsx)(Gu.default, {
                    defaultLabel: e.label,
                    field: e,
                    resources: t
                })
                  , i = (0,
                ne.jsx)("div", {
                    className: "cmv2-occurrence",
                    children: (0,
                    ne.jsx)(Ni.default, {
                        className: "occurrences-table m-all-0",
                        hover: !1,
                        children: (0,
                        ne.jsx)("tbody", {
                            children: (0,
                            ne.jsx)(ku.default, {
                                deletable: !1,
                                fieldId: e.id,
                                index: 0,
                                isPreview: !0,
                                value: s
                            })
                        })
                    })
                });
                return (0,
                ne.jsx)(Hs.default, {
                    className: "repeater-options-tooltip",
                    placement: "top left",
                    title: i,
                    children: (0,
                    ne.jsx)(G.default, {
                        use: "link",
                        children: (0,
                        ne.jsx)(Nt.default, {
                            children: (0,
                            ne.jsx)(p.default, {
                                message: wu("sortingLabel.previewLink")
                            })
                        })
                    })
                })
            }
            renderSortingLabelFieldSelect() {
                const {field: e, readOnly: t} = this.props
                  , {children: s=[]} = e;
                if (e.type !== Gi.GROUP || !s.length)
                    return null;
                const i = s.map((e => ({
                    text: e.label,
                    value: e.id
                })))
                  , {occurrence: {sorting_label_field: n}} = this.state
                  , o = n && s.find((e => e.id === n))
                  , d = (0,
                ne.jsxs)("span", {
                    children: [(0,
                    ne.jsx)("span", {
                        className: "m-right-1",
                        children: (0,
                        ne.jsx)(p.default, {
                            message: wu("sortingLabel.label")
                        })
                    }), (0,
                    ne.jsx)(_i.default, {
                        title: (0,
                        ne.jsx)(Nt.default, {
                            children: (0,
                            ne.jsx)(p.default, {
                                message: wu("sortingLabel.tooltip")
                            })
                        }),
                        color: Pi.BATTLESHIP,
                        tooltipProps: {
                            placement: "top left"
                        }
                    })]
                });
                return (0,
                ne.jsx)(es.default, {
                    help: this.renderSortingLabelFieldPreview(o),
                    label: d,
                    children: (0,
                    ne.jsx)(Vt, {
                        clearable: !0,
                        inputComponent: Es.default,
                        onChange: this.onSortingLabelFieldChange,
                        options: i,
                        placeholder: (0,
                        h.default)(wu("sortingLabel.placeholder")),
                        value: o ? n : null,
                        disabled: t
                    })
                })
            }
            render() {
                const {fieldErrors: e, fieldWarnings: t, field: s, onOpenChange: i, open: n, readOnly: o} = this.props
                  , {enabled: d, occurrence: r} = this.state
                  , {min: l, max: a, default: u} = r
                  , c = []
                  , g = []
                  , m = [];
                e[wt.OCCURRENCE] && e[wt.OCCURRENCE].forEach((e => {
                    switch (e.type) {
                    case Pd.MODULE_VALIDATION_OCCURRENCE_MIN_LESS_THAN_ZERO:
                        c.push(e);
                        break;
                    case Pd.MODULE_VALIDATION_OCCURRENCE_MAX_LESS_THAN_ONE:
                    case Pd.MODULE_VALIDATION_OCCURRENCE_MAX_LESS_THAN_MIN:
                        g.push(e);
                        break;
                    default:
                        m.push(e)
                    }
                }
                ));
                const f = []
                  , b = []
                  , C = [];
                t[wt.OCCURRENCE] && t[wt.OCCURRENCE].forEach((e => {
                    switch (e.type) {
                    case Pd.MODULE_VALIDATION_OCCURRENCE_MIN_LESS_THAN_ZERO:
                        f.push(e);
                        break;
                    case Pd.MODULE_VALIDATION_OCCURRENCE_MAX_LESS_THAN_ONE:
                    case Pd.MODULE_VALIDATION_OCCURRENCE_MAX_LESS_THAN_MIN:
                        b.push(e);
                        break;
                    default:
                        C.push(e)
                    }
                }
                ));
                const E = (0,
                ne.jsx)(Wo.default, {
                    checked: d,
                    "data-test-id": "module-field-editor-repeater-toggle",
                    onChange: this.onToggleClick,
                    size: "extra-small",
                    readOnly: o
                });
                return (0,
                ne.jsx)(Ut.default, {
                    actions: E,
                    containerClassName: "field-edit-accordion-container",
                    titleText: this.renderOccurrenceTitle(),
                    onOpenChange: i,
                    open: n,
                    children: (0,
                    ne.jsx)("div", {
                        children: (0,
                        ne.jsxs)(Bt.default, {
                            children: [(0,
                            ne.jsx)(rs, {
                                className: "m-bottom-3",
                                errors: c.concat(g),
                                warnings: f.concat(b),
                                label: (0,
                                h.default)(wu("countLimitsLabel")),
                                children: (0,
                                ne.jsxs)(_.default, {
                                    align: "end",
                                    children: [(0,
                                    ne.jsx)(Nt.default, {
                                        use: "help",
                                        children: (0,
                                        ne.jsx)(rs, {
                                            error: !!c.length,
                                            label: (0,
                                            h.default)(wu("minLabel")),
                                            children: (0,
                                            ne.jsx)(Vt, {
                                                "data-test-id": "module-field-editor-repeater-min",
                                                inputComponent: lr.default,
                                                onChange: (...e) => this.onNumberValueChange("min", ...e),
                                                placeholder: (0,
                                                h.default)(wu("minPlaceholder")),
                                                value: l,
                                                min: 0,
                                                disabled: o
                                            })
                                        })
                                    }), (0,
                                    ne.jsx)("span", {
                                        className: "p-x-2 p-y-1",
                                        children: (0,
                                        ne.jsx)(p.default, {
                                            message: wu("toLabel")
                                        })
                                    }), (0,
                                    ne.jsx)(Nt.default, {
                                        use: "help",
                                        children: (0,
                                        ne.jsx)(rs, {
                                            error: !!g.length,
                                            label: (0,
                                            h.default)(wu("maxLabel")),
                                            children: (0,
                                            ne.jsx)(Vt, {
                                                "data-test-id": "module-field-editor-repeater-max",
                                                inputComponent: lr.default,
                                                onChange: (...e) => this.onNumberValueChange("max", ...e),
                                                placeholder: (0,
                                                h.default)(wu("maxPlaceholder")),
                                                value: a,
                                                min: 1,
                                                disabled: o
                                            })
                                        })
                                    })]
                                })
                            }), (0,
                            ne.jsx)(rs, {
                                errors: m,
                                warnings: C,
                                label: (0,
                                h.default)(wu("defaultCountLabel")),
                                children: (0,
                                ne.jsx)(Vt, {
                                    "data-test-id": "module-field-editor-repeater-default",
                                    inputComponent: lr.default,
                                    onChange: (...e) => this.onNumberValueChange("default", ...e),
                                    placeholder: (0,
                                    h.default)(wu("defaultPlaceholder")),
                                    value: u,
                                    min: 0,
                                    disabled: o
                                })
                            }), this.renderSortingLabelFieldSelect()]
                        })
                    })
                }, `${s.id}-repeater-options`)
            }
        }
        Vu.defaultProps = {
            fieldErrors: {},
            fieldWarnings: {}
        };
        Vu.propTypes = {
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            fieldErrors: a().object,
            fieldWarnings: a().object,
            onOpenChange: a().func,
            open: a().bool,
            readOnly: a().bool
        };
        var $u = Vu;
        const Yu = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.contentOptions.${e}`;
        function zu() {
            const e = P.makeGetCustomWidgetBufferFields();
            return (t, s) => {
                const i = e(t, s)
                  , {field: n} = s;
                return {
                    depth: n ? (0,
                    he.getFieldDepth)(i, n.id) : 0,
                    fieldCreateOptions: (0,
                    N.getFieldCreateOptions)(t, s)
                }
            }
        }
        const Ku = {
            createField: W.createField,
            toggleFieldGrouping: A.toggleFieldGrouping
        };
        class Ju extends i.Component {
            constructor(...e) {
                super(...e);
                this.onChildCreate = e => {
                    const {createField: t, customWidgetId: s, field: i, fieldCreateOptions: n} = this.props;
                    t(s, new bt.default({
                        type: e,
                        isNew: !0,
                        fieldCreateOptions: n
                    }), i.id)
                }
                ;
                this.onGroupClick = () => {
                    const {customWidgetId: e, toggleFieldGrouping: t} = this.props;
                    t(e)
                }
            }
            get canContainChildren() {
                return this.props.depth < en.MAX_NESTING_DEPTH - 1
            }
            renderChildren() {
                const {field: e, depth: t, customWidgetId: s, fieldName: i, readOnly: n} = this.props;
                if (!e.children || !e.children.length) {
                    const e = this.canContainChildren ? "noChildren" : "tooDeep";
                    return (0,
                    ne.jsx)("div", {
                        className: "p-bottom-3",
                        children: (0,
                        ne.jsx)(Nt.default, {
                            use: "help",
                            children: (0,
                            ne.jsx)(p.default, {
                                message: Yu(`group.${e}`)
                            })
                        })
                    })
                }
                return (0,
                ne.jsx)(Dn, {
                    customWidgetId: s,
                    fields: e.children,
                    fieldName: i,
                    depth: t + 1,
                    isReadOnly: n
                })
            }
            renderGroupControls() {
                const {isFieldGroupingActive: e, readOnly: t, customWidgetId: s, field: i} = this.props;
                return e || !this.canContainChildren || t ? null : (0,
                ne.jsxs)(_.default, {
                    align: "baseline",
                    justify: "between",
                    children: [(0,
                    ne.jsx)(xi.default, {
                        children: (0,
                        ne.jsx)(p.default, {
                            message: Yu(`defaultLabels.${Gi.GROUP}`)
                        })
                    }), (0,
                    ne.jsxs)("div", {
                        children: [(0,
                        ne.jsx)(Nn, {
                            customWidgetId: s,
                            onFieldCreate: this.onChildCreate,
                            isStyleTab: i.tab === cs.STYLE
                        }), (0,
                        ne.jsx)(G.default, {
                            onClick: this.onGroupClick,
                            use: "link",
                            children: (0,
                            ne.jsx)(Nt.default, {
                                children: (0,
                                ne.jsx)(p.default, {
                                    message: Yu("group.groupButtonLabel")
                                })
                            })
                        })]
                    })]
                })
            }
            render() {
                return (0,
                ne.jsxs)("div", {
                    className: "group-content-options",
                    children: [this.renderGroupControls(), this.renderChildren()]
                })
            }
        }
        Ju.defaultProps = {
            depth: 0,
            fieldsErrors: {}
        };
        Ju.propTypes = {
            createField: a().func.isRequired,
            customWidgetId: u.default.customWidgetId.isRequired,
            field: a().instanceOf(bt.default).isRequired,
            fieldCreateOptions: a().object.isRequired,
            fieldName: a().string,
            depth: a().number,
            isFieldGroupingActive: a().bool.isRequired,
            toggleFieldGrouping: a().func.isRequired,
            readOnly: a().bool
        };
        var Xu = (0,
        q.compose)((0,
        d.connect)(zu, Ku))(Ju)
          , Zu = s(1904);
        const Qu = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.${e}`
          , ec = e => `DesignEditorsUI.customWidgetEditor.errors.field.${e}`;
        class tc extends i.PureComponent {
            constructor(e) {
                super(e);
                this.onBreadcrumbsLinkClick = e => {
                    const {customWidgetId: t, setSelectedField: s} = this.props;
                    s(t, {
                        id: e
                    })
                }
                ;
                this.editField = e => {
                    const {customWidgetId: t} = this.props
                      , {field: s} = this.state
                      , i = s.merge(e);
                    this.setState({
                        field: i
                    });
                    this.debouncedEditField(t, i)
                }
                ;
                this.debouncedEditField = (0,
                c.debounce)((function(e, t) {
                    this.props.editField(e, t)
                }
                ), 1e3);
                this.onCloneClick = () => {
                    this.props.cloneField(this.props.customWidgetId, this.props.field.id)
                }
                ;
                this.onDeleteClick = () => {
                    this.props.deleteField(this.props.customWidgetId, this.props.field.id)
                }
                ;
                this.onNameChange = e => {
                    const t = e.target.value;
                    this.editField({
                        name: t
                    })
                }
                ;
                this.onPreviewClick = () => {
                    this.props.setFullScreenEditorOpen(this.props.customWidgetId, !this.props.isFullScreenEditorOpen)
                }
                ;
                this.onOpenChange = e => t => {
                    this.props.saveAccordionState(e, t.target.value)
                }
                ;
                this.state = {
                    field: e.field
                }
            }
            componentDidUpdate(e) {
                (0,
                c.isEqual)(e.field, this.props.field) || this.setState({
                    field: this.props.field
                })
            }
            get contentOptionsErrors() {
                const {fieldErrors: e} = this.props;
                return (0,
                c.pick)(e, [wt.MIN, wt.CHOICES, wt.DEFAULT, wt.VALIDATION_REGEX, wt.OBJECT_TYPE, wt.SUPPORTED_SOURCE_TYPES, wt.TABLE_NAME_OR_ID])
            }
            get contentOptionsWarnings() {
                const {fieldWarnings: e} = this.props;
                return (0,
                c.pick)(e, [wt.MIN, wt.CHOICES, wt.DEFAULT, wt.VALIDATION_REGEX, wt.OBJECT_TYPE, wt.SUPPORTED_SOURCE_TYPES, wt.TABLE_NAME_OR_ID])
            }
            get fieldName() {
                return this.props.fieldBreadcrumbs.map((e => e.name)).join(".") || this.state.field.name
            }
            getIsOpen(e) {
                return (0,
                Fo.getIsOpen)(this.props.accordionStates, [this.state.field.id, e])
            }
            renderFieldGroupErrors() {
                if (this.props.isFieldGroupingActive)
                    return null;
                const {children: e=[]} = this.props.fieldErrors
                  , t = e.map(( ({type: e, data: t}) => (0,
                ne.jsx)(Nt.default, {
                    use: "error",
                    children: (0,
                    ne.jsx)(p.default, {
                        message: ec(e),
                        options: t
                    })
                }, e)));
                return (0,
                ne.jsx)("div", {
                    className: "p-x-6 p-y-3",
                    children: t
                })
            }
            renderFieldGroupWarnings() {
                if (this.props.isFieldGroupingActive)
                    return null;
                const {children: e=[]} = this.props.fieldWarnings
                  , t = e.map(( ({type: e, data: t}) => (0,
                ne.jsx)(Nt.default, {
                    use: "error",
                    children: (0,
                    ne.jsx)(p.default, {
                        message: ec(e),
                        options: t
                    })
                }, e)));
                return (0,
                ne.jsx)("div", {
                    className: "p-x-6 p-y-3",
                    children: t
                })
            }
            renderCopyDropdown() {
                const {field: e} = this.state
                  , t = (0,
                ne.jsx)(Nt.default, {
                    children: (0,
                    ne.jsx)(p.default, {
                        message: Qu("copyDropdown")
                    })
                });
                return (0,
                ne.jsx)(Dt.default, {
                    buttonUse: "transparent",
                    buttonClassName: "p-all-0",
                    buttonText: t,
                    menuWidth: 150,
                    placement: "bottom left",
                    popoverProps: {
                        className: "copy-dropdown"
                    },
                    children: (0,
                    ne.jsxs)(Pt.default, {
                        children: [(0,
                        ne.jsx)(Tn, {
                            customWidgetId: this.props.customWidgetId,
                            field: e,
                            fieldName: this.fieldName,
                            hostTemplateTypes: this.props.customWidgetHostTemplateTypes,
                            contentTypes: this.props.customWidgetContentTypes
                        }), (0,
                        ne.jsx)(Tn, {
                            customWidgetId: this.props.customWidgetId,
                            field: e,
                            fieldName: this.fieldName,
                            hostTemplateTypes: this.props.customWidgetHostTemplateTypes,
                            contentTypes: this.props.customWidgetContentTypes,
                            useFullSnippet: !1
                        })]
                    })
                })
            }
            renderNameInput() {
                const {fieldErrors: e, isFieldGroupingActive: t, readOnly: s} = this.props
                  , {field: i} = this.state;
                return t ? null : (0,
                ne.jsx)(Bt.default, {
                    children: (0,
                    ne.jsx)(rs, {
                        className: "field-name-input",
                        errors: e.name,
                        help: this.renderCopyDropdown(),
                        label: (0,
                        h.default)(Qu("nameLabel")),
                        children: (0,
                        ne.jsx)(Vt, {
                            className: "is--code",
                            inputComponent: Mt.default,
                            onChange: this.onNameChange,
                            value: i.name,
                            disabled: s
                        })
                    })
                })
            }
            renderContentOptions() {
                const {isEmailOrAnyType: e, customWidgetId: t, customWidgetPath: s, customWidgetContentTypes: i, customWidgetHostTemplateTypes: n, isFieldGroupingActive: o, readOnly: d, isV1: r, isGlobal: l, hasGlobalContentEditorAccess: a} = this.props
                  , {field: u} = this.state;
                if (u.type === Gi.GROUP)
                    return (0,
                    ne.jsx)(kt.default, {
                        children: (0,
                        ne.jsx)(Xu, {
                            customWidgetId: t,
                            fieldName: this.fieldName,
                            field: u,
                            isFieldGroupingActive: o,
                            readOnly: d
                        })
                    });
                const c = (0,
                ne.jsxs)(_.default, {
                    align: "end",
                    children: [(0,
                    ne.jsx)(gn, {
                        className: "m-right-2",
                        fieldErrors: this.contentOptionsErrors,
                        i18nKey: Qu("contentOptions.hasFieldError")
                    }), (0,
                    ne.jsx)(mn, {
                        className: "m-right-2",
                        fieldWarnings: this.contentOptionsWarnings,
                        i18nKey: Qu("contentOptions.hasFieldWarning")
                    }), (0,
                    ne.jsx)(p.default, {
                        message: Qu("contentOptions.accordionLabel")
                    })]
                });
                return (0,
                ne.jsxs)(Ut.default, {
                    defaultOpen: !0,
                    titleText: c,
                    onOpenChange: this.onOpenChange(fs.CONTENT_OPTIONS),
                    open: this.getIsOpen(fs.CONTENT_OPTIONS),
                    children: [l && a && (0,
                    ne.jsx)(Zu.default, {
                        className: "m-bottom-8 p-top-5",
                        contentPath: s
                    }), (0,
                    ne.jsx)(Wu, {
                        customWidgetContentTypes: i,
                        customWidgetHostTemplateTypes: n,
                        editor: rd.default.DESIGN_MANAGER,
                        isEmailOrAnyType: e,
                        customWidgetId: t,
                        isV1: r,
                        editField: this.editField,
                        field: u,
                        fieldErrors: this.contentOptionsErrors,
                        fieldWarnings: this.contentOptionsWarnings,
                        compact: !0,
                        readOnly: d,
                        onPreviewClick: this.onPreviewClick
                    })]
                })
            }
            renderAccordions() {
                const {customWidgetId: e, fieldErrors: t, fieldWarnings: s, isFieldGroupingActive: n, isGlobal: o, readOnly: d, isV1: r, isStyleTab: l} = this.props
                  , {field: a} = this.state
                  , u = this.renderContentOptions();
                if (n)
                    return u;
                const c = (0,
                i.cloneElement)(u, {
                    key: `${a.id}-content-options`
                })
                  , p = (0,
                ne.jsx)(Ut.default, {
                    titleText: (0,
                    h.default)(Qu("editorOptions.accordionLabel")),
                    onOpenChange: this.onOpenChange(fs.EDITOR_OPTIONS),
                    open: this.getIsOpen(fs.EDITOR_OPTIONS),
                    children: (0,
                    ne.jsx)(md, {
                        editField: this.editField,
                        field: a,
                        fieldErrors: t,
                        isGlobal: o,
                        readOnly: d,
                        isV1: r
                    })
                }, `${a.id}-editor-options`)
                  , g = l ? null : (0,
                ne.jsx)($u, {
                    editField: this.editField,
                    field: a,
                    fieldErrors: t,
                    fieldWarnings: s,
                    onOpenChange: this.onOpenChange(fs.REPEATER_OPTIONS),
                    open: this.getIsOpen(fs.REPEATER_OPTIONS),
                    readOnly: d
                }, `${a.id}-repeater-options`);
                return r ? [c, p] : [c, p, (0,
                ne.jsx)(Uu, {
                    customWidgetId: e,
                    editField: this.editField,
                    field: a,
                    fieldErrors: t,
                    fieldWarnings: s,
                    onOpenChange: this.onOpenChange(fs.DISPLAY_CONDITIONS),
                    open: this.getIsOpen(fs.DISPLAY_CONDITIONS),
                    readOnly: d
                }, `${a.id}-display-conditions`), g]
            }
            renderGroupControls() {
                const {customWidgetId: e, isFieldGroupingActive: t} = this.props;
                return t ? (0,
                ne.jsx)(kt.default, {
                    flush: !0,
                    children: (0,
                    ne.jsx)(Gn, {
                        customWidgetId: e
                    })
                }) : null
            }
            renderBreadcrumbs() {
                const {fieldBreadcrumbs: e, customWidgetIcon: t, isFieldGroupingActive: s, isFullScreenEditorOpen: i} = this.props
                  , n = (0,
                ne.jsx)(mo.default, {
                    alignment: "text-bottom",
                    size: 14,
                    icon: t
                });
                return (0,
                ne.jsx)(qt.default, {
                    className: "field-edit-breadcrumbs",
                    isReadOnly: s || i,
                    items: e,
                    onLinkClick: this.onBreadcrumbsLinkClick,
                    rootIcon: n
                })
            }
            renderCannotEditFieldTypeAlert() {
                if (this.props.canEditFieldType)
                    return null;
                const e = this.props.canCreateFieldType ? "missingEditPermission" : "missingEditAndCreatePermission";
                return (0,
                ne.jsx)(k.default, {
                    type: "warning",
                    children: (0,
                    ne.jsx)(p.default, {
                        message: Qu(e)
                    })
                })
            }
            renderFieldEditControls() {
                const {customWidgetId: e, isFieldGroupingActive: t, readOnly: s, canCreateFieldType: i} = this.props
                  , {field: n} = this.state;
                let o = n.type === Gi.GROUP ? "cloneGroup" : "cloneField";
                s || i || (o = "missingCreatePermission");
                const d = n.type === Gi.GROUP ? "deleteGroup" : "deleteField"
                  , r = t || s;
                return (0,
                ne.jsxs)(Gt.default, {
                    className: "field-edit-controls",
                    children: [this.renderCannotEditFieldTypeAlert(), (0,
                    ne.jsx)(Qt, {
                        customWidgetId: e,
                        editField: this.editField,
                        field: n,
                        isReadOnly: r
                    }), (0,
                    ne.jsxs)($t.default, {
                        children: [(0,
                        ne.jsx)(Yt.default, {
                            title: (0,
                            h.default)(Qu(o)),
                            iconName: "duplicate",
                            onClick: this.onCloneClick,
                            isReadOnly: r || !i
                        }), (0,
                        ne.jsx)(Yt.default, {
                            title: (0,
                            h.default)(Qu(d)),
                            iconName: "delete",
                            onClick: this.onDeleteClick,
                            isReadOnly: r
                        })]
                    }), this.renderGroupControls(), this.renderNameInput(), (0,
                    ne.jsx)(kt.default, {
                        flush: !0,
                        children: this.renderAccordions()
                    }), this.renderFieldGroupErrors(), this.renderFieldGroupWarnings()]
                })
            }
            render() {
                const {customWidgetId: e, isFieldGroupingActive: t} = this.props
                  , {field: s} = this.state;
                if (!s)
                    return null;
                const i = "field-edit-inputs" + (t ? " is--field-grouping-active" : "");
                return (0,
                ne.jsx)(_t.default, {
                    breadcrumbsContent: this.renderBreadcrumbs(),
                    className: "field-edit-sidebar-container",
                    contentClassName: i,
                    children: this.renderFieldEditControls()
                }, `${e}-${s.id}`)
            }
        }
        tc.propTypes = {
            canEditFieldType: a().bool.isRequired,
            canCreateFieldType: a().bool.isRequired,
            customWidgetContentTypes: a().array,
            customWidgetHostTemplateTypes: a().array,
            customWidgetIcon: a().string,
            customWidgetId: u.default.customWidgetId.isRequired,
            customWidgetPath: a().string.isRequired,
            cloneField: a().func.isRequired,
            deleteField: a().func.isRequired,
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default),
            fieldBreadcrumbs: a().array,
            fieldErrors: a().object,
            fieldWarnings: a().object,
            isEmailOrAnyType: a().bool.isRequired,
            isFieldGroupingActive: a().bool.isRequired,
            isFullScreenEditorOpen: a().bool.isRequired,
            isGlobal: a().bool,
            isStyleTab: a().bool,
            setSelectedField: a().func.isRequired,
            saveAccordionState: a().func.isRequired,
            accordionStates: a().object.isRequired,
            readOnly: a().bool,
            isV1: a().bool.isRequired,
            setFullScreenEditorOpen: a().func.isRequired,
            hasGlobalContentEditorAccess: a().bool.isRequired
        };
        tc.defaultProps = {
            customWidgetContentTypes: null,
            customWidgetHostTemplateTypes: null,
            customWidgetIcon: null,
            field: null,
            fieldErrors: {},
            fieldWarnings: {},
            fieldBreadcrumbs: []
        };
        var sc = tc;
        function ic() {
            const e = P.makeGetCustomWidgetBuffer()
              , t = P.makeGetCustomWidgetBufferFields()
              , s = N.makeGetFieldTypePermissions()
              , i = P.makeGetIsEmailOrAnyType()
              , n = P.makeGetIsReadOnly();
            return (o, d) => {
                const r = e(o, d)
                  , {isActive: l} = N.getFieldGrouping(o, d)
                  , a = s(o, d)
                  , u = N.getSelectedField(o, d)
                  , c = N.getIsEditingGlobalContent(o, d)
                  , p = !(!u.field || !a[u.field.type][Ui.EDIT]);
                return Object.assign({
                    customWidgetId: d.customWidgetId,
                    isReadOnly: (0,
                    w.getUserHasReadAccessOnly)(o) || n(o, d) || c || !p,
                    fieldErrors: N.getFieldErrors(o, d),
                    fieldWarnings: N.getFieldWarnings(o, d),
                    fieldBreadcrumbs: N.getSelectedFieldBreadcrumbs(o, d),
                    fields: t(o, d),
                    isFieldGroupingActive: !!l,
                    isFullScreenEditorOpen: N.getIsFullScreenEditorOpen(o, d),
                    customWidgetContentTypes: r ? r.contentTypes : null,
                    customWidgetHostTemplateTypes: r ? r.hostTemplateTypes : null,
                    customWidgetIcon: r ? r.icon : null,
                    isGlobal: !!r && r.global,
                    isV1: !!r && 1 === r.schemaVersion,
                    accordionStates: N.getAccordionStates(o, d),
                    canEditFieldType: p,
                    canCreateFieldType: !(!u.field || !a[u.field.type][Ui.CREATE]),
                    isEmailOrAnyType: i(o, d),
                    customWidgetPath: r ? r.path : "",
                    hasGlobalContentEditorAccess: (0,
                    w.getHasGlobalContentEditorAccess)(o, d)
                }, u)
            }
        }
        const nc = {
            cloneField: W.cloneField,
            deleteField: W.deleteField,
            editField: W.editField,
            setSelectedField: A.setSelectedField,
            saveAccordionState: A.saveAccordionState,
            fetchSfdcIntegrationStatus: xt,
            setFullScreenEditorOpen: A.setFullScreenEditorOpen
        };
        class oc extends i.Component {
            constructor(...e) {
                super(...e);
                this.saveAccordionState = (e, t=!1) => {
                    this.props.saveAccordionState(this.props.customWidgetId, e, t, this.props.field.id)
                }
                ;
                this.isStyleTab = this.props.fieldBreadcrumbs[0] && this.props.fieldBreadcrumbs[0].tab === cs.STYLE
            }
            componentDidMount() {
                this.props.fetchSfdcIntegrationStatus()
            }
            render() {
                const {customWidgetContentTypes: e, customWidgetHostTemplateTypes: t, customWidgetIcon: s, customWidgetId: i, customWidgetPath: n, editField: o, field: d, fieldErrors: r, fieldWarnings: l, fieldBreadcrumbs: a, setSelectedField: u, isFieldGroupingActive: c, isFullScreenEditorOpen: p, accordionStates: h, canEditFieldType: g, canCreateFieldType: m, isGlobal: f, cloneField: b, deleteField: C, isReadOnly: E, isV1: O, setFullScreenEditorOpen: y, isEmailOrAnyType: T, hasGlobalContentEditorAccess: x} = this.props;
                return (0,
                ne.jsx)(sc, {
                    canEditFieldType: g,
                    canCreateFieldType: m,
                    customWidgetContentTypes: e,
                    customWidgetHostTemplateTypes: t,
                    customWidgetIcon: s,
                    customWidgetId: i,
                    customWidgetPath: n,
                    cloneField: b,
                    deleteField: C,
                    editField: o,
                    field: d,
                    isStyleTab: this.isStyleTab,
                    fieldBreadcrumbs: a,
                    fieldErrors: r,
                    fieldWarnings: l,
                    isEmailOrAnyType: T,
                    isFieldGroupingActive: c,
                    isFullScreenEditorOpen: p,
                    isGlobal: f,
                    setSelectedField: u,
                    saveAccordionState: this.saveAccordionState,
                    accordionStates: h,
                    readOnly: E,
                    isV1: O,
                    setFullScreenEditorOpen: y,
                    hasGlobalContentEditorAccess: x
                })
            }
        }
        oc.propTypes = {
            customWidgetContentTypes: a().array,
            customWidgetHostTemplateTypes: a().array,
            customWidgetIcon: a().string,
            customWidgetId: u.default.customWidgetId.isRequired,
            customWidgetPath: a().string.isRequired,
            cloneField: a().func.isRequired,
            deleteField: a().func.isRequired,
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default),
            fieldBreadcrumbs: a().array.isRequired,
            fieldErrors: a().object.isRequired,
            fieldWarnings: a().object.isRequired,
            isEmailOrAnyType: a().bool.isRequired,
            isFieldGroupingActive: a().bool.isRequired,
            isFullScreenEditorOpen: a().bool.isRequired,
            isGlobal: a().bool,
            setSelectedField: a().func.isRequired,
            saveAccordionState: a().func.isRequired,
            accordionStates: a().object.isRequired,
            canEditFieldType: a().bool.isRequired,
            canCreateFieldType: a().bool.isRequired,
            isReadOnly: a().bool.isRequired,
            fetchSfdcIntegrationStatus: a().func.isRequired,
            isV1: a().bool.isRequired,
            setFullScreenEditorOpen: a().func.isRequired,
            hasGlobalContentEditorAccess: a().bool.isRequired
        };
        oc.defaultProps = {
            customWidgetContentTypes: null,
            customWidgetHostTemplateTypes: null,
            customWidgetIcon: null,
            field: null,
            accordionStates: {}
        };
        var dc = (0,
        d.connect)(ic, nc)(oc)
          , rc = s(1639);
        const lc = e => `DesignEditorsUI.customWidgetEditor.sidebar.icon.${e}`
          , ac = ({customWidgetIcon: e, FileManager: t, onFileManagerOpen: s, onResetToDefault: n, onIconSelect: o}) => {
            const [d,r] = (0,
            i.useState)(!1)
              , l = () => r(!d);
            return (0,
            ne.jsxs)("div", {
                children: [(0,
                ne.jsx)(xi.default, {
                    children: (0,
                    ne.jsx)(p.default, {
                        message: lc("iconSelect.label")
                    })
                }), (0,
                ne.jsxs)(_.default, {
                    align: "center",
                    direction: "column",
                    children: [(0,
                    ne.jsx)("div", {
                        children: (0,
                        ne.jsx)(G.default, {
                            className: "icon-upload-button",
                            onClick: s,
                            use: "unstyled",
                            children: (0,
                            ne.jsx)(mo.default, {
                                size: "xxl",
                                icon: e
                            })
                        })
                    }), (0,
                    ne.jsxs)("div", {
                        children: [(0,
                        ne.jsx)(rc.default, {
                            icons: [],
                            iconSet: xr.ICON_SETS["fontawesome-5.14.0"],
                            isOpen: d,
                            onClose: l,
                            onIconSelect: e => {
                                l();
                                o(e)
                            }
                            ,
                            selectedIcons: [],
                            totalIcons: 100
                        }), (0,
                        ne.jsx)(G.default, {
                            className: "m-bottom-4",
                            onClick: l,
                            size: "small",
                            children: (0,
                            ne.jsx)(p.default, {
                                message: lc("iconSelect.browseIcons")
                            })
                        })]
                    }), (0,
                    ne.jsx)("div", {
                        children: (0,
                        ne.jsx)(G.default, {
                            className: "m-bottom-4",
                            onClick: s,
                            size: "small",
                            children: (0,
                            ne.jsx)(p.default, {
                                message: lc("iconSelect.uploadIcon")
                            })
                        })
                    }), (0,
                    ne.jsx)("div", {
                        children: (0,
                        ne.jsx)(G.default, {
                            onClick: n,
                            use: "link",
                            children: (0,
                            ne.jsx)(p.default, {
                                message: lc("iconSelect.resetToDefault")
                            })
                        })
                    })]
                }), t]
            })
        }
        ;
        ac.propTypes = {
            customWidgetIcon: a().string,
            onResetToDefault: a().func.isRequired,
            FileManager: a().node,
            onFileManagerOpen: a().func.isRequired,
            onIconSelect: a().func
        };
        var uc = (0,
        zs.default)(ac)
          , cc = s(1412);
        const pc = e => `DesignEditorsUI.customWidgetEditor.sidebar.icon.${e}`
          , hc = 1e4
          , gc = (0,
        Vi.default)({
            IS_SVG: null,
            IS_SIZE_LESS_THAN_MAX: null
        });
        class mc extends i.Component {
            constructor(...e) {
                super(...e);
                this.state = {
                    errors: {}
                };
                this.onBackToFieldsClick = () => {
                    this.props.setIsSelectingIcon(!1)
                }
                ;
                this.onFileSelect = e => {
                    const t = {}
                      , {extension: s="", size: i, url: n} = e;
                    "svg" !== s.toLowerCase() && (t[gc.IS_SVG] = !0);
                    i && i > hc && (t[gc.IS_SIZE_LESS_THAN_MAX] = !0);
                    this.setState({
                        errors: t
                    });
                    Object.keys(t).length || this.props.updateIcon(n)
                }
                ;
                this.onIconSelect = e => {
                    const {name: t, type: s, iconSet: i} = e;
                    let n = encodeURIComponent(t);
                    i && i !== xr.DEFAULT_ICON_SET && (n = `${i}:${n}`);
                    s && s !== cc.default.REGULAR && (n = `${n}:${s}`);
                    this.props.updateIcon(n)
                }
                ;
                this.onResetToDefault = () => {
                    this.setState({
                        errors: {}
                    });
                    this.props.updateIcon(null)
                }
                ;
                this.renderIconRequirement = e => {
                    const t = this.state.errors[e]
                      , s = "icon-requirements-list-item" + (t ? " is--error" : "")
                      , i = t ? "error" : null;
                    return (0,
                    ne.jsx)(Nt.default, {
                        className: s,
                        use: i,
                        children: (0,
                        ne.jsx)(p.default, {
                            message: pc(`iconRequirements.requirements.${e}`)
                        })
                    }, e)
                }
            }
            renderBreadcrumbs() {
                return (0,
                ne.jsx)(qt.default, {
                    singleBreadcrumbIsBackLink: !0,
                    children: (0,
                    ne.jsx)(M.default, {
                        onClick: this.onBackToFieldsClick,
                        children: (0,
                        ne.jsx)(p.default, {
                            message: pc("backToFields")
                        })
                    })
                })
            }
            renderIconRequirements() {
                const e = Object.keys(this.state.errors).length ? (0,
                ne.jsx)(Nt.default, {
                    use: "error",
                    children: (0,
                    ne.jsx)(p.default, {
                        message: pc("iconRequirements.error")
                    })
                }) : null
                  , t = Object.keys(gc).map(this.renderIconRequirement);
                return (0,
                ne.jsxs)("div", {
                    children: [e, (0,
                    ne.jsx)(Pt.default, {
                        className: "icon-requirements-list",
                        children: t
                    })]
                })
            }
            render() {
                const e = (0,
                ne.jsx)(p.default, {
                    message: pc("iconRequirements.label")
                });
                return (0,
                ne.jsx)(_t.default, {
                    className: "icon-sidebar-container",
                    breadcrumbsContent: this.renderBreadcrumbs(),
                    children: (0,
                    ne.jsxs)(Gt.default, {
                        children: [(0,
                        ne.jsx)(uc, {
                            customWidgetIcon: this.props.customWidgetIcon,
                            onResetToDefault: this.onResetToDefault,
                            onFileSelect: this.onFileSelect,
                            onIconSelect: this.onIconSelect
                        }), (0,
                        ne.jsx)(Nt.default, {
                            children: (0,
                            ne.jsx)(p.default, {
                                message: pc("colorWarning")
                            })
                        }), (0,
                        ne.jsx)(Bt.default, {
                            children: (0,
                            ne.jsx)(es.default, {
                                label: e,
                                children: this.renderIconRequirements()
                            })
                        })]
                    })
                })
            }
        }
        mc.propTypes = {
            customWidgetIcon: a().string,
            setIsSelectingIcon: a().func.isRequired,
            updateIcon: a().func.isRequired
        };
        function fc() {
            return (e, t) => {
                const s = P.makeGetCustomWidgetBuffer()(e, t);
                return {
                    customWidgetId: t.customWidgetId,
                    isBufferLoaded: !!s,
                    customWidgetIcon: s && s.icon || void 0
                }
            }
        }
        const bc = {
            setIsSelectingIcon: A.setIsSelectingIcon,
            updateCustomWidget: W.update
        };
        class Cc extends i.Component {
            constructor(...e) {
                super(...e);
                this.setIsSelectingIcon = e => {
                    const {setIsSelectingIcon: t, customWidgetId: s} = this.props;
                    t(s, e)
                }
                ;
                this.updateIcon = e => {
                    const {customWidgetId: t, updateCustomWidget: s} = this.props;
                    s(t, {
                        icon: e
                    })
                }
            }
            shouldComponentUpdate(e) {
                const {isBufferLoaded: t, customWidgetId: s, customWidgetIcon: i} = this.props;
                return !(t === e.isBufferLoaded && s === e.customWidgetId && i === e.customWidgetIcon)
            }
            render() {
                return this.props.isBufferLoaded ? (0,
                ne.jsx)(mc, {
                    customWidgetIcon: this.props.customWidgetIcon,
                    setIsSelectingIcon: this.setIsSelectingIcon,
                    updateIcon: this.updateIcon
                }) : null
            }
        }
        Cc.propTypes = {
            isBufferLoaded: a().bool.isRequired,
            customWidgetId: u.default.customWidgetId.isRequired,
            customWidgetIcon: a().string,
            setIsSelectingIcon: a().func.isRequired,
            updateCustomWidget: a().func.isRequired
        };
        var Ec = (0,
        d.connect)(fc, bc)(Cc);
        const Oc = "main"
          , yc = "field-edit"
          , Tc = "icon";
        class xc extends i.Component {
            get activeViewId() {
                const {isSelectingIcon: e, selectedField: t} = this.props;
                return e ? Tc : t.field ? yc : Oc
            }
            renderContent() {
                const {customWidgetId: e, revisionId: t} = this.props;
                switch (this.activeViewId) {
                case Tc:
                    return (0,
                    ne.jsx)(Ec, {
                        customWidgetId: e,
                        revisionId: t
                    });
                case yc:
                    return (0,
                    ne.jsx)(dc, {
                        customWidgetId: e,
                        revisionId: t
                    });
                default:
                    return (0,
                    ne.jsx)(dd, {
                        customWidgetId: e,
                        revisionId: t
                    })
                }
            }
            render() {
                const e = be()("custom-widget-editor-sidebar", this.activeViewId === Oc && "main-sidebar", this.activeViewId === yc && "field-edit-sidebar", this.activeViewId === Tc && "icon-sidebar");
                return (0,
                ne.jsx)("div", {
                    className: e,
                    children: this.renderContent()
                })
            }
        }
        xc.propTypes = {
            customWidgetId: u.default.customWidgetId.isRequired,
            isSelectingIcon: a().bool.isRequired,
            selectedField: a().object.isRequired,
            revisionId: a().number
        };
        function jc() {
            return (e, t) => ({
                customWidgetId: t.customWidgetId,
                isSelectingIcon: N.getIsSelectingIcon(e, t),
                selectedField: N.getSelectedField(e, t)
            })
        }
        class Ic extends i.Component {
            render() {
                const {customWidgetId: e, isSelectingIcon: t, selectedField: s, revisionId: i} = this.props;
                return (0,
                ne.jsx)(xc, {
                    customWidgetId: e,
                    revisionId: i,
                    isSelectingIcon: t,
                    selectedField: s
                })
            }
        }
        Ic.propTypes = {
            customWidgetId: u.default.customWidgetId.isRequired,
            isSelectingIcon: a().bool.isRequired,
            selectedField: a().object.isRequired,
            revisionId: a().number
        };
        var Rc = (0,
        d.connect)(jc, {})(Ic)
          , Sc = s(684)
          , Fc = s(685)
          , Lc = s(993)
          , vc = s(1402)
          , Wc = s(1397)
          , Ac = s(1399)
          , Dc = s(1398)
          , Pc = s(1400)
          , Nc = s(520)
          , _c = s(1369)
          , qc = s(267)
          , Uc = s(1394)
          , kc = s(1392);
        const Gc = (0,
        Nc.default)({
            domNodeRefProp: "innerRef"
        })(vc.default);
        function Mc() {
            const e = P.makeGetCustomWidgetBuffer()
              , t = P.makeGetCustomWidgetBufferFields()
              , s = (0,
            P.makeGetIsEmailOrAnyType)()
              , i = P.makeGetSmartContentProps()
              , n = P.makeGetSmartObjects()
              , o = P.makeGetIsReadOnly();
            return function(d, r) {
                const l = t(d, r);
                let a = e(d, r);
                a = a ? a.set("fields", l) : {
                    fields: l,
                    id: r.customWidgetId
                };
                const u = i(d, r);
                return Object.assign({
                    isEmailOrAnyType: s(d, r),
                    isReadOnly: (0,
                    w.getUserHasReadAccessOnly)(d) || o(d, r),
                    customWidgetBuffer: a,
                    smartRuleIds: (u.smartObjects || []).map((e => e.criterion_id)),
                    smartRulesById: n(d, r),
                    selectedSmartRuleId: N.getSelectedSmartRuleId(d, r)
                }, u)
            }
        }
        const Bc = {
            setIsEditingGlobalContent: A.setIsEditingGlobalContent,
            editGlobalContent: W.editGlobalContent,
            addSmartRule: W.addSmartRule,
            editSmartRule: W.editSmartRule,
            editSmartRulesOrder: W.editSmartRulesOrder,
            removeSmartRule: W.removeSmartRule,
            removeSmartRules: W.removeSmartRules,
            selectSmartRule: A.selectSmartRule,
            updateSmartRules: W.updateSmartRules,
            makeSmart: W.makeSmart
        }
          , wc = e => `DesignEditorsUI.customWidgetEditor.globalContentCard.${e}`;
        class Hc extends i.PureComponent {
            constructor(e) {
                super(e);
                this.getGlobalContent = (e, t) => {
                    let s = e.fields.reduce(( (e, t) => Object.assign({}, e, {
                        [t.name]: t.default
                    })), {});
                    if (t) {
                        const e = this.props.smartRulesById[t] || {};
                        s = Object.assign({}, s, e)
                    }
                    return s
                }
                ;
                this.editGlobalContent = e => {
                    const t = this.getGlobalContent(this.props.customWidgetBuffer, this.props.selectedSmartRuleId)
                      , s = {};
                    Object.keys(e).forEach((i => {
                        const n = e[i];
                        (0,
                        c.isEqual)(t[i], n) || (s[i] = n)
                    }
                    ));
                    this.props.editGlobalContent(this.props.customWidgetId, s)
                }
                ;
                this.handleCancel = () => {
                    this.props.setIsEditingGlobalContent(this.props.customWidgetId, !1)
                }
                ;
                this.keybindingConfig = {
                    [x.MODIFIERS.NONE]: {
                        [x.KEYS.ESCAPE]: new I.default({
                            handler: this.handleCancel
                        })
                    }
                };
                this.handleFormUpdate = (e, t, s) => {
                    this.setState({
                        globalContent: s
                    });
                    this.props.selectedSmartRuleId ? this.debouncedEditSmartRule(this.props.customWidgetId, this.props.selectedSmartRuleId, s) : this.debouncedEditGlobalContent(s)
                }
                ;
                this.getSmartObjectData = e => (0,
                qc.getSmartObjectDataFromCriterion)(e, _c.TargetTypes.WIDGET);
                this.handleSelectSmartRule = (e={}) => {
                    const {customWidgetId: t, selectSmartRule: s, smartRulesById: i} = this.props
                      , {id: n} = e;
                    s(t, n);
                    n && !i[n] && this.handleAddSmartRule(e)
                }
                ;
                this.handleAddSmartRule = e => {
                    const {customWidgetId: t, selectSmartRule: s, addSmartRule: i} = this.props;
                    i(t, this.getSmartObjectData(e));
                    s(t, e.id)
                }
                ;
                this.handleMakeSmart = ({definition: e, criterionType: t, initialCriterion: s}) => {
                    const i = {
                        definitionId: e.id,
                        smartObjects: [this.getSmartObjectData(s)],
                        smartType: t
                    };
                    this.props.makeSmart(this.props.customWidgetId, i)
                }
                ;
                this.handleSaveSmartDefinition = (e, t={}) => {
                    const {customWidgetId: s, updateSmartRules: i} = this.props;
                    i(s, e.map(this.getSmartObjectData), t)
                }
                ;
                const t = Sc.guard.bind(null, this.guardReadOnly);
                this.handleFormUpdate = t(this.handleFormUpdate, this);
                this.handleRemoveSelectedSmartRule = t(this.handleRemoveSelectedSmartRule, this);
                this.handleAddSmartRule = t(this.handleAddSmartRule, this);
                this.handleEditSmartRulesOrder = t(this.handleEditSmartRulesOrder, this);
                this.handleRemoveAllSmartRules = t(this.handleRemoveAllSmartRules, this);
                this.editGlobalContent = t(this.editGlobalContent, this);
                this.debouncedEditGlobalContent = (0,
                c.debounce)(this.editGlobalContent, Fc.INPUT_DEBOUNCE_DELAY);
                this.handleMakeSmart = t(this.handleMakeSmart, this);
                this.debouncedEditSmartRule = (0,
                c.debounce)(e.editSmartRule, Fc.INPUT_DEBOUNCE_DELAY);
                this.state = {
                    globalContent: this.getGlobalContent(this.props.customWidgetBuffer, this.props.selectedSmartRuleId)
                }
            }
            componentDidUpdate(e) {
                const {customWidgetId: t, revisionId: s, selectedSmartRuleId: i} = this.props;
                e.customWidgetId === t && e.revisionId === s && e.selectedSmartRuleId === i || this.setState({
                    globalContent: this.getGlobalContent(this.props.customWidgetBuffer, this.props.selectedSmartRuleId)
                })
            }
            get formKey() {
                const {customWidgetId: e, revisionId: t, selectedSmartRuleId: s} = this.props;
                return [e, t, s].filter(Boolean).join("-")
            }
            guardReadOnly() {
                return this.props.isReadOnly
            }
            renderForm() {
                const {isReadOnly: e, customWidgetId: t, customWidgetBuffer: s} = this.props;
                return (0,
                ne.jsx)(kc.default, {
                    flush: !1,
                    id: `${t}`,
                    module: this.state.globalContent,
                    moduleSpec: s,
                    onUpdate: this.handleFormUpdate,
                    readOnly: e,
                    hideLockedFields: !1
                }, this.formKey)
            }
            renderSmartDefinitionControls() {
                const {isEligibleForSmartContent: e, isEmailOrAnyType: t, isReadOnly: s, customWidgetId: i, definitionId: n, selectedSmartRuleId: o, smartType: d, smartRuleIds: r, revisionId: l} = this.props;
                return e ? (0,
                ne.jsx)("div", {
                    className: "p-x-6 p-bottom-3",
                    children: (0,
                    ne.jsx)(Uc.default, {
                        anonymousTargeting: !t,
                        definitionId: n,
                        onAddRule: this.handleAddSmartRule,
                        onSaveSmartDefinition: this.handleSaveSmartDefinition,
                        onSelectRule: this.handleSelectSmartRule,
                        readOnly: s || !!l,
                        selectedRuleId: o,
                        smartType: d,
                        targetId: i,
                        validRules: r
                    }, `${this.formKey}-smart-controls`)
                }) : null
            }
            render() {
                const e = this.props.isEligibleForSmartContent ? "globalAndSmart" : "global"
                  , t = (0,
                ne.jsx)(p.default, {
                    message: wc(`title.${e}`),
                    options: {
                        label: this.props.customWidgetBuffer.name
                    }
                });
                return (0,
                ne.jsx)(Gc, {
                    className: "custom-widget-global-content-card",
                    keybindingConfig: this.keybindingConfig,
                    children: (0,
                    ne.jsxs)(Pc.default, {
                        children: [(0,
                        ne.jsx)(Dc.default, {
                            className: "p-bottom-0",
                            children: (0,
                            ne.jsx)(Lc.default, {
                                className: "m-top-0",
                                flush: !0,
                                children: (0,
                                ne.jsx)(G.default, {
                                    onClick: this.handleCancel,
                                    use: "link",
                                    children: (0,
                                    ne.jsx)(p.default, {
                                        message: wc("backButtonText")
                                    })
                                })
                            })
                        }), (0,
                        ne.jsx)(Ac.default, {
                            title: t
                        }), (0,
                        ne.jsxs)(Wc.default, {
                            flush: !0,
                            children: [this.renderSmartDefinitionControls(), this.renderForm()]
                        })]
                    })
                })
            }
        }
        Hc.propTypes = {
            customWidgetId: u.default.customWidgetId.isRequired,
            revisionId: a().number,
            customWidgetBuffer: a().instanceOf(T.default).isRequired,
            isEmailOrAnyType: a().bool,
            isReadOnly: a().bool.isRequired,
            setIsEditingGlobalContent: a().func.isRequired,
            editGlobalContent: a().func.isRequired,
            selectedSmartRuleId: a().number,
            definitionId: a().number,
            smartRuleIds: a().arrayOf(a().number),
            smartRulesById: a().object.isRequired,
            smartType: a().oneOf(Object.keys(_c.CriterionTypes)),
            addSmartRule: a().func.isRequired,
            editSmartRule: a().func.isRequired,
            selectSmartRule: a().func.isRequired,
            makeSmart: a().func.isRequired,
            isEligibleForSmartContent: a().bool.isRequired,
            updateSmartRules: a().func.isRequired
        };
        var Vc = (0,
        d.connect)(Mc, Bc)(Hc)
          , $c = s(519);
        const Yc = e => `DesignEditorsUI.customWidgetEditor.sidebar.fieldEdit.${e}`;
        function zc() {
            const e = P.makeGetIsEmailOrAnyType()
              , t = P.makeGetIsReadOnly();
            return (s, i) => {
                const n = P.makeGetCustomWidgetBuffer()(s, i)
                  , o = N.getFieldErrors(s, i)
                  , d = N.getFieldWarnings(s, i)
                  , r = t(s, i)
                  , l = N.getIsEditingGlobalContent(s, i);
                return Object.assign({
                    customWidgetId: i.customWidgetId,
                    isReadOnly: (0,
                    w.getUserHasReadAccessOnly)(s) || r || l,
                    fieldErrors: (0,
                    c.pick)(o, [wt.MIN, wt.CHOICES, wt.DEFAULT]),
                    fieldWarnings: (0,
                    c.pick)(d, [wt.MIN, wt.CHOICES, wt.DEFAULT]),
                    isEmailOrAnyType: e(s, i),
                    isV1: !!n && 1 === n.schemaVersion
                }, N.getSelectedField(s, i))
            }
        }
        const Kc = {
            editField: W.editField,
            setFullScreenEditorOpen: A.setFullScreenEditorOpen
        };
        class Jc extends i.PureComponent {
            constructor(...e) {
                super(...e);
                this.state = {
                    field: this.props.field
                };
                this.editField = e => {
                    const {customWidgetId: t} = this.props
                      , {field: s} = this.state
                      , i = s.merge(e);
                    this.setState({
                        field: i
                    });
                    this.debouncedEditField(t, i)
                }
                ;
                this.debouncedEditField = (0,
                c.debounce)((function(e, t) {
                    this.props.editField(e, t)
                }
                ), 1e3);
                this.closeEditor = () => {
                    setTimeout(( () => this.props.setFullScreenEditorOpen(this.props.customWidgetId, !1)), 0)
                }
                ;
                this.onSourceChange = e => {
                    const {value: t} = e;
                    null != t && this.editField({
                        [wt.DEFAULT]: t
                    })
                }
            }
            renderBreadcrumbs() {
                return (0,
                ne.jsx)(Lc.default, {
                    className: "m-top-0",
                    flush: !0,
                    children: (0,
                    ne.jsx)(M.default, {
                        "data-test-id": "full-screen-field-editor-back-button",
                        onClick: this.closeEditor,
                        children: (0,
                        ne.jsx)(p.default, {
                            message: Yc("backToEditor")
                        })
                    })
                })
            }
            renderFullScreenCodeEditor() {
                const {field: e} = this.props
                  , t = e[wt.DEFAULT]
                  , s = e.occurrence && Array.isArray(t) ? t && t[0] : t;
                return (0,
                ne.jsxs)("div", {
                    className: "custom-widget-field-editor-full-screen-editor",
                    children: [(0,
                    ne.jsx)(Ze.default, {
                        leftContent: this.renderBreadcrumbs()
                    }), (0,
                    ne.jsx)(ye.default, {
                        sessionId: e.id,
                        mode: e.type === Gi.HTML ? "htmlmixed" : "hubl-html",
                        height: "auto",
                        autofocus: !0,
                        value: s || "",
                        onChange: this.onSourceChange,
                        enableHublValidation: !1
                    }, e.id)]
                })
            }
            render() {
                const {customWidgetId: e, field: t, fieldErrors: s, fieldWarnings: i, isReadOnly: n, isV1: o, isEmailOrAnyType: d} = this.props;
                if (!t) {
                    this.closeEditor();
                    return null
                }
                return t.type === Gi.HTML || t.type === Gi.HUBL ? this.renderFullScreenCodeEditor() : (0,
                ne.jsx)(vc.default, {
                    style: {
                        height: "100%",
                        position: "absolute"
                    },
                    children: (0,
                    ne.jsxs)(Pc.default, {
                        children: [(0,
                        ne.jsx)(Dc.default, {
                            children: this.renderBreadcrumbs()
                        }), (0,
                        ne.jsx)(Wc.default, {
                            children: (0,
                            ne.jsx)(Wu, {
                                customWidgetId: e,
                                editField: this.editField,
                                field: t,
                                fieldErrors: s,
                                fieldWarnings: i,
                                readOnly: n,
                                isV1: o,
                                isEmailOrAnyType: d
                            })
                        })]
                    })
                })
            }
        }
        Jc.propTypes = {
            customWidgetId: u.default.customWidgetId.isRequired,
            editField: a().func.isRequired,
            field: a().instanceOf(bt.default),
            fieldErrors: a().object.isRequired,
            fieldWarnings: a().object.isRequired,
            setFullScreenEditorOpen: a().func.isRequired,
            isEmailOrAnyType: a().bool.isRequired,
            isReadOnly: a().bool.isRequired,
            isV1: a().bool.isRequired
        };
        Jc.defaultProps = {
            customWidgetIcon: null,
            field: null,
            isNew: !1
        };
        var Xc = (0,
        d.connect)(zc, Kc)(Jc)
          , Zc = s(615)
          , Qc = s(482)
          , ep = s(4)
          , tp = s.n(ep)
          , sp = s(7)
          , ip = s.n(sp)
          , np = s(986)
          , op = s(16);
        class dp {
            constructor(e) {
                this.resetTimer = () => {
                    if (this.timer) {
                        clearTimeout(this.timer);
                        this.timer = setTimeout(this.broadcastValues, dp.timeout)
                    }
                }
                ;
                this.broadcastValues = () => {
                    this.callback && this.callback(this.buffer);
                    this.buffer = [];
                    this.timer && clearTimeout(this.timer);
                    this.timer = null
                }
                ;
                this.next = e => {
                    this.buffer.push(e);
                    this.timer ? this.resetTimer() : this.timer = setTimeout(this.broadcastValues, dp.timeout)
                }
                ;
                this.buffer = [];
                this.timer = null;
                this.callback = e
            }
        }
        dp.timeout = 1e3;
        const rp = (e, t) => e.flash[t.key];
        var lp = s(300);
        const ap = ip()(np.default).withConfig({
            displayName: "withDescriptionInputs__InlineInput",
            componentId: "sc-11cghd0-0"
        })(["max-width:calc(100% - (170px + (", " * 6)));> span{font-size:", " !important;}"], (e => e.fontSize), (e => e.fontSize))
          , up = 20
          , cp = /^ {4}"description": /gm
          , pp = / {4}"description": "(.*)"/m
          , hp = e => ({
            line: e.lineOracle.line,
            value: pp.exec(e.string)[1],
            ch: e.string.length - 2
        })
          , gp = e => ({
            codemirrorOptions: (0,
            Oe.getCodemirrorOptions)(e),
            refresh: rp(e, {
                key: lp.LANGUAGE_EDITOR_LANGUAGE_REGENERATED
            })
        })
          , mp = {};
        var fp = e => {
            class t extends i.PureComponent {
                constructor(e) {
                    super(e);
                    this.linesHash = {};
                    this.onBlur = (e, t) => {
                        const {target: {value: s}} = t;
                        if (s === e.value)
                            return;
                        const i = this.linesHash[e.line];
                        i && this.cm.operation(( () => {
                            i.clear();
                            this.cm.doc.replaceRange(s, {
                                line: e.line,
                                ch: up
                            }, {
                                line: e.line,
                                ch: e.ch
                            });
                            const t = {
                                line: e.line,
                                ch: this.cm.doc.getLine(e.line).length - 2,
                                value: s
                            };
                            this.addWidget(t)
                        }
                        ))
                    }
                    ;
                    this.onKeyPress = e => {
                        e.key !== x.KEYS.ENTER && "Enter" !== e.key || e.target.blur()
                    }
                    ;
                    this.onBufferBroadcast = e => {
                        e.length && this.cm.operation(( () => {
                            e.forEach((e => {
                                this.addWidget(e)
                            }
                            ))
                        }
                        ))
                    }
                    ;
                    this.addWidget = e => {
                        const t = this.createNode(e);
                        this.linesHash[e.line] = this.cm.markText({
                            line: e.line,
                            ch: up
                        }, {
                            line: e.line,
                            ch: e.ch
                        }, {
                            replacedWith: t,
                            clearWhenEmpty: !1,
                            inclusiveLeft: !0,
                            inclusiveRight: !0
                        })
                    }
                    ;
                    this.createNode = e => {
                        const t = document.createElement("span");
                        tp().render((0,
                        ne.jsx)(op.AppProvider, {
                            children: (0,
                            ne.jsx)(ap, {
                                defaultValue: e.value,
                                use: "on-dark",
                                affordance: !0,
                                fontSize: this.props.codemirrorOptions.fontSize,
                                onBlur: this.props.partial(this.onBlur, e),
                                onKeyPress: this.onKeyPress
                            })
                        }), t);
                        return t
                    }
                    ;
                    this.createOverlay = () => ({
                        token: e => {
                            if (cp.exec(e.string)) {
                                const t = e.lineOracle.line;
                                if (!this.linesHash[t]) {
                                    const s = hp(e);
                                    this.linesHash[t] = t;
                                    this.lineBuffer.next(s)
                                }
                            }
                            e.skipToEnd();
                            return null
                        }
                    });
                    this.codemirrorDidMountOrUpdate = e => {
                        if (this.cm !== e) {
                            this.cm = e;
                            if (this.cm && !this.cm_overlay) {
                                this.cm_overlay = this.createOverlay();
                                this.cm.addOverlay(this.cm_overlay)
                            }
                        }
                    }
                    ;
                    this.setRef = e => {
                        if (!this.props.readOnly || this.props.revisionId)
                            return;
                        const t = e && e.codemirror;
                        this.codemirrorDidMountOrUpdate(t)
                    }
                    ;
                    this.lineBuffer = new dp(this.onBufferBroadcast)
                }
                componentDidUpdate(e) {
                    if (e.refresh && this.cm) {
                        this.linesHash = {};
                        this.cm_overlay ? this.cm.removeOverlay(this.cm_overlay) : this.cm_overlay = this.createOverlay();
                        this.cm.addOverlay(this.cm_overlay)
                    }
                }
                render() {
                    return (0,
                    ne.jsx)(e, Object.assign({}, this.props, {
                        refCodemirror: this.setRef
                    }))
                }
            }
            t.propTypes = {
                value: a().string.isRequired,
                codemirrorOptions: a().object.isRequired,
                partial: a().func.isRequired,
                readOnly: a().bool,
                refresh: a().bool,
                revisionId: a().number
            };
            t.defaultProps = {
                value: ""
            };
            return (0,
            d.connect)(gp, mp)(t)
        }
          , bp = s(848);
        const Cp = e => `DesignEditorsUI.customWidgetEditor.sidebar.main.translations.${e}`
          , Ep = fp(ye.default);
        function Op() {
            const e = P.makeGetMessages()
              , t = P.makeGetMasterLanguage()
              , s = P.makeGetIsReadOnly();
            return (i, n) => ({
                customWidgetLabel: P.getCustomWidgetLabel(i, n),
                masterLanguage: t(i, n),
                messages: e(i, n),
                isReadOnly: (0,
                w.getUserHasReadAccessOnly)(i) || s(i, n)
            })
        }
        const yp = {
            setLanguageEditor: A.setLanguageEditor,
            updateLanguage: W.updateLanguage,
            addLanguage: W.addLanguage,
            regenerateTranslations: W.regenerateTranslations,
            registerStatusBar: Zc.registerStatusBar
        };
        class Tp extends i.Component {
            constructor(...e) {
                super(...e);
                this.closeEditor = () => {
                    this.props.setLanguageEditor(this.props.customWidgetId, null)
                }
                ;
                this.onChange = (0,
                c.debounce)(( ({value: e}) => {
                    let t;
                    try {
                        t = JSON.parse(e)
                    } catch (e) {
                        return
                    }
                    this.props.updateLanguage(this.props.customWidgetId, this.props.selectedLanguageEditor, t)
                }
                ), 1e3);
                this.regenerateTranslations = () => {
                    this.props.regenerateTranslations(this.props.customWidgetId, this.props.customWidgetLabel, this.props.selectedLanguageEditor)
                }
            }
            componentDidMount() {
                const {selectedLanguageEditor: e} = this.props;
                this.props.registerStatusBar({
                    activeLanguage: e
                })
            }
            componentDidUpdate(e) {
                this.props.messages[this.props.selectedLanguageEditor] && this.props.masterLanguage || this.props.setLanguageEditor(this.props.customWidgetId, null);
                e.selectedLanguageEditor !== this.props.selectedLanguageEditor && this.props.registerStatusBar({
                    activeLanguage: this.props.selectedLanguageEditor
                })
            }
            componentWillUnmount() {
                this.props.registerStatusBar({
                    activeLanguage: null
                })
            }
            get value() {
                const {selectedLanguageEditor: e, messages: t, masterLanguage: s, addLanguage: i, customWidgetId: n, customWidgetLabel: o} = this.props;
                let d = t[e];
                if (!d) {
                    e === s && i(n, o, s, !0);
                    return ""
                }
                if (!d.name) {
                    const t = {};
                    e === s && (t.description = "");
                    t.message = o;
                    d = d.set("name", t)
                }
                return (0,
                Qc.generateTranslationsFile)(d)
            }
            renderBreadcrumbs() {
                return (0,
                ne.jsx)(Lc.default, {
                    className: "m-top-0",
                    flush: !0,
                    children: (0,
                    ne.jsx)(M.default, {
                        onClick: this.closeEditor,
                        children: (0,
                        ne.jsx)(p.default, {
                            message: Cp("editor.backButton")
                        })
                    })
                })
            }
            renderLabel() {
                return (0,
                ne.jsx)(xi.default, {
                    children: (0,
                    ne.jsx)(U.default, {
                        message: Cp("editor.header"),
                        options: {
                            language: (0,
                            ne.jsx)(p.default, {
                                message: (0,
                                bp.languageI18nKey)(this.props.selectedLanguageEditor)
                            })
                        }
                    })
                })
            }
            renderRegenerateButton() {
                return (0,
                ne.jsx)(G.default, {
                    use: "tertiary-light",
                    size: "extra-small",
                    onClick: this.regenerateTranslations,
                    disabled: this.props.isReadOnly,
                    children: (0,
                    ne.jsx)(p.default, {
                        message: Cp("editor.regenerateButton"),
                        options: {
                            language: me.default.text((0,
                            bp.languageI18nKey)(this.props.selectedLanguageEditor))
                        }
                    })
                })
            }
            render() {
                const {customWidgetId: e, selectedLanguageEditor: t, masterLanguage: s, revisionId: i, partial: n, isReadOnly: o} = this.props
                  , d = `${e}${t}`;
                return (0,
                ne.jsxs)("div", {
                    className: "custom-widget-field-editor-full-screen-editor",
                    children: [(0,
                    ne.jsx)(Ze.default, {
                        leftContent: this.renderBreadcrumbs(),
                        middleContent: this.renderLabel(),
                        rightContent: this.renderRegenerateButton(),
                        renderSettings: !1
                    }), (0,
                    ne.jsx)(Ep, {
                        sessionId: d,
                        mode: "javascript",
                        height: "100%",
                        width: "100%",
                        autofocus: !0,
                        value: this.value,
                        enableHublValidation: !1,
                        readOnly: t === s || !!i || o,
                        revisionId: i,
                        onChange: this.onChange,
                        partial: n,
                        codemirrorType: "json"
                    }, d)]
                })
            }
        }
        Tp.propTypes = {
            setLanguageEditor: a().func.isRequired,
            customWidgetId: u.default.customWidgetId.isRequired,
            revisionId: a().number,
            selectedLanguageEditor: a().string.isRequired,
            masterLanguage: a().string,
            messages: a().object.isRequired,
            updateLanguage: a().func.isRequired,
            addLanguage: a().func.isRequired,
            partial: a().func.isRequired,
            regenerateTranslations: a().func.isRequired,
            registerStatusBar: a().func,
            isReadOnly: a().bool,
            customWidgetLabel: a().string.isRequired
        };
        var xp = (0,
        q.compose)((0,
        d.connect)(Op, yp), (0,
        jl.default)())(Tp);
        class jp extends i.PureComponent {
            constructor(...e) {
                super(...e);
                this.keybindingConfig = {
                    [x.MODIFIERS.COMMAND]: {
                        [x.KEYS.S]: new I.default({
                            handler: this.props.onSave
                        }),
                        [x.KEYS.Z]: new I.default({
                            handler: this.props.onUndoCustomWidgetEdit
                        }),
                        [x.KEYS.Y]: new I.default({
                            handler: this.props.onRedoCustomWidgetEdit
                        })
                    },
                    [x.MODIFIERS.COMMAND_SHIFT]: {
                        [x.KEYS.Z]: new I.default({
                            handler: this.props.onRedoCustomWidgetEdit
                        }),
                        [x.KEYS.P]: new I.default({
                            handler: this.props.onPublishCustomWidget
                        })
                    }
                };
                this.onCodePanesRender = (0,
                c.debounce)(( () => {
                    this.props.editorLoaded(this.props.customWidgetId)
                }
                ), 250);
                this.onSidebarResize = e => {
                    const t = (0,
                    c.mapObject)(e, (e => ({
                        size: e
                    })));
                    this.props.updatePaneOptions(t)
                }
            }
            renderToolbar() {
                const {customWidgetId: e, revisionId: t} = this.props;
                return (0,
                ne.jsx)(ft, {
                    customWidgetId: e,
                    revisionId: t
                })
            }
            renderEditor() {
                const {customWidgetId: e, paneOptions: t, revisionId: s, isEditingGlobalContent: i, isFullScreenEditorOpen: n, selectedLanguageEditor: o} = this.props
                  , {size: d} = t[S.CODE_PANES] || new j.default({})
                  , r = i || n ? "" : "code-panes-pane";
                let l = (0,
                ne.jsx)(Ke, {
                    customWidgetId: e,
                    revisionId: s,
                    onCodePanesRender: this.onCodePanesRender
                });
                i ? l = (0,
                ne.jsx)(Vc, {
                    customWidgetId: e,
                    revisionId: s
                }) : n ? l = (0,
                ne.jsx)(Xc, {
                    customWidgetId: e,
                    revisionId: s
                }) : o && (l = (0,
                ne.jsx)(xp, {
                    customWidgetId: e,
                    revisionId: s,
                    selectedLanguageEditor: o
                }));
                const {size: a} = t[S.SIDEBAR] || new j.default({})
                  , u = new j.default({
                    value: R.SIDEBAR_WIDTH
                });
                return (0,
                ne.jsxs)(L.default, {
                    direction: "vertical",
                    onPaneResize: this.onSidebarResize,
                    children: [(0,
                    ne.jsx)(v.default, {
                        className: r,
                        defaultSize: d,
                        paneId: S.CODE_PANES,
                        scrollable: !1,
                        children: l
                    }), (0,
                    ne.jsx)(v.default, {
                        unitsOnResize: F.PIXELS,
                        defaultSize: a,
                        minSize: u,
                        paneId: S.SIDEBAR,
                        scrollable: !1,
                        children: (0,
                        ne.jsx)(Rc, {
                            customWidgetId: e,
                            revisionId: s
                        })
                    })]
                })
            }
            render() {
                return (0,
                ne.jsxs)($c.default, {
                    className: "custom-widget-editor",
                    keybindingConfig: this.keybindingConfig,
                    children: [this.renderToolbar(), this.renderEditor()]
                })
            }
        }
        jp.propTypes = {
            customWidgetId: u.default.customWidgetId.isRequired,
            isEditingGlobalContent: a().bool.isRequired,
            revisionId: a().number,
            onRedoCustomWidgetEdit: a().func.isRequired,
            onSave: a().func.isRequired,
            onUndoCustomWidgetEdit: a().func.isRequired,
            paneOptions: a().object.isRequired,
            updatePaneOptions: a().func.isRequired,
            isFullScreenEditorOpen: a().bool.isRequired,
            selectedLanguageEditor: a().string,
            onPublishCustomWidget: a().func.isRequired,
            editorLoaded: a().func.isRequired
        };
        var Ip = jp
          , Rp = s(100);
        s(50);
        const Sp = e => e.previewOptions.byAsset
          , Fp = (0,
        Rp.createSelector)([Sp, yr.getActiveAssetId], ( (e, t) => e[t] || e.default))
          , Lp = (0,
        Rp.createSelector)([Fp], (e => e.isPreviewOpen));
        (0,
        Rp.createSelector)([Fp], (e => e.previewConfiguration));
        var vp = s(516);
        const Wp = (0,
        c.once)((e => {
            e()
        }
        ));
        class Ap extends i.Component {
            constructor(...e) {
                super(...e);
                this.guardReadOnly = () => this.props.isReadOnly;
                this.bindAndGuardReadOnly = Sc.guard.bind(null, this.guardReadOnly);
                this.onSave = this.bindAndGuardReadOnly(( () => {
                    const {customWidgetId: e, saveCustomWidgetBuffer: t, requestStatus: s} = this.props;
                    s.isPublishing || t(e)
                }
                ));
                this.onRedoCustomWidgetEdit = this.bindAndGuardReadOnly(( () => {
                    const {customWidgetId: e, redoCustomWidgetEdit: t} = this.props;
                    t(e)
                }
                ));
                this.onUndoCustomWidgetEdit = this.bindAndGuardReadOnly(( () => {
                    const {customWidgetId: e, undoCustomWidgetEdit: t} = this.props;
                    t(e)
                }
                ));
                this.publishCustomWidget = this.bindAndGuardReadOnly(( () => {
                    const {customWidgetId: e, publishCustomWidgetBuffer: t} = this.props;
                    t(e)
                }
                ));
                this.updatePaneOptions = e => {
                    const {customWidgetId: t, updatePaneOptions: s} = this.props;
                    s(t, e)
                }
            }
            componentDidMount() {
                const {isReadOnly: e, customWidgetBuffer: t} = this.props;
                if (this.props.customWidgetId) {
                    this.validateOnInitialLoad();
                    this.props.revisionId ? this.props.fetchCustomWidgetRevision(this.props.customWidgetId, this.props.revisionId) : this.props.fetchCustomWidgetBuffer(this.props.customWidgetId);
                    Wp(this.props.fetchCustomWidgetEditorOptions);
                    this.props.hydrateCustomWidgetEditorOptions(this.props.customWidgetId);
                    t && e && this.trackDefaultModuleOpen()
                }
            }
            componentDidUpdate(e) {
                if (!this.props.customWidgetId)
                    return;
                this.props.revisionId && e.revisionId !== this.props.revisionId ? this.props.fetchCustomWidgetRevision(this.props.customWidgetId, this.props.revisionId) : (e.customWidgetId !== this.props.customWidgetId || e.revisionId && !this.props.revisionId) && this.props.fetchCustomWidgetBuffer(this.props.customWidgetId);
                this.validateOnInitialLoad();
                const {customWidgetId: t, isReadOnly: s, customWidgetBuffer: i} = this.props;
                e.customWidgetId !== t && this.props.hydrateCustomWidgetEditorOptions(t);
                !e.customWidgetBuffer && i && s && this.trackDefaultModuleOpen()
            }
            shouldComponentUpdate(e, t) {
                return !!e.customWidgetId && o()(this, e, t)
            }
            trackDefaultModuleOpen() {
                const {customWidgetBuffer: e} = this.props;
                e.default && (0,
                vp.trackDefaultModuleOpen)(e.path)
            }
            validateOnInitialLoad() {
                if (this.props.isReadOnly || this.props.revisionId)
                    return;
                const {customWidgetId: e} = this.props;
                if (!e)
                    return;
                const {buffersInitiallyValidated: t} = Ap;
                if (!t[e]) {
                    this.props.validateCustomWidgetBuffer(e);
                    t[e] = !0
                }
            }
            render() {
                const {customWidgetBuffer: e, customWidgetId: t, isPreviewOpen: s, paneOptions: i, revisionId: n, isEditingGlobalContent: o, isFullScreenEditorOpen: d, selectedLanguageEditor: l, folderPath: a, fileName: u, requestStatus: c, editorLoaded: O, isUngatedForIdeUsageSurvey: y} = this.props;
                if (c.fetchError)
                    return (0,
                    ne.jsx)(r.NavMarker, {
                        name: "MODULE_EDITOR_ERROR",
                        children: (0,
                        ne.jsx)(f.default, {
                            grow: 1,
                            children: (0,
                            ne.jsx)(g.default, {
                                title: (0,
                                h.default)("designManager.errorPages.loadingErrors.moduleEditor.title"),
                                type: "badRequest",
                                children: (0,
                                ne.jsx)(p.default, {
                                    message: "designManager.errorPages.loadingErrors.moduleEditor.message"
                                })
                            })
                        })
                    });
                if (!e)
                    return (0,
                    ne.jsx)(m.default, {
                        grow: !0,
                        minHeight: 300
                    });
                const T = y && (0,
                C.getSurveyVersion)();
                T ? console.log("DM Survey Version: ", T) : (0,
                b.triggerWootricSurvey)();
                return (0,
                ne.jsxs)(r.NavMarker, {
                    name: "MODULE_EDITOR",
                    children: [(0,
                    ne.jsx)(Ip, {
                        customWidgetId: t,
                        revisionId: n,
                        isPreviewOpen: s,
                        isEditingGlobalContent: o,
                        isFullScreenEditorOpen: d,
                        onPublish: this.onPublish,
                        onRedoCustomWidgetEdit: this.onRedoCustomWidgetEdit,
                        onSave: this.onSave,
                        onUndoCustomWidgetEdit: this.onUndoCustomWidgetEdit,
                        onPublishCustomWidget: this.publishCustomWidget,
                        paneOptions: i,
                        updatePaneOptions: this.updatePaneOptions,
                        selectedLanguageEditor: l,
                        fileName: u,
                        folderPath: a,
                        editorLoaded: O
                    }), (0,
                    ne.jsx)(E.SurveyContainer, {})]
                })
            }
        }
        Ap.propTypes = {
            customWidgetBuffer: a().instanceOf(T.default),
            customWidgetId: u.default.customWidgetId,
            revisionId: a().number,
            fetchCustomWidgetBuffer: a().func.isRequired,
            fetchCustomWidgetRevision: a().func.isRequired,
            fetchCustomWidgetEditorOptions: a().func.isRequired,
            hydrateCustomWidgetEditorOptions: a().func.isRequired,
            isPreviewOpen: a().bool.isRequired,
            isReadOnly: a().bool.isRequired,
            isEditingGlobalContent: a().bool.isRequired,
            paneOptions: a().object.isRequired,
            redoCustomWidgetEdit: a().func.isRequired,
            requestStatus: a().object.isRequired,
            saveCustomWidgetBuffer: a().func.isRequired,
            undoCustomWidgetEdit: a().func.isRequired,
            updatePaneOptions: a().func.isRequired,
            validateCustomWidgetBuffer: a().func.isRequired,
            isFullScreenEditorOpen: a().bool.isRequired,
            selectedLanguageEditor: a().string,
            publishCustomWidgetBuffer: a().func.isRequired,
            fileName: y.FilePropTypes.fileName,
            folderPath: y.FilePropTypes.folderPath,
            editorLoaded: a().func.isRequired,
            isUngatedForIdeUsageSurvey: a().bool.isRequired
        };
        Ap.defaultProps = {
            customWidgetBuffer: null
        };
        Ap.buffersInitiallyValidated = {};
        function Dp() {
            const e = P.makeGetRequestStatus()
              , t = P.makeGetCustomWidgetBuffer()
              , s = P.makeGetIsReadOnly();
            return (i, n) => {
                let o = n.assetId || yr.getCustomWidgetId(i);
                isNaN(Number(o)) && !o.startsWith("/") && (o = `/${o}`);
                const d = Object.assign({}, n, {
                    assetId: o,
                    customWidgetId: o
                })
                  , r = (0,
                Y.getFile)(i, {
                    fileId: o
                });
                return {
                    customWidgetId: o,
                    customWidgetBuffer: t(i, d),
                    isPreviewOpen: Lp(i),
                    isReadOnly: (0,
                    w.getUserHasReadAccessOnly)(i) || s(i, d),
                    paneOptions: N.getPaneOptions(i, d),
                    requestStatus: e(i, d),
                    isEditingGlobalContent: N.getIsEditingGlobalContent(i, d),
                    isFullScreenEditorOpen: N.getIsFullScreenEditorOpen(i, d),
                    selectedLanguageEditor: N.getSelectedLanguageEditor(i, d),
                    folderPath: r ? r.folderPath : "",
                    fileName: r ? r.name : "",
                    isUngatedForIdeUsageSurvey: (0,
                    O.getIsUngatedForIDEUsageSurvey)(i)
                }
            }
        }
        const Pp = {
            fetchCustomWidgetRevision: W.fetchRevision,
            fetchCustomWidgetEditorOptions: A.fetch,
            hydrateCustomWidgetEditorOptions: A.hydrate,
            redoCustomWidgetEdit: W.redoEdit,
            saveCustomWidgetBuffer: W.save,
            updatePaneOptions: A.updatePaneOptions,
            undoCustomWidgetEdit: W.undoEdit,
            validateCustomWidgetBuffer: W.validate,
            publishCustomWidgetBuffer: W.publish,
            editorLoaded: Tr.editorLoaded
        };
        var Np = (0,
        q.compose)((0,
        d.connect)(Dp, Pp))(Ap)
    },
    1921: function(e, t, s) {
        s.r(t);
        var i = s(94)
          , n = s(479)
          , o = s(1922)
          , d = s(8);
        const r = {
            fetchCustomWidgetBuffer: n.fetch
        };
        function l(e) {
            return (0,
            d.jsx)(o.default, Object.assign({}, e))
        }
        t.default = (0,
        i.connect)(null, r)(l)
    },
    1926: function(e, t, s) {
        s.r(t);
        var i = s(94)
          , n = s(479)
          , o = s(1922)
          , d = s(8);
        const r = {
            fetchCustomWidgetBuffer: n.fetchByPath
        };
        function l(e) {
            return (0,
            d.jsx)(o.default, Object.assign({}, e))
        }
        t.default = (0,
        i.connect)(null, r)(l)
    },
    1927: function(e, t, s) {
        s.r(t);
        s.d(t, {
            default: function() {
                return H
            }
        });
        var i = s(1)
          , n = s(335)
          , o = s(11)
          , d = s.n(o)
          , r = s(94)
          , l = s(1426)
          , a = s.n(l)
          , u = s(64)
          , c = s(341)
          , p = s(133)
          , h = s(690)
          , g = s(600)
          , m = s(613)
          , f = s(298)
          , b = s(308)
          , C = s(494)
          , E = s(521)
          , O = s(784)
          , y = s(519)
          , T = s(1391)
          , x = s(528)
          , j = s(524)
          , I = s(1251)
          , R = s(8);
        const S = e => `DesignEditorsUI.shared.toolbars.${e}`;
        class F extends i.PureComponent {
            renderLeftContent() {
                const {undoGlobalWidgetEdit: e, redoGlobalWidgetEdit: t, pastEditHistoryCount: s, futureEditHistoryCount: i, isPublishDisabled: n} = this.props;
                return (0,
                R.jsx)(I.default, {
                    undo: e,
                    redo: t,
                    pastEditCount: s,
                    futureEditCount: i,
                    disabled: n
                })
            }
            renderRightContent() {
                const {isPublishDisabled: e, publishGlobalWidget: t} = this.props;
                return (0,
                R.jsx)(x.default, {
                    size: "extra-small",
                    use: "primary",
                    disabled: e,
                    onClick: t,
                    "data-test-id": "publish-changes-button",
                    children: (0,
                    R.jsx)(c.default, {
                        message: S("buttons.publish")
                    })
                })
            }
            render() {
                return (0,
                R.jsx)(j.default, {
                    leftContent: this.renderLeftContent(),
                    rightContent: this.renderRightContent()
                })
            }
        }
        F.propTypes = {
            isPublishDisabled: d().bool.isRequired,
            publishGlobalWidget: d().func.isRequired,
            pastEditHistoryCount: n.default.uint32.isRequired,
            futureEditHistoryCount: n.default.uint32.isRequired,
            undoGlobalWidgetEdit: d().func.isRequired,
            redoGlobalWidgetEdit: d().func.isRequired
        };
        var L = F;
        function v() {
            const e = b.makeGetPastEditHistoryCount()
              , t = b.makeGetFutureEditHistoryCount();
            return function(s, i) {
                return {
                    isPublishDisabled: !b.getGlobalWidget(s, i),
                    pastEditHistoryCount: e(s, i),
                    futureEditHistoryCount: t(s, i)
                }
            }
        }
        const W = {
            publishGlobalWidget: C.publish,
            undoGlobalWidgetEdit: C.undoEdit,
            redoGlobalWidgetEdit: C.redoEdit
        };
        class A extends i.Component {
            constructor(...e) {
                super(...e);
                this.undoGlobalWidgetEdit = () => {
                    this.props.pastEditHistoryCount && this.props.undoGlobalWidgetEdit(this.props.globalWidgetId)
                }
                ;
                this.redoGlobalWidgetEdit = () => {
                    this.props.futureEditHistoryCount && this.props.redoGlobalWidgetEdit(this.props.globalWidgetId)
                }
                ;
                this.publishGlobalWidget = () => {
                    this.props.publishGlobalWidget(this.props.globalWidgetId)
                }
            }
            render() {
                return (0,
                R.jsx)(L, {
                    pastEditHistoryCount: this.props.pastEditHistoryCount,
                    futureEditHistoryCount: this.props.futureEditHistoryCount,
                    undoGlobalWidgetEdit: this.undoGlobalWidgetEdit,
                    redoGlobalWidgetEdit: this.redoGlobalWidgetEdit,
                    publishGlobalWidget: this.publishGlobalWidget,
                    isPublishDisabled: this.props.isPublishDisabled
                })
            }
        }
        A.propTypes = {
            globalWidgetId: d().number.isRequired,
            isPublishDisabled: d().bool.isRequired,
            publishGlobalWidget: d().func.isRequired,
            pastEditHistoryCount: n.default.uint32.isRequired,
            futureEditHistoryCount: n.default.uint32.isRequired,
            undoGlobalWidgetEdit: d().func.isRequired,
            redoGlobalWidgetEdit: d().func.isRequired
        };
        var D = (0,
        r.connect)(v, W)(A)
          , P = s(1402);
        class N extends i.PureComponent {
            constructor(...e) {
                super(...e);
                this.keybindingConfig = {
                    [E.MODIFIERS.COMMAND]: {
                        [E.KEYS.Z]: new O.default({
                            handler: this.props.undoGlobalWidgetEdit
                        }),
                        [E.KEYS.Y]: new O.default({
                            handler: this.props.redoGlobalWidgetEdit
                        })
                    },
                    [E.MODIFIERS.COMMAND_SHIFT]: {
                        [E.KEYS.Z]: new O.default({
                            handler: this.props.redoGlobalWidgetEdit
                        })
                    }
                }
            }
            render() {
                const {globalWidgetId: e, revisionId: t, isReadOnly: s} = this.props;
                return (0,
                R.jsxs)(y.default, {
                    className: "global-widget-editor",
                    children: [(0,
                    R.jsx)(D, {
                        globalWidgetId: this.props.globalWidgetId
                    }), (0,
                    R.jsx)(P.default, {
                        children: (0,
                        R.jsx)(T.default, {
                            globalWidgetId: e,
                            isReadOnly: s,
                            revisionId: t,
                            showPublishButton: !1
                        })
                    })]
                })
            }
        }
        N.propTypes = {
            globalWidgetId: d().number.isRequired,
            revisionId: d().number,
            isReadOnly: d().bool.isRequired,
            undoGlobalWidgetEdit: d().func.isRequired,
            redoGlobalWidgetEdit: d().func.isRequired
        };
        var _ = N
          , q = s(1401)
          , U = s(1907)
          , k = s(93)
          , G = s(498);
        function M() {
            const e = b.makeGetPastEditHistoryCount()
              , t = b.makeGetFutureEditHistoryCount();
            return function(s, i) {
                return {
                    fetchError: b.getFetchError(s, i),
                    globalWidgetId: i.assetId || f.getActiveGlobalWidgetId(s),
                    isReadOnly: !!i.revisionId,
                    pastEditHistoryCount: e(s, i),
                    futureEditHistoryCount: t(s, i)
                }
            }
        }
        const B = {
            undoGlobalWidgetEdit: C.undoEdit,
            redoGlobalWidgetEdit: C.redoEdit,
            fetchCustomWidgets: G.fetchCustomWidgets,
            fetchMapping: G.fetchMapping
        };
        class w extends i.Component {
            constructor(...e) {
                super(...e);
                this.undoGlobalWidgetEdit = () => {
                    this.props.pastEditHistoryCount && this.props.undoGlobalWidgetEdit(this.props.globalWidgetId)
                }
                ;
                this.redoGlobalWidgetEdit = () => {
                    this.props.futureEditHistoryCount && this.props.redoGlobalWidgetEdit(this.props.globalWidgetId)
                }
            }
            componentDidMount() {
                const {globalWidgetId: e, isLoaded: t} = this.props;
                this.props.fetchCustomWidgets();
                this.props.fetchMapping();
                e && !t && this.props.fetchGlobalWidget(e)
            }
            componentDidUpdate(e) {
                const {globalWidgetId: t} = e
                  , {globalWidgetId: s, isLoaded: i} = this.props;
                t !== s && s && !i && this.props.fetchGlobalWidget(s)
            }
            shouldComponentUpdate(e, t) {
                return !!e.globalWidgetId && a()(this, e, t)
            }
            render() {
                const {fetchError: e, globalWidgetId: t, isLoaded: s, isReadOnly: i, revisionId: n} = this.props;
                return s ? (0,
                R.jsx)(u.NavMarker, {
                    name: "GLOBAL_MODULE_EDITOR",
                    children: (0,
                    R.jsx)(_, {
                        globalWidgetId: t,
                        revisionId: n,
                        isReadOnly: i,
                        undoGlobalWidgetEdit: this.undoGlobalWidgetEdit,
                        redoGlobalWidgetEdit: this.redoGlobalWidgetEdit
                    })
                }) : e ? (0,
                R.jsx)(u.NavMarker, {
                    name: "GLOBAL_MODULE_EDITOR_ERROR",
                    children: (0,
                    R.jsx)(m.default, {
                        grow: 1,
                        children: (0,
                        R.jsx)(h.default, {
                            title: (0,
                            p.default)("designManager.errorPages.loadingErrors.globalWidgetEditor.title"),
                            type: "badRequest",
                            children: (0,
                            R.jsx)(c.default, {
                                message: "designManager.errorPages.loadingErrors.globalWidgetEditor.message"
                            })
                        })
                    })
                }) : (0,
                R.jsx)(g.default, {
                    grow: !0
                })
            }
        }
        w.propTypes = {
            revisionId: d().number,
            globalWidgetId: d().number,
            isLoaded: d().bool.isRequired,
            isReadOnly: d().bool.isRequired,
            fetchError: d().instanceOf(Error),
            fetchGlobalWidget: d().func.isRequired,
            fetchCustomWidgets: d().func.isRequired,
            fetchMapping: d().func.isRequired,
            pastEditHistoryCount: n.default.uint32.isRequired,
            futureEditHistoryCount: n.default.uint32.isRequired,
            undoGlobalWidgetEdit: d().func.isRequired,
            redoGlobalWidgetEdit: d().func.isRequired
        };
        var H = (0,
        k.compose)((0,
        U.default)("global-widget-editor--is_active"), (0,
        r.connect)(M, B), (0,
        q.default)())(w)
    },
    1923: function(e, t, s) {
        var i = s(11)
          , n = s.n(i);
        const o = n().oneOfType([n().number, n().string]);
        t.default = {
            customWidgetId: o
        }
    }
}]);
//# sourceMappingURL=//static.hsappstatic.net/DesignManagerIde/static-2.66969/custom-widget-editor.js.map
